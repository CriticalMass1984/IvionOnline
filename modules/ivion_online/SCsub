
import shlex
import subprocess
import fnmatch
import os
import pathlib
env=object()
Import('env')

FILE_PATH = os.getcwd()
FILE_PATH = os.path.join(FILE_PATH, "IOEngine")
print("FILE_PATH: {}".format(FILE_PATH))

env.Append(CCFLAGS = '-g')

def GetSources(directory):
    matches = list()
    for root, dirnames, filenames in os.walk(os.path.join(FILE_PATH, directory)):
        for filename in fnmatch.filter(filenames, '*.cpp'):
            matches.append(os.path.join(root, filename))
    # print("GetSources: {}".format("\n".join(matches)))
    return matches


def GetSharedLibs(directory):
    matches = list()
    directory = os.path.join(FILE_PATH, directory)
    for root, dirnames, filenames in os.walk(directory):
        for filename in fnmatch.filter(filenames, '*.so'):
            matches.append(filename)  # [:len(filename)-len(".so")])
    print("GetSharedLibs: {}".format("\n".join(matches)))
    return matches

# Thirdparty source files
# Not unbundled for now as they are not commonly available as shared library

#env.StaticLibrary("Antlr4Runtime", GetSources("Extern/Antlr4Runtime/Source"), CPPPATH=["Extern/Antlr4Runtime/Include"], CXXFLAGS="-std=c++17")


def GetFlags(flag: str):
    print(os.getcwd())
    result = subprocess.run(['{}/Extern/Install/PythonDev/bin/python3.9-config'.format(FILE_PATH), flag], stdout=subprocess.PIPE)
    return shlex.split(result.stdout.decode('utf-8'))

IncludeDirs = ["{}/{}".format(FILE_PATH, x)
               for x in ["Include", "Extern/Install/PythonDev/include/python3.9"]] #
Libraries = ["python3.9"] + [x[2:] for x in GetFlags("--libs")] # GetSharedLibs("Python-3.9.1/build")
LibraryDir = ["{}/{}".format(FILE_PATH, x)
              for x in ["PythonDev/lib", "build"]]

# build main library
env.StaticLibrary(
    "IOEngine",
    GetSources("Source"),
    CPPPATH=IncludeDirs,
    CXXFLAGS="-std=c++17",
    LDFLAGS=GetFlags("--libs"),
    LIBS=Libraries,
    LIBPATH=LibraryDir)



Import('env')

#
env.Append(CXXFLAGS=['-std=c++17'])
env.Append(CCFLAGS=['-O2'])

#
sources = ["register_types.cpp"]
sources.extend(GetSources("GodotWrapper/Source"))
sources.extend(GetSources("IOEngine/Source"))
sources.extend(GetSources("IOEngine/Extern/Antlr4Runtime/Source"))

#
env.Append(CPPPATH=["GodotWrapper/Include"])


if ARGUMENTS.get('summator_shared', 'no') == 'yes':
    # Shared lib compilation
    #  env.Append(CCFLAGS=['-fPIC'])
    env['LIBS'] = []
    shared_lib = env.SharedLibrary(target='#bin/ivion_online', source=sources)
    shared_lib_shim = shared_lib[0].name.rsplit('.', 1)[0]

    env.Append(LIBS=[shared_lib_shim])
    env.Append(LIBPATH=['#bin'])
else:
    # Static compilation
    env.add_source_files(env.modules_sources, sources)
