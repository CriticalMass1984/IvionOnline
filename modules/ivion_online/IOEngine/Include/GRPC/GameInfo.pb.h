// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: GameInfo.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_GameInfo_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_GameInfo_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include <GRPC/Types.pb.h>
#include <GRPC/Effects.pb.h>
#include <GRPC/GameState.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_GameInfo_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_GameInfo_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[6]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_GameInfo_2eproto;
namespace NetworkIO {
class AIAgent;
class AIAgentDefaultTypeInternal;
extern AIAgentDefaultTypeInternal _AIAgent_default_instance_;
class CardInfo;
class CardInfoDefaultTypeInternal;
extern CardInfoDefaultTypeInternal _CardInfo_default_instance_;
class GameInfo;
class GameInfoDefaultTypeInternal;
extern GameInfoDefaultTypeInternal _GameInfo_default_instance_;
class PlayerAgent;
class PlayerAgentDefaultTypeInternal;
extern PlayerAgentDefaultTypeInternal _PlayerAgent_default_instance_;
class PlayerInfo;
class PlayerInfoDefaultTypeInternal;
extern PlayerInfoDefaultTypeInternal _PlayerInfo_default_instance_;
class RandomAgent;
class RandomAgentDefaultTypeInternal;
extern RandomAgentDefaultTypeInternal _RandomAgent_default_instance_;
}  // namespace NetworkIO
PROTOBUF_NAMESPACE_OPEN
template<> ::NetworkIO::AIAgent* Arena::CreateMaybeMessage<::NetworkIO::AIAgent>(Arena*);
template<> ::NetworkIO::CardInfo* Arena::CreateMaybeMessage<::NetworkIO::CardInfo>(Arena*);
template<> ::NetworkIO::GameInfo* Arena::CreateMaybeMessage<::NetworkIO::GameInfo>(Arena*);
template<> ::NetworkIO::PlayerAgent* Arena::CreateMaybeMessage<::NetworkIO::PlayerAgent>(Arena*);
template<> ::NetworkIO::PlayerInfo* Arena::CreateMaybeMessage<::NetworkIO::PlayerInfo>(Arena*);
template<> ::NetworkIO::RandomAgent* Arena::CreateMaybeMessage<::NetworkIO::RandomAgent>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace NetworkIO {

// ===================================================================

class CardInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:NetworkIO.CardInfo) */ {
 public:
  inline CardInfo() : CardInfo(nullptr) {}
  virtual ~CardInfo();

  CardInfo(const CardInfo& from);
  CardInfo(CardInfo&& from) noexcept
    : CardInfo() {
    *this = ::std::move(from);
  }

  inline CardInfo& operator=(const CardInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline CardInfo& operator=(CardInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CardInfo& default_instance();

  static inline const CardInfo* internal_default_instance() {
    return reinterpret_cast<const CardInfo*>(
               &_CardInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CardInfo& a, CardInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(CardInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CardInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CardInfo* New() const final {
    return CreateMaybeMessage<CardInfo>(nullptr);
  }

  CardInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CardInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CardInfo& from);
  void MergeFrom(const CardInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CardInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "NetworkIO.CardInfo";
  }
  protected:
  explicit CardInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_GameInfo_2eproto);
    return ::descriptor_table_GameInfo_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMetadataFieldNumber = 1,
    kCountFieldNumber = 2,
  };
  // .GameState.CardMetaData metadata = 1;
  bool has_metadata() const;
  private:
  bool _internal_has_metadata() const;
  public:
  void clear_metadata();
  const ::GameState::CardMetaData& metadata() const;
  ::GameState::CardMetaData* release_metadata();
  ::GameState::CardMetaData* mutable_metadata();
  void set_allocated_metadata(::GameState::CardMetaData* metadata);
  private:
  const ::GameState::CardMetaData& _internal_metadata() const;
  ::GameState::CardMetaData* _internal_mutable_metadata();
  public:
  void unsafe_arena_set_allocated_metadata(
      ::GameState::CardMetaData* metadata);
  ::GameState::CardMetaData* unsafe_arena_release_metadata();

  // int32 Count = 2;
  void clear_count();
  ::PROTOBUF_NAMESPACE_ID::int32 count() const;
  void set_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_count() const;
  void _internal_set_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:NetworkIO.CardInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::GameState::CardMetaData* metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_GameInfo_2eproto;
};
// -------------------------------------------------------------------

class RandomAgent PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:NetworkIO.RandomAgent) */ {
 public:
  inline RandomAgent() : RandomAgent(nullptr) {}
  virtual ~RandomAgent();

  RandomAgent(const RandomAgent& from);
  RandomAgent(RandomAgent&& from) noexcept
    : RandomAgent() {
    *this = ::std::move(from);
  }

  inline RandomAgent& operator=(const RandomAgent& from) {
    CopyFrom(from);
    return *this;
  }
  inline RandomAgent& operator=(RandomAgent&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RandomAgent& default_instance();

  static inline const RandomAgent* internal_default_instance() {
    return reinterpret_cast<const RandomAgent*>(
               &_RandomAgent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(RandomAgent& a, RandomAgent& b) {
    a.Swap(&b);
  }
  inline void Swap(RandomAgent* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RandomAgent* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RandomAgent* New() const final {
    return CreateMaybeMessage<RandomAgent>(nullptr);
  }

  RandomAgent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RandomAgent>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RandomAgent& from);
  void MergeFrom(const RandomAgent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RandomAgent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "NetworkIO.RandomAgent";
  }
  protected:
  explicit RandomAgent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_GameInfo_2eproto);
    return ::descriptor_table_GameInfo_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:NetworkIO.RandomAgent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_GameInfo_2eproto;
};
// -------------------------------------------------------------------

class AIAgent PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:NetworkIO.AIAgent) */ {
 public:
  inline AIAgent() : AIAgent(nullptr) {}
  virtual ~AIAgent();

  AIAgent(const AIAgent& from);
  AIAgent(AIAgent&& from) noexcept
    : AIAgent() {
    *this = ::std::move(from);
  }

  inline AIAgent& operator=(const AIAgent& from) {
    CopyFrom(from);
    return *this;
  }
  inline AIAgent& operator=(AIAgent&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AIAgent& default_instance();

  static inline const AIAgent* internal_default_instance() {
    return reinterpret_cast<const AIAgent*>(
               &_AIAgent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(AIAgent& a, AIAgent& b) {
    a.Swap(&b);
  }
  inline void Swap(AIAgent* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AIAgent* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AIAgent* New() const final {
    return CreateMaybeMessage<AIAgent>(nullptr);
  }

  AIAgent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AIAgent>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AIAgent& from);
  void MergeFrom(const AIAgent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AIAgent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "NetworkIO.AIAgent";
  }
  protected:
  explicit AIAgent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_GameInfo_2eproto);
    return ::descriptor_table_GameInfo_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:NetworkIO.AIAgent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_GameInfo_2eproto;
};
// -------------------------------------------------------------------

class PlayerAgent PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:NetworkIO.PlayerAgent) */ {
 public:
  inline PlayerAgent() : PlayerAgent(nullptr) {}
  virtual ~PlayerAgent();

  PlayerAgent(const PlayerAgent& from);
  PlayerAgent(PlayerAgent&& from) noexcept
    : PlayerAgent() {
    *this = ::std::move(from);
  }

  inline PlayerAgent& operator=(const PlayerAgent& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlayerAgent& operator=(PlayerAgent&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PlayerAgent& default_instance();

  static inline const PlayerAgent* internal_default_instance() {
    return reinterpret_cast<const PlayerAgent*>(
               &_PlayerAgent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(PlayerAgent& a, PlayerAgent& b) {
    a.Swap(&b);
  }
  inline void Swap(PlayerAgent* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PlayerAgent* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PlayerAgent* New() const final {
    return CreateMaybeMessage<PlayerAgent>(nullptr);
  }

  PlayerAgent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PlayerAgent>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PlayerAgent& from);
  void MergeFrom(const PlayerAgent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlayerAgent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "NetworkIO.PlayerAgent";
  }
  protected:
  explicit PlayerAgent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_GameInfo_2eproto);
    return ::descriptor_table_GameInfo_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:NetworkIO.PlayerAgent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_GameInfo_2eproto;
};
// -------------------------------------------------------------------

class PlayerInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:NetworkIO.PlayerInfo) */ {
 public:
  inline PlayerInfo() : PlayerInfo(nullptr) {}
  virtual ~PlayerInfo();

  PlayerInfo(const PlayerInfo& from);
  PlayerInfo(PlayerInfo&& from) noexcept
    : PlayerInfo() {
    *this = ::std::move(from);
  }

  inline PlayerInfo& operator=(const PlayerInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlayerInfo& operator=(PlayerInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PlayerInfo& default_instance();

  enum AgentInfoCase {
    kAIAgent = 5,
    kRandomAgent = 6,
    kPlayerAgent = 7,
    AGENTINFO_NOT_SET = 0,
  };

  static inline const PlayerInfo* internal_default_instance() {
    return reinterpret_cast<const PlayerInfo*>(
               &_PlayerInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(PlayerInfo& a, PlayerInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(PlayerInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PlayerInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PlayerInfo* New() const final {
    return CreateMaybeMessage<PlayerInfo>(nullptr);
  }

  PlayerInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PlayerInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PlayerInfo& from);
  void MergeFrom(const PlayerInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlayerInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "NetworkIO.PlayerInfo";
  }
  protected:
  explicit PlayerInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_GameInfo_2eproto);
    return ::descriptor_table_GameInfo_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDeckFieldNumber = 3,
    kUsernameFieldNumber = 1,
    kUIDFieldNumber = 2,
    kStartingPositionFieldNumber = 4,
    kAIAgentFieldNumber = 5,
    kRandomAgentFieldNumber = 6,
    kPlayerAgentFieldNumber = 7,
  };
  // repeated .NetworkIO.CardInfo Deck = 3;
  int deck_size() const;
  private:
  int _internal_deck_size() const;
  public:
  void clear_deck();
  ::NetworkIO::CardInfo* mutable_deck(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NetworkIO::CardInfo >*
      mutable_deck();
  private:
  const ::NetworkIO::CardInfo& _internal_deck(int index) const;
  ::NetworkIO::CardInfo* _internal_add_deck();
  public:
  const ::NetworkIO::CardInfo& deck(int index) const;
  ::NetworkIO::CardInfo* add_deck();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NetworkIO::CardInfo >&
      deck() const;

  // string Username = 1;
  void clear_username();
  const std::string& username() const;
  void set_username(const std::string& value);
  void set_username(std::string&& value);
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  std::string* mutable_username();
  std::string* release_username();
  void set_allocated_username(std::string* username);
  private:
  const std::string& _internal_username() const;
  void _internal_set_username(const std::string& value);
  std::string* _internal_mutable_username();
  public:

  // string UID = 2;
  void clear_uid();
  const std::string& uid() const;
  void set_uid(const std::string& value);
  void set_uid(std::string&& value);
  void set_uid(const char* value);
  void set_uid(const char* value, size_t size);
  std::string* mutable_uid();
  std::string* release_uid();
  void set_allocated_uid(std::string* uid);
  private:
  const std::string& _internal_uid() const;
  void _internal_set_uid(const std::string& value);
  std::string* _internal_mutable_uid();
  public:

  // .Types.Vec2i StartingPosition = 4;
  bool has_startingposition() const;
  private:
  bool _internal_has_startingposition() const;
  public:
  void clear_startingposition();
  const ::Types::Vec2i& startingposition() const;
  ::Types::Vec2i* release_startingposition();
  ::Types::Vec2i* mutable_startingposition();
  void set_allocated_startingposition(::Types::Vec2i* startingposition);
  private:
  const ::Types::Vec2i& _internal_startingposition() const;
  ::Types::Vec2i* _internal_mutable_startingposition();
  public:
  void unsafe_arena_set_allocated_startingposition(
      ::Types::Vec2i* startingposition);
  ::Types::Vec2i* unsafe_arena_release_startingposition();

  // .NetworkIO.AIAgent AIAgent = 5;
  bool has_aiagent() const;
  private:
  bool _internal_has_aiagent() const;
  public:
  void clear_aiagent();
  const ::NetworkIO::AIAgent& aiagent() const;
  ::NetworkIO::AIAgent* release_aiagent();
  ::NetworkIO::AIAgent* mutable_aiagent();
  void set_allocated_aiagent(::NetworkIO::AIAgent* aiagent);
  private:
  const ::NetworkIO::AIAgent& _internal_aiagent() const;
  ::NetworkIO::AIAgent* _internal_mutable_aiagent();
  public:
  void unsafe_arena_set_allocated_aiagent(
      ::NetworkIO::AIAgent* aiagent);
  ::NetworkIO::AIAgent* unsafe_arena_release_aiagent();

  // .NetworkIO.RandomAgent RandomAgent = 6;
  bool has_randomagent() const;
  private:
  bool _internal_has_randomagent() const;
  public:
  void clear_randomagent();
  const ::NetworkIO::RandomAgent& randomagent() const;
  ::NetworkIO::RandomAgent* release_randomagent();
  ::NetworkIO::RandomAgent* mutable_randomagent();
  void set_allocated_randomagent(::NetworkIO::RandomAgent* randomagent);
  private:
  const ::NetworkIO::RandomAgent& _internal_randomagent() const;
  ::NetworkIO::RandomAgent* _internal_mutable_randomagent();
  public:
  void unsafe_arena_set_allocated_randomagent(
      ::NetworkIO::RandomAgent* randomagent);
  ::NetworkIO::RandomAgent* unsafe_arena_release_randomagent();

  // .NetworkIO.PlayerAgent PlayerAgent = 7;
  bool has_playeragent() const;
  private:
  bool _internal_has_playeragent() const;
  public:
  void clear_playeragent();
  const ::NetworkIO::PlayerAgent& playeragent() const;
  ::NetworkIO::PlayerAgent* release_playeragent();
  ::NetworkIO::PlayerAgent* mutable_playeragent();
  void set_allocated_playeragent(::NetworkIO::PlayerAgent* playeragent);
  private:
  const ::NetworkIO::PlayerAgent& _internal_playeragent() const;
  ::NetworkIO::PlayerAgent* _internal_mutable_playeragent();
  public:
  void unsafe_arena_set_allocated_playeragent(
      ::NetworkIO::PlayerAgent* playeragent);
  ::NetworkIO::PlayerAgent* unsafe_arena_release_playeragent();

  void clear_AgentInfo();
  AgentInfoCase AgentInfo_case() const;
  // @@protoc_insertion_point(class_scope:NetworkIO.PlayerInfo)
 private:
  class _Internal;
  void set_has_aiagent();
  void set_has_randomagent();
  void set_has_playeragent();

  inline bool has_AgentInfo() const;
  inline void clear_has_AgentInfo();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NetworkIO::CardInfo > deck_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr username_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uid_;
  ::Types::Vec2i* startingposition_;
  union AgentInfoUnion {
    AgentInfoUnion() {}
    ::NetworkIO::AIAgent* aiagent_;
    ::NetworkIO::RandomAgent* randomagent_;
    ::NetworkIO::PlayerAgent* playeragent_;
  } AgentInfo_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_GameInfo_2eproto;
};
// -------------------------------------------------------------------

class GameInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:NetworkIO.GameInfo) */ {
 public:
  inline GameInfo() : GameInfo(nullptr) {}
  virtual ~GameInfo();

  GameInfo(const GameInfo& from);
  GameInfo(GameInfo&& from) noexcept
    : GameInfo() {
    *this = ::std::move(from);
  }

  inline GameInfo& operator=(const GameInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline GameInfo& operator=(GameInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GameInfo& default_instance();

  static inline const GameInfo* internal_default_instance() {
    return reinterpret_cast<const GameInfo*>(
               &_GameInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(GameInfo& a, GameInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(GameInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GameInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GameInfo* New() const final {
    return CreateMaybeMessage<GameInfo>(nullptr);
  }

  GameInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GameInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GameInfo& from);
  void MergeFrom(const GameInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GameInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "NetworkIO.GameInfo";
  }
  protected:
  explicit GameInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_GameInfo_2eproto);
    return ::descriptor_table_GameInfo_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayersFieldNumber = 1,
    kMapSizeFieldNumber = 2,
  };
  // repeated .NetworkIO.PlayerInfo Players = 1;
  int players_size() const;
  private:
  int _internal_players_size() const;
  public:
  void clear_players();
  ::NetworkIO::PlayerInfo* mutable_players(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NetworkIO::PlayerInfo >*
      mutable_players();
  private:
  const ::NetworkIO::PlayerInfo& _internal_players(int index) const;
  ::NetworkIO::PlayerInfo* _internal_add_players();
  public:
  const ::NetworkIO::PlayerInfo& players(int index) const;
  ::NetworkIO::PlayerInfo* add_players();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NetworkIO::PlayerInfo >&
      players() const;

  // .Types.Vec2i MapSize = 2;
  bool has_mapsize() const;
  private:
  bool _internal_has_mapsize() const;
  public:
  void clear_mapsize();
  const ::Types::Vec2i& mapsize() const;
  ::Types::Vec2i* release_mapsize();
  ::Types::Vec2i* mutable_mapsize();
  void set_allocated_mapsize(::Types::Vec2i* mapsize);
  private:
  const ::Types::Vec2i& _internal_mapsize() const;
  ::Types::Vec2i* _internal_mutable_mapsize();
  public:
  void unsafe_arena_set_allocated_mapsize(
      ::Types::Vec2i* mapsize);
  ::Types::Vec2i* unsafe_arena_release_mapsize();

  // @@protoc_insertion_point(class_scope:NetworkIO.GameInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NetworkIO::PlayerInfo > players_;
  ::Types::Vec2i* mapsize_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_GameInfo_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CardInfo

// .GameState.CardMetaData metadata = 1;
inline bool CardInfo::_internal_has_metadata() const {
  return this != internal_default_instance() && metadata_ != nullptr;
}
inline bool CardInfo::has_metadata() const {
  return _internal_has_metadata();
}
inline const ::GameState::CardMetaData& CardInfo::_internal_metadata() const {
  const ::GameState::CardMetaData* p = metadata_;
  return p != nullptr ? *p : reinterpret_cast<const ::GameState::CardMetaData&>(
      ::GameState::_CardMetaData_default_instance_);
}
inline const ::GameState::CardMetaData& CardInfo::metadata() const {
  // @@protoc_insertion_point(field_get:NetworkIO.CardInfo.metadata)
  return _internal_metadata();
}
inline void CardInfo::unsafe_arena_set_allocated_metadata(
    ::GameState::CardMetaData* metadata) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(metadata_);
  }
  metadata_ = metadata;
  if (metadata) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:NetworkIO.CardInfo.metadata)
}
inline ::GameState::CardMetaData* CardInfo::release_metadata() {
  
  ::GameState::CardMetaData* temp = metadata_;
  metadata_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::GameState::CardMetaData* CardInfo::unsafe_arena_release_metadata() {
  // @@protoc_insertion_point(field_release:NetworkIO.CardInfo.metadata)
  
  ::GameState::CardMetaData* temp = metadata_;
  metadata_ = nullptr;
  return temp;
}
inline ::GameState::CardMetaData* CardInfo::_internal_mutable_metadata() {
  
  if (metadata_ == nullptr) {
    auto* p = CreateMaybeMessage<::GameState::CardMetaData>(GetArena());
    metadata_ = p;
  }
  return metadata_;
}
inline ::GameState::CardMetaData* CardInfo::mutable_metadata() {
  // @@protoc_insertion_point(field_mutable:NetworkIO.CardInfo.metadata)
  return _internal_mutable_metadata();
}
inline void CardInfo::set_allocated_metadata(::GameState::CardMetaData* metadata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(metadata_);
  }
  if (metadata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(metadata)->GetArena();
    if (message_arena != submessage_arena) {
      metadata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, metadata, submessage_arena);
    }
    
  } else {
    
  }
  metadata_ = metadata;
  // @@protoc_insertion_point(field_set_allocated:NetworkIO.CardInfo.metadata)
}

// int32 Count = 2;
inline void CardInfo::clear_count() {
  count_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CardInfo::_internal_count() const {
  return count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CardInfo::count() const {
  // @@protoc_insertion_point(field_get:NetworkIO.CardInfo.Count)
  return _internal_count();
}
inline void CardInfo::_internal_set_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  count_ = value;
}
inline void CardInfo::set_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:NetworkIO.CardInfo.Count)
}

// -------------------------------------------------------------------

// RandomAgent

// -------------------------------------------------------------------

// AIAgent

// -------------------------------------------------------------------

// PlayerAgent

// -------------------------------------------------------------------

// PlayerInfo

// string Username = 1;
inline void PlayerInfo::clear_username() {
  username_.ClearToEmpty();
}
inline const std::string& PlayerInfo::username() const {
  // @@protoc_insertion_point(field_get:NetworkIO.PlayerInfo.Username)
  return _internal_username();
}
inline void PlayerInfo::set_username(const std::string& value) {
  _internal_set_username(value);
  // @@protoc_insertion_point(field_set:NetworkIO.PlayerInfo.Username)
}
inline std::string* PlayerInfo::mutable_username() {
  // @@protoc_insertion_point(field_mutable:NetworkIO.PlayerInfo.Username)
  return _internal_mutable_username();
}
inline const std::string& PlayerInfo::_internal_username() const {
  return username_.Get();
}
inline void PlayerInfo::_internal_set_username(const std::string& value) {
  
  username_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void PlayerInfo::set_username(std::string&& value) {
  
  username_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:NetworkIO.PlayerInfo.Username)
}
inline void PlayerInfo::set_username(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  username_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:NetworkIO.PlayerInfo.Username)
}
inline void PlayerInfo::set_username(const char* value,
    size_t size) {
  
  username_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:NetworkIO.PlayerInfo.Username)
}
inline std::string* PlayerInfo::_internal_mutable_username() {
  
  return username_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* PlayerInfo::release_username() {
  // @@protoc_insertion_point(field_release:NetworkIO.PlayerInfo.Username)
  return username_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PlayerInfo::set_allocated_username(std::string* username) {
  if (username != nullptr) {
    
  } else {
    
  }
  username_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), username,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:NetworkIO.PlayerInfo.Username)
}

// string UID = 2;
inline void PlayerInfo::clear_uid() {
  uid_.ClearToEmpty();
}
inline const std::string& PlayerInfo::uid() const {
  // @@protoc_insertion_point(field_get:NetworkIO.PlayerInfo.UID)
  return _internal_uid();
}
inline void PlayerInfo::set_uid(const std::string& value) {
  _internal_set_uid(value);
  // @@protoc_insertion_point(field_set:NetworkIO.PlayerInfo.UID)
}
inline std::string* PlayerInfo::mutable_uid() {
  // @@protoc_insertion_point(field_mutable:NetworkIO.PlayerInfo.UID)
  return _internal_mutable_uid();
}
inline const std::string& PlayerInfo::_internal_uid() const {
  return uid_.Get();
}
inline void PlayerInfo::_internal_set_uid(const std::string& value) {
  
  uid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void PlayerInfo::set_uid(std::string&& value) {
  
  uid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:NetworkIO.PlayerInfo.UID)
}
inline void PlayerInfo::set_uid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  uid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:NetworkIO.PlayerInfo.UID)
}
inline void PlayerInfo::set_uid(const char* value,
    size_t size) {
  
  uid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:NetworkIO.PlayerInfo.UID)
}
inline std::string* PlayerInfo::_internal_mutable_uid() {
  
  return uid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* PlayerInfo::release_uid() {
  // @@protoc_insertion_point(field_release:NetworkIO.PlayerInfo.UID)
  return uid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PlayerInfo::set_allocated_uid(std::string* uid) {
  if (uid != nullptr) {
    
  } else {
    
  }
  uid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), uid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:NetworkIO.PlayerInfo.UID)
}

// repeated .NetworkIO.CardInfo Deck = 3;
inline int PlayerInfo::_internal_deck_size() const {
  return deck_.size();
}
inline int PlayerInfo::deck_size() const {
  return _internal_deck_size();
}
inline void PlayerInfo::clear_deck() {
  deck_.Clear();
}
inline ::NetworkIO::CardInfo* PlayerInfo::mutable_deck(int index) {
  // @@protoc_insertion_point(field_mutable:NetworkIO.PlayerInfo.Deck)
  return deck_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NetworkIO::CardInfo >*
PlayerInfo::mutable_deck() {
  // @@protoc_insertion_point(field_mutable_list:NetworkIO.PlayerInfo.Deck)
  return &deck_;
}
inline const ::NetworkIO::CardInfo& PlayerInfo::_internal_deck(int index) const {
  return deck_.Get(index);
}
inline const ::NetworkIO::CardInfo& PlayerInfo::deck(int index) const {
  // @@protoc_insertion_point(field_get:NetworkIO.PlayerInfo.Deck)
  return _internal_deck(index);
}
inline ::NetworkIO::CardInfo* PlayerInfo::_internal_add_deck() {
  return deck_.Add();
}
inline ::NetworkIO::CardInfo* PlayerInfo::add_deck() {
  // @@protoc_insertion_point(field_add:NetworkIO.PlayerInfo.Deck)
  return _internal_add_deck();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NetworkIO::CardInfo >&
PlayerInfo::deck() const {
  // @@protoc_insertion_point(field_list:NetworkIO.PlayerInfo.Deck)
  return deck_;
}

// .Types.Vec2i StartingPosition = 4;
inline bool PlayerInfo::_internal_has_startingposition() const {
  return this != internal_default_instance() && startingposition_ != nullptr;
}
inline bool PlayerInfo::has_startingposition() const {
  return _internal_has_startingposition();
}
inline const ::Types::Vec2i& PlayerInfo::_internal_startingposition() const {
  const ::Types::Vec2i* p = startingposition_;
  return p != nullptr ? *p : reinterpret_cast<const ::Types::Vec2i&>(
      ::Types::_Vec2i_default_instance_);
}
inline const ::Types::Vec2i& PlayerInfo::startingposition() const {
  // @@protoc_insertion_point(field_get:NetworkIO.PlayerInfo.StartingPosition)
  return _internal_startingposition();
}
inline void PlayerInfo::unsafe_arena_set_allocated_startingposition(
    ::Types::Vec2i* startingposition) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(startingposition_);
  }
  startingposition_ = startingposition;
  if (startingposition) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:NetworkIO.PlayerInfo.StartingPosition)
}
inline ::Types::Vec2i* PlayerInfo::release_startingposition() {
  
  ::Types::Vec2i* temp = startingposition_;
  startingposition_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Types::Vec2i* PlayerInfo::unsafe_arena_release_startingposition() {
  // @@protoc_insertion_point(field_release:NetworkIO.PlayerInfo.StartingPosition)
  
  ::Types::Vec2i* temp = startingposition_;
  startingposition_ = nullptr;
  return temp;
}
inline ::Types::Vec2i* PlayerInfo::_internal_mutable_startingposition() {
  
  if (startingposition_ == nullptr) {
    auto* p = CreateMaybeMessage<::Types::Vec2i>(GetArena());
    startingposition_ = p;
  }
  return startingposition_;
}
inline ::Types::Vec2i* PlayerInfo::mutable_startingposition() {
  // @@protoc_insertion_point(field_mutable:NetworkIO.PlayerInfo.StartingPosition)
  return _internal_mutable_startingposition();
}
inline void PlayerInfo::set_allocated_startingposition(::Types::Vec2i* startingposition) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(startingposition_);
  }
  if (startingposition) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(startingposition)->GetArena();
    if (message_arena != submessage_arena) {
      startingposition = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, startingposition, submessage_arena);
    }
    
  } else {
    
  }
  startingposition_ = startingposition;
  // @@protoc_insertion_point(field_set_allocated:NetworkIO.PlayerInfo.StartingPosition)
}

// .NetworkIO.AIAgent AIAgent = 5;
inline bool PlayerInfo::_internal_has_aiagent() const {
  return AgentInfo_case() == kAIAgent;
}
inline bool PlayerInfo::has_aiagent() const {
  return _internal_has_aiagent();
}
inline void PlayerInfo::set_has_aiagent() {
  _oneof_case_[0] = kAIAgent;
}
inline void PlayerInfo::clear_aiagent() {
  if (_internal_has_aiagent()) {
    if (GetArena() == nullptr) {
      delete AgentInfo_.aiagent_;
    }
    clear_has_AgentInfo();
  }
}
inline ::NetworkIO::AIAgent* PlayerInfo::release_aiagent() {
  // @@protoc_insertion_point(field_release:NetworkIO.PlayerInfo.AIAgent)
  if (_internal_has_aiagent()) {
    clear_has_AgentInfo();
      ::NetworkIO::AIAgent* temp = AgentInfo_.aiagent_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    AgentInfo_.aiagent_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::NetworkIO::AIAgent& PlayerInfo::_internal_aiagent() const {
  return _internal_has_aiagent()
      ? *AgentInfo_.aiagent_
      : reinterpret_cast< ::NetworkIO::AIAgent&>(::NetworkIO::_AIAgent_default_instance_);
}
inline const ::NetworkIO::AIAgent& PlayerInfo::aiagent() const {
  // @@protoc_insertion_point(field_get:NetworkIO.PlayerInfo.AIAgent)
  return _internal_aiagent();
}
inline ::NetworkIO::AIAgent* PlayerInfo::unsafe_arena_release_aiagent() {
  // @@protoc_insertion_point(field_unsafe_arena_release:NetworkIO.PlayerInfo.AIAgent)
  if (_internal_has_aiagent()) {
    clear_has_AgentInfo();
    ::NetworkIO::AIAgent* temp = AgentInfo_.aiagent_;
    AgentInfo_.aiagent_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void PlayerInfo::unsafe_arena_set_allocated_aiagent(::NetworkIO::AIAgent* aiagent) {
  clear_AgentInfo();
  if (aiagent) {
    set_has_aiagent();
    AgentInfo_.aiagent_ = aiagent;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:NetworkIO.PlayerInfo.AIAgent)
}
inline ::NetworkIO::AIAgent* PlayerInfo::_internal_mutable_aiagent() {
  if (!_internal_has_aiagent()) {
    clear_AgentInfo();
    set_has_aiagent();
    AgentInfo_.aiagent_ = CreateMaybeMessage< ::NetworkIO::AIAgent >(GetArena());
  }
  return AgentInfo_.aiagent_;
}
inline ::NetworkIO::AIAgent* PlayerInfo::mutable_aiagent() {
  // @@protoc_insertion_point(field_mutable:NetworkIO.PlayerInfo.AIAgent)
  return _internal_mutable_aiagent();
}

// .NetworkIO.RandomAgent RandomAgent = 6;
inline bool PlayerInfo::_internal_has_randomagent() const {
  return AgentInfo_case() == kRandomAgent;
}
inline bool PlayerInfo::has_randomagent() const {
  return _internal_has_randomagent();
}
inline void PlayerInfo::set_has_randomagent() {
  _oneof_case_[0] = kRandomAgent;
}
inline void PlayerInfo::clear_randomagent() {
  if (_internal_has_randomagent()) {
    if (GetArena() == nullptr) {
      delete AgentInfo_.randomagent_;
    }
    clear_has_AgentInfo();
  }
}
inline ::NetworkIO::RandomAgent* PlayerInfo::release_randomagent() {
  // @@protoc_insertion_point(field_release:NetworkIO.PlayerInfo.RandomAgent)
  if (_internal_has_randomagent()) {
    clear_has_AgentInfo();
      ::NetworkIO::RandomAgent* temp = AgentInfo_.randomagent_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    AgentInfo_.randomagent_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::NetworkIO::RandomAgent& PlayerInfo::_internal_randomagent() const {
  return _internal_has_randomagent()
      ? *AgentInfo_.randomagent_
      : reinterpret_cast< ::NetworkIO::RandomAgent&>(::NetworkIO::_RandomAgent_default_instance_);
}
inline const ::NetworkIO::RandomAgent& PlayerInfo::randomagent() const {
  // @@protoc_insertion_point(field_get:NetworkIO.PlayerInfo.RandomAgent)
  return _internal_randomagent();
}
inline ::NetworkIO::RandomAgent* PlayerInfo::unsafe_arena_release_randomagent() {
  // @@protoc_insertion_point(field_unsafe_arena_release:NetworkIO.PlayerInfo.RandomAgent)
  if (_internal_has_randomagent()) {
    clear_has_AgentInfo();
    ::NetworkIO::RandomAgent* temp = AgentInfo_.randomagent_;
    AgentInfo_.randomagent_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void PlayerInfo::unsafe_arena_set_allocated_randomagent(::NetworkIO::RandomAgent* randomagent) {
  clear_AgentInfo();
  if (randomagent) {
    set_has_randomagent();
    AgentInfo_.randomagent_ = randomagent;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:NetworkIO.PlayerInfo.RandomAgent)
}
inline ::NetworkIO::RandomAgent* PlayerInfo::_internal_mutable_randomagent() {
  if (!_internal_has_randomagent()) {
    clear_AgentInfo();
    set_has_randomagent();
    AgentInfo_.randomagent_ = CreateMaybeMessage< ::NetworkIO::RandomAgent >(GetArena());
  }
  return AgentInfo_.randomagent_;
}
inline ::NetworkIO::RandomAgent* PlayerInfo::mutable_randomagent() {
  // @@protoc_insertion_point(field_mutable:NetworkIO.PlayerInfo.RandomAgent)
  return _internal_mutable_randomagent();
}

// .NetworkIO.PlayerAgent PlayerAgent = 7;
inline bool PlayerInfo::_internal_has_playeragent() const {
  return AgentInfo_case() == kPlayerAgent;
}
inline bool PlayerInfo::has_playeragent() const {
  return _internal_has_playeragent();
}
inline void PlayerInfo::set_has_playeragent() {
  _oneof_case_[0] = kPlayerAgent;
}
inline void PlayerInfo::clear_playeragent() {
  if (_internal_has_playeragent()) {
    if (GetArena() == nullptr) {
      delete AgentInfo_.playeragent_;
    }
    clear_has_AgentInfo();
  }
}
inline ::NetworkIO::PlayerAgent* PlayerInfo::release_playeragent() {
  // @@protoc_insertion_point(field_release:NetworkIO.PlayerInfo.PlayerAgent)
  if (_internal_has_playeragent()) {
    clear_has_AgentInfo();
      ::NetworkIO::PlayerAgent* temp = AgentInfo_.playeragent_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    AgentInfo_.playeragent_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::NetworkIO::PlayerAgent& PlayerInfo::_internal_playeragent() const {
  return _internal_has_playeragent()
      ? *AgentInfo_.playeragent_
      : reinterpret_cast< ::NetworkIO::PlayerAgent&>(::NetworkIO::_PlayerAgent_default_instance_);
}
inline const ::NetworkIO::PlayerAgent& PlayerInfo::playeragent() const {
  // @@protoc_insertion_point(field_get:NetworkIO.PlayerInfo.PlayerAgent)
  return _internal_playeragent();
}
inline ::NetworkIO::PlayerAgent* PlayerInfo::unsafe_arena_release_playeragent() {
  // @@protoc_insertion_point(field_unsafe_arena_release:NetworkIO.PlayerInfo.PlayerAgent)
  if (_internal_has_playeragent()) {
    clear_has_AgentInfo();
    ::NetworkIO::PlayerAgent* temp = AgentInfo_.playeragent_;
    AgentInfo_.playeragent_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void PlayerInfo::unsafe_arena_set_allocated_playeragent(::NetworkIO::PlayerAgent* playeragent) {
  clear_AgentInfo();
  if (playeragent) {
    set_has_playeragent();
    AgentInfo_.playeragent_ = playeragent;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:NetworkIO.PlayerInfo.PlayerAgent)
}
inline ::NetworkIO::PlayerAgent* PlayerInfo::_internal_mutable_playeragent() {
  if (!_internal_has_playeragent()) {
    clear_AgentInfo();
    set_has_playeragent();
    AgentInfo_.playeragent_ = CreateMaybeMessage< ::NetworkIO::PlayerAgent >(GetArena());
  }
  return AgentInfo_.playeragent_;
}
inline ::NetworkIO::PlayerAgent* PlayerInfo::mutable_playeragent() {
  // @@protoc_insertion_point(field_mutable:NetworkIO.PlayerInfo.PlayerAgent)
  return _internal_mutable_playeragent();
}

inline bool PlayerInfo::has_AgentInfo() const {
  return AgentInfo_case() != AGENTINFO_NOT_SET;
}
inline void PlayerInfo::clear_has_AgentInfo() {
  _oneof_case_[0] = AGENTINFO_NOT_SET;
}
inline PlayerInfo::AgentInfoCase PlayerInfo::AgentInfo_case() const {
  return PlayerInfo::AgentInfoCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// GameInfo

// repeated .NetworkIO.PlayerInfo Players = 1;
inline int GameInfo::_internal_players_size() const {
  return players_.size();
}
inline int GameInfo::players_size() const {
  return _internal_players_size();
}
inline void GameInfo::clear_players() {
  players_.Clear();
}
inline ::NetworkIO::PlayerInfo* GameInfo::mutable_players(int index) {
  // @@protoc_insertion_point(field_mutable:NetworkIO.GameInfo.Players)
  return players_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NetworkIO::PlayerInfo >*
GameInfo::mutable_players() {
  // @@protoc_insertion_point(field_mutable_list:NetworkIO.GameInfo.Players)
  return &players_;
}
inline const ::NetworkIO::PlayerInfo& GameInfo::_internal_players(int index) const {
  return players_.Get(index);
}
inline const ::NetworkIO::PlayerInfo& GameInfo::players(int index) const {
  // @@protoc_insertion_point(field_get:NetworkIO.GameInfo.Players)
  return _internal_players(index);
}
inline ::NetworkIO::PlayerInfo* GameInfo::_internal_add_players() {
  return players_.Add();
}
inline ::NetworkIO::PlayerInfo* GameInfo::add_players() {
  // @@protoc_insertion_point(field_add:NetworkIO.GameInfo.Players)
  return _internal_add_players();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NetworkIO::PlayerInfo >&
GameInfo::players() const {
  // @@protoc_insertion_point(field_list:NetworkIO.GameInfo.Players)
  return players_;
}

// .Types.Vec2i MapSize = 2;
inline bool GameInfo::_internal_has_mapsize() const {
  return this != internal_default_instance() && mapsize_ != nullptr;
}
inline bool GameInfo::has_mapsize() const {
  return _internal_has_mapsize();
}
inline const ::Types::Vec2i& GameInfo::_internal_mapsize() const {
  const ::Types::Vec2i* p = mapsize_;
  return p != nullptr ? *p : reinterpret_cast<const ::Types::Vec2i&>(
      ::Types::_Vec2i_default_instance_);
}
inline const ::Types::Vec2i& GameInfo::mapsize() const {
  // @@protoc_insertion_point(field_get:NetworkIO.GameInfo.MapSize)
  return _internal_mapsize();
}
inline void GameInfo::unsafe_arena_set_allocated_mapsize(
    ::Types::Vec2i* mapsize) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mapsize_);
  }
  mapsize_ = mapsize;
  if (mapsize) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:NetworkIO.GameInfo.MapSize)
}
inline ::Types::Vec2i* GameInfo::release_mapsize() {
  
  ::Types::Vec2i* temp = mapsize_;
  mapsize_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Types::Vec2i* GameInfo::unsafe_arena_release_mapsize() {
  // @@protoc_insertion_point(field_release:NetworkIO.GameInfo.MapSize)
  
  ::Types::Vec2i* temp = mapsize_;
  mapsize_ = nullptr;
  return temp;
}
inline ::Types::Vec2i* GameInfo::_internal_mutable_mapsize() {
  
  if (mapsize_ == nullptr) {
    auto* p = CreateMaybeMessage<::Types::Vec2i>(GetArena());
    mapsize_ = p;
  }
  return mapsize_;
}
inline ::Types::Vec2i* GameInfo::mutable_mapsize() {
  // @@protoc_insertion_point(field_mutable:NetworkIO.GameInfo.MapSize)
  return _internal_mutable_mapsize();
}
inline void GameInfo::set_allocated_mapsize(::Types::Vec2i* mapsize) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(mapsize_);
  }
  if (mapsize) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mapsize)->GetArena();
    if (message_arena != submessage_arena) {
      mapsize = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mapsize, submessage_arena);
    }
    
  } else {
    
  }
  mapsize_ = mapsize;
  // @@protoc_insertion_point(field_set_allocated:NetworkIO.GameInfo.MapSize)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace NetworkIO

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_GameInfo_2eproto
