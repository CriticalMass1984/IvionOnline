// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: GameInfo.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_GameInfo_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_GameInfo_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include <GRPC/GameState.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_GameInfo_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_GameInfo_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_GameInfo_2eproto;
namespace IvionOnline {
class CardInfo;
class CardInfoDefaultTypeInternal;
extern CardInfoDefaultTypeInternal _CardInfo_default_instance_;
class DeckList;
class DeckListDefaultTypeInternal;
extern DeckListDefaultTypeInternal _DeckList_default_instance_;
class GameInfo;
class GameInfoDefaultTypeInternal;
extern GameInfoDefaultTypeInternal _GameInfo_default_instance_;
class PlayerInfo;
class PlayerInfoDefaultTypeInternal;
extern PlayerInfoDefaultTypeInternal _PlayerInfo_default_instance_;
}  // namespace IvionOnline
PROTOBUF_NAMESPACE_OPEN
template<> ::IvionOnline::CardInfo* Arena::CreateMaybeMessage<::IvionOnline::CardInfo>(Arena*);
template<> ::IvionOnline::DeckList* Arena::CreateMaybeMessage<::IvionOnline::DeckList>(Arena*);
template<> ::IvionOnline::GameInfo* Arena::CreateMaybeMessage<::IvionOnline::GameInfo>(Arena*);
template<> ::IvionOnline::PlayerInfo* Arena::CreateMaybeMessage<::IvionOnline::PlayerInfo>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace IvionOnline {

// ===================================================================

class CardInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IvionOnline.CardInfo) */ {
 public:
  inline CardInfo() : CardInfo(nullptr) {}
  virtual ~CardInfo();

  CardInfo(const CardInfo& from);
  CardInfo(CardInfo&& from) noexcept
    : CardInfo() {
    *this = ::std::move(from);
  }

  inline CardInfo& operator=(const CardInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline CardInfo& operator=(CardInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CardInfo& default_instance();

  static inline const CardInfo* internal_default_instance() {
    return reinterpret_cast<const CardInfo*>(
               &_CardInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CardInfo& a, CardInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(CardInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CardInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CardInfo* New() const final {
    return CreateMaybeMessage<CardInfo>(nullptr);
  }

  CardInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CardInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CardInfo& from);
  void MergeFrom(const CardInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CardInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IvionOnline.CardInfo";
  }
  protected:
  explicit CardInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_GameInfo_2eproto);
    return ::descriptor_table_GameInfo_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCardUIDFieldNumber = 1,
    kCardCountFieldNumber = 2,
  };
  // string Card_UID = 1;
  void clear_card_uid();
  const std::string& card_uid() const;
  void set_card_uid(const std::string& value);
  void set_card_uid(std::string&& value);
  void set_card_uid(const char* value);
  void set_card_uid(const char* value, size_t size);
  std::string* mutable_card_uid();
  std::string* release_card_uid();
  void set_allocated_card_uid(std::string* card_uid);
  private:
  const std::string& _internal_card_uid() const;
  void _internal_set_card_uid(const std::string& value);
  std::string* _internal_mutable_card_uid();
  public:

  // int32 Card_Count = 2;
  void clear_card_count();
  ::PROTOBUF_NAMESPACE_ID::int32 card_count() const;
  void set_card_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_card_count() const;
  void _internal_set_card_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:IvionOnline.CardInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr card_uid_;
  ::PROTOBUF_NAMESPACE_ID::int32 card_count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_GameInfo_2eproto;
};
// -------------------------------------------------------------------

class DeckList PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IvionOnline.DeckList) */ {
 public:
  inline DeckList() : DeckList(nullptr) {}
  virtual ~DeckList();

  DeckList(const DeckList& from);
  DeckList(DeckList&& from) noexcept
    : DeckList() {
    *this = ::std::move(from);
  }

  inline DeckList& operator=(const DeckList& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeckList& operator=(DeckList&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeckList& default_instance();

  static inline const DeckList* internal_default_instance() {
    return reinterpret_cast<const DeckList*>(
               &_DeckList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(DeckList& a, DeckList& b) {
    a.Swap(&b);
  }
  inline void Swap(DeckList* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeckList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeckList* New() const final {
    return CreateMaybeMessage<DeckList>(nullptr);
  }

  DeckList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeckList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeckList& from);
  void MergeFrom(const DeckList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeckList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IvionOnline.DeckList";
  }
  protected:
  explicit DeckList(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_GameInfo_2eproto);
    return ::descriptor_table_GameInfo_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCardsFieldNumber = 3,
  };
  // repeated .IvionOnline.CardInfo Cards = 3;
  int cards_size() const;
  private:
  int _internal_cards_size() const;
  public:
  void clear_cards();
  ::IvionOnline::CardInfo* mutable_cards(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IvionOnline::CardInfo >*
      mutable_cards();
  private:
  const ::IvionOnline::CardInfo& _internal_cards(int index) const;
  ::IvionOnline::CardInfo* _internal_add_cards();
  public:
  const ::IvionOnline::CardInfo& cards(int index) const;
  ::IvionOnline::CardInfo* add_cards();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IvionOnline::CardInfo >&
      cards() const;

  // @@protoc_insertion_point(class_scope:IvionOnline.DeckList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IvionOnline::CardInfo > cards_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_GameInfo_2eproto;
};
// -------------------------------------------------------------------

class PlayerInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IvionOnline.PlayerInfo) */ {
 public:
  inline PlayerInfo() : PlayerInfo(nullptr) {}
  virtual ~PlayerInfo();

  PlayerInfo(const PlayerInfo& from);
  PlayerInfo(PlayerInfo&& from) noexcept
    : PlayerInfo() {
    *this = ::std::move(from);
  }

  inline PlayerInfo& operator=(const PlayerInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlayerInfo& operator=(PlayerInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PlayerInfo& default_instance();

  static inline const PlayerInfo* internal_default_instance() {
    return reinterpret_cast<const PlayerInfo*>(
               &_PlayerInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(PlayerInfo& a, PlayerInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(PlayerInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PlayerInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PlayerInfo* New() const final {
    return CreateMaybeMessage<PlayerInfo>(nullptr);
  }

  PlayerInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PlayerInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PlayerInfo& from);
  void MergeFrom(const PlayerInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlayerInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IvionOnline.PlayerInfo";
  }
  protected:
  explicit PlayerInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_GameInfo_2eproto);
    return ::descriptor_table_GameInfo_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUIDFieldNumber = 1,
    kDisplayNameFieldNumber = 2,
    kDeckFieldNumber = 3,
  };
  // string UID = 1;
  void clear_uid();
  const std::string& uid() const;
  void set_uid(const std::string& value);
  void set_uid(std::string&& value);
  void set_uid(const char* value);
  void set_uid(const char* value, size_t size);
  std::string* mutable_uid();
  std::string* release_uid();
  void set_allocated_uid(std::string* uid);
  private:
  const std::string& _internal_uid() const;
  void _internal_set_uid(const std::string& value);
  std::string* _internal_mutable_uid();
  public:

  // string DisplayName = 2;
  void clear_displayname();
  const std::string& displayname() const;
  void set_displayname(const std::string& value);
  void set_displayname(std::string&& value);
  void set_displayname(const char* value);
  void set_displayname(const char* value, size_t size);
  std::string* mutable_displayname();
  std::string* release_displayname();
  void set_allocated_displayname(std::string* displayname);
  private:
  const std::string& _internal_displayname() const;
  void _internal_set_displayname(const std::string& value);
  std::string* _internal_mutable_displayname();
  public:

  // .IvionOnline.DeckList Deck = 3;
  bool has_deck() const;
  private:
  bool _internal_has_deck() const;
  public:
  void clear_deck();
  const ::IvionOnline::DeckList& deck() const;
  ::IvionOnline::DeckList* release_deck();
  ::IvionOnline::DeckList* mutable_deck();
  void set_allocated_deck(::IvionOnline::DeckList* deck);
  private:
  const ::IvionOnline::DeckList& _internal_deck() const;
  ::IvionOnline::DeckList* _internal_mutable_deck();
  public:
  void unsafe_arena_set_allocated_deck(
      ::IvionOnline::DeckList* deck);
  ::IvionOnline::DeckList* unsafe_arena_release_deck();

  // @@protoc_insertion_point(class_scope:IvionOnline.PlayerInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr displayname_;
  ::IvionOnline::DeckList* deck_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_GameInfo_2eproto;
};
// -------------------------------------------------------------------

class GameInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IvionOnline.GameInfo) */ {
 public:
  inline GameInfo() : GameInfo(nullptr) {}
  virtual ~GameInfo();

  GameInfo(const GameInfo& from);
  GameInfo(GameInfo&& from) noexcept
    : GameInfo() {
    *this = ::std::move(from);
  }

  inline GameInfo& operator=(const GameInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline GameInfo& operator=(GameInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GameInfo& default_instance();

  static inline const GameInfo* internal_default_instance() {
    return reinterpret_cast<const GameInfo*>(
               &_GameInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(GameInfo& a, GameInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(GameInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GameInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GameInfo* New() const final {
    return CreateMaybeMessage<GameInfo>(nullptr);
  }

  GameInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GameInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GameInfo& from);
  void MergeFrom(const GameInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GameInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IvionOnline.GameInfo";
  }
  protected:
  explicit GameInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_GameInfo_2eproto);
    return ::descriptor_table_GameInfo_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayersFieldNumber = 1,
    kMapSizeFieldNumber = 2,
  };
  // repeated .IvionOnline.PlayerInfo Players = 1;
  int players_size() const;
  private:
  int _internal_players_size() const;
  public:
  void clear_players();
  ::IvionOnline::PlayerInfo* mutable_players(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IvionOnline::PlayerInfo >*
      mutable_players();
  private:
  const ::IvionOnline::PlayerInfo& _internal_players(int index) const;
  ::IvionOnline::PlayerInfo* _internal_add_players();
  public:
  const ::IvionOnline::PlayerInfo& players(int index) const;
  ::IvionOnline::PlayerInfo* add_players();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IvionOnline::PlayerInfo >&
      players() const;

  // .IvionOnline.Vec2i MapSize = 2;
  bool has_mapsize() const;
  private:
  bool _internal_has_mapsize() const;
  public:
  void clear_mapsize();
  const ::IvionOnline::Vec2i& mapsize() const;
  ::IvionOnline::Vec2i* release_mapsize();
  ::IvionOnline::Vec2i* mutable_mapsize();
  void set_allocated_mapsize(::IvionOnline::Vec2i* mapsize);
  private:
  const ::IvionOnline::Vec2i& _internal_mapsize() const;
  ::IvionOnline::Vec2i* _internal_mutable_mapsize();
  public:
  void unsafe_arena_set_allocated_mapsize(
      ::IvionOnline::Vec2i* mapsize);
  ::IvionOnline::Vec2i* unsafe_arena_release_mapsize();

  // @@protoc_insertion_point(class_scope:IvionOnline.GameInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IvionOnline::PlayerInfo > players_;
  ::IvionOnline::Vec2i* mapsize_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_GameInfo_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CardInfo

// string Card_UID = 1;
inline void CardInfo::clear_card_uid() {
  card_uid_.ClearToEmpty();
}
inline const std::string& CardInfo::card_uid() const {
  // @@protoc_insertion_point(field_get:IvionOnline.CardInfo.Card_UID)
  return _internal_card_uid();
}
inline void CardInfo::set_card_uid(const std::string& value) {
  _internal_set_card_uid(value);
  // @@protoc_insertion_point(field_set:IvionOnline.CardInfo.Card_UID)
}
inline std::string* CardInfo::mutable_card_uid() {
  // @@protoc_insertion_point(field_mutable:IvionOnline.CardInfo.Card_UID)
  return _internal_mutable_card_uid();
}
inline const std::string& CardInfo::_internal_card_uid() const {
  return card_uid_.Get();
}
inline void CardInfo::_internal_set_card_uid(const std::string& value) {
  
  card_uid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CardInfo::set_card_uid(std::string&& value) {
  
  card_uid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:IvionOnline.CardInfo.Card_UID)
}
inline void CardInfo::set_card_uid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  card_uid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:IvionOnline.CardInfo.Card_UID)
}
inline void CardInfo::set_card_uid(const char* value,
    size_t size) {
  
  card_uid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:IvionOnline.CardInfo.Card_UID)
}
inline std::string* CardInfo::_internal_mutable_card_uid() {
  
  return card_uid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CardInfo::release_card_uid() {
  // @@protoc_insertion_point(field_release:IvionOnline.CardInfo.Card_UID)
  return card_uid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CardInfo::set_allocated_card_uid(std::string* card_uid) {
  if (card_uid != nullptr) {
    
  } else {
    
  }
  card_uid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), card_uid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:IvionOnline.CardInfo.Card_UID)
}

// int32 Card_Count = 2;
inline void CardInfo::clear_card_count() {
  card_count_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CardInfo::_internal_card_count() const {
  return card_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CardInfo::card_count() const {
  // @@protoc_insertion_point(field_get:IvionOnline.CardInfo.Card_Count)
  return _internal_card_count();
}
inline void CardInfo::_internal_set_card_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  card_count_ = value;
}
inline void CardInfo::set_card_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_card_count(value);
  // @@protoc_insertion_point(field_set:IvionOnline.CardInfo.Card_Count)
}

// -------------------------------------------------------------------

// DeckList

// repeated .IvionOnline.CardInfo Cards = 3;
inline int DeckList::_internal_cards_size() const {
  return cards_.size();
}
inline int DeckList::cards_size() const {
  return _internal_cards_size();
}
inline void DeckList::clear_cards() {
  cards_.Clear();
}
inline ::IvionOnline::CardInfo* DeckList::mutable_cards(int index) {
  // @@protoc_insertion_point(field_mutable:IvionOnline.DeckList.Cards)
  return cards_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IvionOnline::CardInfo >*
DeckList::mutable_cards() {
  // @@protoc_insertion_point(field_mutable_list:IvionOnline.DeckList.Cards)
  return &cards_;
}
inline const ::IvionOnline::CardInfo& DeckList::_internal_cards(int index) const {
  return cards_.Get(index);
}
inline const ::IvionOnline::CardInfo& DeckList::cards(int index) const {
  // @@protoc_insertion_point(field_get:IvionOnline.DeckList.Cards)
  return _internal_cards(index);
}
inline ::IvionOnline::CardInfo* DeckList::_internal_add_cards() {
  return cards_.Add();
}
inline ::IvionOnline::CardInfo* DeckList::add_cards() {
  // @@protoc_insertion_point(field_add:IvionOnline.DeckList.Cards)
  return _internal_add_cards();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IvionOnline::CardInfo >&
DeckList::cards() const {
  // @@protoc_insertion_point(field_list:IvionOnline.DeckList.Cards)
  return cards_;
}

// -------------------------------------------------------------------

// PlayerInfo

// string UID = 1;
inline void PlayerInfo::clear_uid() {
  uid_.ClearToEmpty();
}
inline const std::string& PlayerInfo::uid() const {
  // @@protoc_insertion_point(field_get:IvionOnline.PlayerInfo.UID)
  return _internal_uid();
}
inline void PlayerInfo::set_uid(const std::string& value) {
  _internal_set_uid(value);
  // @@protoc_insertion_point(field_set:IvionOnline.PlayerInfo.UID)
}
inline std::string* PlayerInfo::mutable_uid() {
  // @@protoc_insertion_point(field_mutable:IvionOnline.PlayerInfo.UID)
  return _internal_mutable_uid();
}
inline const std::string& PlayerInfo::_internal_uid() const {
  return uid_.Get();
}
inline void PlayerInfo::_internal_set_uid(const std::string& value) {
  
  uid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void PlayerInfo::set_uid(std::string&& value) {
  
  uid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:IvionOnline.PlayerInfo.UID)
}
inline void PlayerInfo::set_uid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  uid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:IvionOnline.PlayerInfo.UID)
}
inline void PlayerInfo::set_uid(const char* value,
    size_t size) {
  
  uid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:IvionOnline.PlayerInfo.UID)
}
inline std::string* PlayerInfo::_internal_mutable_uid() {
  
  return uid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* PlayerInfo::release_uid() {
  // @@protoc_insertion_point(field_release:IvionOnline.PlayerInfo.UID)
  return uid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PlayerInfo::set_allocated_uid(std::string* uid) {
  if (uid != nullptr) {
    
  } else {
    
  }
  uid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), uid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:IvionOnline.PlayerInfo.UID)
}

// string DisplayName = 2;
inline void PlayerInfo::clear_displayname() {
  displayname_.ClearToEmpty();
}
inline const std::string& PlayerInfo::displayname() const {
  // @@protoc_insertion_point(field_get:IvionOnline.PlayerInfo.DisplayName)
  return _internal_displayname();
}
inline void PlayerInfo::set_displayname(const std::string& value) {
  _internal_set_displayname(value);
  // @@protoc_insertion_point(field_set:IvionOnline.PlayerInfo.DisplayName)
}
inline std::string* PlayerInfo::mutable_displayname() {
  // @@protoc_insertion_point(field_mutable:IvionOnline.PlayerInfo.DisplayName)
  return _internal_mutable_displayname();
}
inline const std::string& PlayerInfo::_internal_displayname() const {
  return displayname_.Get();
}
inline void PlayerInfo::_internal_set_displayname(const std::string& value) {
  
  displayname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void PlayerInfo::set_displayname(std::string&& value) {
  
  displayname_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:IvionOnline.PlayerInfo.DisplayName)
}
inline void PlayerInfo::set_displayname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  displayname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:IvionOnline.PlayerInfo.DisplayName)
}
inline void PlayerInfo::set_displayname(const char* value,
    size_t size) {
  
  displayname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:IvionOnline.PlayerInfo.DisplayName)
}
inline std::string* PlayerInfo::_internal_mutable_displayname() {
  
  return displayname_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* PlayerInfo::release_displayname() {
  // @@protoc_insertion_point(field_release:IvionOnline.PlayerInfo.DisplayName)
  return displayname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PlayerInfo::set_allocated_displayname(std::string* displayname) {
  if (displayname != nullptr) {
    
  } else {
    
  }
  displayname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), displayname,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:IvionOnline.PlayerInfo.DisplayName)
}

// .IvionOnline.DeckList Deck = 3;
inline bool PlayerInfo::_internal_has_deck() const {
  return this != internal_default_instance() && deck_ != nullptr;
}
inline bool PlayerInfo::has_deck() const {
  return _internal_has_deck();
}
inline void PlayerInfo::clear_deck() {
  if (GetArena() == nullptr && deck_ != nullptr) {
    delete deck_;
  }
  deck_ = nullptr;
}
inline const ::IvionOnline::DeckList& PlayerInfo::_internal_deck() const {
  const ::IvionOnline::DeckList* p = deck_;
  return p != nullptr ? *p : reinterpret_cast<const ::IvionOnline::DeckList&>(
      ::IvionOnline::_DeckList_default_instance_);
}
inline const ::IvionOnline::DeckList& PlayerInfo::deck() const {
  // @@protoc_insertion_point(field_get:IvionOnline.PlayerInfo.Deck)
  return _internal_deck();
}
inline void PlayerInfo::unsafe_arena_set_allocated_deck(
    ::IvionOnline::DeckList* deck) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(deck_);
  }
  deck_ = deck;
  if (deck) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:IvionOnline.PlayerInfo.Deck)
}
inline ::IvionOnline::DeckList* PlayerInfo::release_deck() {
  
  ::IvionOnline::DeckList* temp = deck_;
  deck_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::IvionOnline::DeckList* PlayerInfo::unsafe_arena_release_deck() {
  // @@protoc_insertion_point(field_release:IvionOnline.PlayerInfo.Deck)
  
  ::IvionOnline::DeckList* temp = deck_;
  deck_ = nullptr;
  return temp;
}
inline ::IvionOnline::DeckList* PlayerInfo::_internal_mutable_deck() {
  
  if (deck_ == nullptr) {
    auto* p = CreateMaybeMessage<::IvionOnline::DeckList>(GetArena());
    deck_ = p;
  }
  return deck_;
}
inline ::IvionOnline::DeckList* PlayerInfo::mutable_deck() {
  // @@protoc_insertion_point(field_mutable:IvionOnline.PlayerInfo.Deck)
  return _internal_mutable_deck();
}
inline void PlayerInfo::set_allocated_deck(::IvionOnline::DeckList* deck) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete deck_;
  }
  if (deck) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(deck);
    if (message_arena != submessage_arena) {
      deck = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, deck, submessage_arena);
    }
    
  } else {
    
  }
  deck_ = deck;
  // @@protoc_insertion_point(field_set_allocated:IvionOnline.PlayerInfo.Deck)
}

// -------------------------------------------------------------------

// GameInfo

// repeated .IvionOnline.PlayerInfo Players = 1;
inline int GameInfo::_internal_players_size() const {
  return players_.size();
}
inline int GameInfo::players_size() const {
  return _internal_players_size();
}
inline void GameInfo::clear_players() {
  players_.Clear();
}
inline ::IvionOnline::PlayerInfo* GameInfo::mutable_players(int index) {
  // @@protoc_insertion_point(field_mutable:IvionOnline.GameInfo.Players)
  return players_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IvionOnline::PlayerInfo >*
GameInfo::mutable_players() {
  // @@protoc_insertion_point(field_mutable_list:IvionOnline.GameInfo.Players)
  return &players_;
}
inline const ::IvionOnline::PlayerInfo& GameInfo::_internal_players(int index) const {
  return players_.Get(index);
}
inline const ::IvionOnline::PlayerInfo& GameInfo::players(int index) const {
  // @@protoc_insertion_point(field_get:IvionOnline.GameInfo.Players)
  return _internal_players(index);
}
inline ::IvionOnline::PlayerInfo* GameInfo::_internal_add_players() {
  return players_.Add();
}
inline ::IvionOnline::PlayerInfo* GameInfo::add_players() {
  // @@protoc_insertion_point(field_add:IvionOnline.GameInfo.Players)
  return _internal_add_players();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IvionOnline::PlayerInfo >&
GameInfo::players() const {
  // @@protoc_insertion_point(field_list:IvionOnline.GameInfo.Players)
  return players_;
}

// .IvionOnline.Vec2i MapSize = 2;
inline bool GameInfo::_internal_has_mapsize() const {
  return this != internal_default_instance() && mapsize_ != nullptr;
}
inline bool GameInfo::has_mapsize() const {
  return _internal_has_mapsize();
}
inline const ::IvionOnline::Vec2i& GameInfo::_internal_mapsize() const {
  const ::IvionOnline::Vec2i* p = mapsize_;
  return p != nullptr ? *p : reinterpret_cast<const ::IvionOnline::Vec2i&>(
      ::IvionOnline::_Vec2i_default_instance_);
}
inline const ::IvionOnline::Vec2i& GameInfo::mapsize() const {
  // @@protoc_insertion_point(field_get:IvionOnline.GameInfo.MapSize)
  return _internal_mapsize();
}
inline void GameInfo::unsafe_arena_set_allocated_mapsize(
    ::IvionOnline::Vec2i* mapsize) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mapsize_);
  }
  mapsize_ = mapsize;
  if (mapsize) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:IvionOnline.GameInfo.MapSize)
}
inline ::IvionOnline::Vec2i* GameInfo::release_mapsize() {
  
  ::IvionOnline::Vec2i* temp = mapsize_;
  mapsize_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::IvionOnline::Vec2i* GameInfo::unsafe_arena_release_mapsize() {
  // @@protoc_insertion_point(field_release:IvionOnline.GameInfo.MapSize)
  
  ::IvionOnline::Vec2i* temp = mapsize_;
  mapsize_ = nullptr;
  return temp;
}
inline ::IvionOnline::Vec2i* GameInfo::_internal_mutable_mapsize() {
  
  if (mapsize_ == nullptr) {
    auto* p = CreateMaybeMessage<::IvionOnline::Vec2i>(GetArena());
    mapsize_ = p;
  }
  return mapsize_;
}
inline ::IvionOnline::Vec2i* GameInfo::mutable_mapsize() {
  // @@protoc_insertion_point(field_mutable:IvionOnline.GameInfo.MapSize)
  return _internal_mutable_mapsize();
}
inline void GameInfo::set_allocated_mapsize(::IvionOnline::Vec2i* mapsize) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(mapsize_);
  }
  if (mapsize) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mapsize)->GetArena();
    if (message_arena != submessage_arena) {
      mapsize = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mapsize, submessage_arena);
    }
    
  } else {
    
  }
  mapsize_ = mapsize;
  // @@protoc_insertion_point(field_set_allocated:IvionOnline.GameInfo.MapSize)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace IvionOnline

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_GameInfo_2eproto
