// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: GameInfo.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_GameInfo_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_GameInfo_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include <GRPC/Types.pb.h>
#include <GRPC/Effects.pb.h>
#include <GRPC/GameState.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_GameInfo_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_GameInfo_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[7]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_GameInfo_2eproto;
namespace NetworkIO {
class AIAgent;
class AIAgentDefaultTypeInternal;
extern AIAgentDefaultTypeInternal _AIAgent_default_instance_;
class CardMetaData;
class CardMetaDataDefaultTypeInternal;
extern CardMetaDataDefaultTypeInternal _CardMetaData_default_instance_;
class DeckList;
class DeckListDefaultTypeInternal;
extern DeckListDefaultTypeInternal _DeckList_default_instance_;
class GameInfo;
class GameInfoDefaultTypeInternal;
extern GameInfoDefaultTypeInternal _GameInfo_default_instance_;
class PlayerAgent;
class PlayerAgentDefaultTypeInternal;
extern PlayerAgentDefaultTypeInternal _PlayerAgent_default_instance_;
class PlayerInfo;
class PlayerInfoDefaultTypeInternal;
extern PlayerInfoDefaultTypeInternal _PlayerInfo_default_instance_;
class RandomAgent;
class RandomAgentDefaultTypeInternal;
extern RandomAgentDefaultTypeInternal _RandomAgent_default_instance_;
}  // namespace NetworkIO
PROTOBUF_NAMESPACE_OPEN
template<> ::NetworkIO::AIAgent* Arena::CreateMaybeMessage<::NetworkIO::AIAgent>(Arena*);
template<> ::NetworkIO::CardMetaData* Arena::CreateMaybeMessage<::NetworkIO::CardMetaData>(Arena*);
template<> ::NetworkIO::DeckList* Arena::CreateMaybeMessage<::NetworkIO::DeckList>(Arena*);
template<> ::NetworkIO::GameInfo* Arena::CreateMaybeMessage<::NetworkIO::GameInfo>(Arena*);
template<> ::NetworkIO::PlayerAgent* Arena::CreateMaybeMessage<::NetworkIO::PlayerAgent>(Arena*);
template<> ::NetworkIO::PlayerInfo* Arena::CreateMaybeMessage<::NetworkIO::PlayerInfo>(Arena*);
template<> ::NetworkIO::RandomAgent* Arena::CreateMaybeMessage<::NetworkIO::RandomAgent>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace NetworkIO {

// ===================================================================

class CardMetaData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:NetworkIO.CardMetaData) */ {
 public:
  inline CardMetaData() : CardMetaData(nullptr) {}
  virtual ~CardMetaData();

  CardMetaData(const CardMetaData& from);
  CardMetaData(CardMetaData&& from) noexcept
    : CardMetaData() {
    *this = ::std::move(from);
  }

  inline CardMetaData& operator=(const CardMetaData& from) {
    CopyFrom(from);
    return *this;
  }
  inline CardMetaData& operator=(CardMetaData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CardMetaData& default_instance();

  static inline const CardMetaData* internal_default_instance() {
    return reinterpret_cast<const CardMetaData*>(
               &_CardMetaData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CardMetaData& a, CardMetaData& b) {
    a.Swap(&b);
  }
  inline void Swap(CardMetaData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CardMetaData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CardMetaData* New() const final {
    return CreateMaybeMessage<CardMetaData>(nullptr);
  }

  CardMetaData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CardMetaData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CardMetaData& from);
  void MergeFrom(const CardMetaData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CardMetaData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "NetworkIO.CardMetaData";
  }
  protected:
  explicit CardMetaData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_GameInfo_2eproto);
    return ::descriptor_table_GameInfo_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kColorsFieldNumber = 5,
    kNameFieldNumber = 1,
    kArchetypeFieldNumber = 2,
    kOmniPresentEffectFieldNumber = 7,
    kPassiveEffectFieldNumber = 8,
    kFeatEffectFieldNumber = 9,
    kPlayEffectFieldNumber = 10,
    kResolveEffectFieldNumber = 11,
    kUltimateFieldNumber = 3,
    kFeatFieldNumber = 4,
    kCountFieldNumber = 6,
  };
  // repeated .GameState.Card.Color Colors = 5;
  int colors_size() const;
  private:
  int _internal_colors_size() const;
  public:
  void clear_colors();
  private:
  ::GameState::Card_Color _internal_colors(int index) const;
  void _internal_add_colors(::GameState::Card_Color value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* _internal_mutable_colors();
  public:
  ::GameState::Card_Color colors(int index) const;
  void set_colors(int index, ::GameState::Card_Color value);
  void add_colors(::GameState::Card_Color value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& colors() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_colors();

  // string Name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string Archetype = 2;
  void clear_archetype();
  const std::string& archetype() const;
  void set_archetype(const std::string& value);
  void set_archetype(std::string&& value);
  void set_archetype(const char* value);
  void set_archetype(const char* value, size_t size);
  std::string* mutable_archetype();
  std::string* release_archetype();
  void set_allocated_archetype(std::string* archetype);
  private:
  const std::string& _internal_archetype() const;
  void _internal_set_archetype(const std::string& value);
  std::string* _internal_mutable_archetype();
  public:

  // .Effects.CardEffect OmniPresentEffect = 7;
  bool has_omnipresenteffect() const;
  private:
  bool _internal_has_omnipresenteffect() const;
  public:
  void clear_omnipresenteffect();
  const ::Effects::CardEffect& omnipresenteffect() const;
  ::Effects::CardEffect* release_omnipresenteffect();
  ::Effects::CardEffect* mutable_omnipresenteffect();
  void set_allocated_omnipresenteffect(::Effects::CardEffect* omnipresenteffect);
  private:
  const ::Effects::CardEffect& _internal_omnipresenteffect() const;
  ::Effects::CardEffect* _internal_mutable_omnipresenteffect();
  public:
  void unsafe_arena_set_allocated_omnipresenteffect(
      ::Effects::CardEffect* omnipresenteffect);
  ::Effects::CardEffect* unsafe_arena_release_omnipresenteffect();

  // .Effects.CardEffect PassiveEffect = 8;
  bool has_passiveeffect() const;
  private:
  bool _internal_has_passiveeffect() const;
  public:
  void clear_passiveeffect();
  const ::Effects::CardEffect& passiveeffect() const;
  ::Effects::CardEffect* release_passiveeffect();
  ::Effects::CardEffect* mutable_passiveeffect();
  void set_allocated_passiveeffect(::Effects::CardEffect* passiveeffect);
  private:
  const ::Effects::CardEffect& _internal_passiveeffect() const;
  ::Effects::CardEffect* _internal_mutable_passiveeffect();
  public:
  void unsafe_arena_set_allocated_passiveeffect(
      ::Effects::CardEffect* passiveeffect);
  ::Effects::CardEffect* unsafe_arena_release_passiveeffect();

  // .Effects.CardEffect FeatEffect = 9;
  bool has_feateffect() const;
  private:
  bool _internal_has_feateffect() const;
  public:
  void clear_feateffect();
  const ::Effects::CardEffect& feateffect() const;
  ::Effects::CardEffect* release_feateffect();
  ::Effects::CardEffect* mutable_feateffect();
  void set_allocated_feateffect(::Effects::CardEffect* feateffect);
  private:
  const ::Effects::CardEffect& _internal_feateffect() const;
  ::Effects::CardEffect* _internal_mutable_feateffect();
  public:
  void unsafe_arena_set_allocated_feateffect(
      ::Effects::CardEffect* feateffect);
  ::Effects::CardEffect* unsafe_arena_release_feateffect();

  // .Effects.CardEffect PlayEffect = 10;
  bool has_playeffect() const;
  private:
  bool _internal_has_playeffect() const;
  public:
  void clear_playeffect();
  const ::Effects::CardEffect& playeffect() const;
  ::Effects::CardEffect* release_playeffect();
  ::Effects::CardEffect* mutable_playeffect();
  void set_allocated_playeffect(::Effects::CardEffect* playeffect);
  private:
  const ::Effects::CardEffect& _internal_playeffect() const;
  ::Effects::CardEffect* _internal_mutable_playeffect();
  public:
  void unsafe_arena_set_allocated_playeffect(
      ::Effects::CardEffect* playeffect);
  ::Effects::CardEffect* unsafe_arena_release_playeffect();

  // .Effects.CardEffect ResolveEffect = 11;
  bool has_resolveeffect() const;
  private:
  bool _internal_has_resolveeffect() const;
  public:
  void clear_resolveeffect();
  const ::Effects::CardEffect& resolveeffect() const;
  ::Effects::CardEffect* release_resolveeffect();
  ::Effects::CardEffect* mutable_resolveeffect();
  void set_allocated_resolveeffect(::Effects::CardEffect* resolveeffect);
  private:
  const ::Effects::CardEffect& _internal_resolveeffect() const;
  ::Effects::CardEffect* _internal_mutable_resolveeffect();
  public:
  void unsafe_arena_set_allocated_resolveeffect(
      ::Effects::CardEffect* resolveeffect);
  ::Effects::CardEffect* unsafe_arena_release_resolveeffect();

  // bool Ultimate = 3;
  void clear_ultimate();
  bool ultimate() const;
  void set_ultimate(bool value);
  private:
  bool _internal_ultimate() const;
  void _internal_set_ultimate(bool value);
  public:

  // bool Feat = 4;
  void clear_feat();
  bool feat() const;
  void set_feat(bool value);
  private:
  bool _internal_feat() const;
  void _internal_set_feat(bool value);
  public:

  // int32 Count = 6;
  void clear_count();
  ::PROTOBUF_NAMESPACE_ID::int32 count() const;
  void set_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_count() const;
  void _internal_set_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:NetworkIO.CardMetaData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> colors_;
  mutable std::atomic<int> _colors_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr archetype_;
  ::Effects::CardEffect* omnipresenteffect_;
  ::Effects::CardEffect* passiveeffect_;
  ::Effects::CardEffect* feateffect_;
  ::Effects::CardEffect* playeffect_;
  ::Effects::CardEffect* resolveeffect_;
  bool ultimate_;
  bool feat_;
  ::PROTOBUF_NAMESPACE_ID::int32 count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_GameInfo_2eproto;
};
// -------------------------------------------------------------------

class DeckList PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:NetworkIO.DeckList) */ {
 public:
  inline DeckList() : DeckList(nullptr) {}
  virtual ~DeckList();

  DeckList(const DeckList& from);
  DeckList(DeckList&& from) noexcept
    : DeckList() {
    *this = ::std::move(from);
  }

  inline DeckList& operator=(const DeckList& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeckList& operator=(DeckList&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeckList& default_instance();

  static inline const DeckList* internal_default_instance() {
    return reinterpret_cast<const DeckList*>(
               &_DeckList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(DeckList& a, DeckList& b) {
    a.Swap(&b);
  }
  inline void Swap(DeckList* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeckList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeckList* New() const final {
    return CreateMaybeMessage<DeckList>(nullptr);
  }

  DeckList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeckList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeckList& from);
  void MergeFrom(const DeckList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeckList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "NetworkIO.DeckList";
  }
  protected:
  explicit DeckList(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_GameInfo_2eproto);
    return ::descriptor_table_GameInfo_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDeckFieldNumber = 3,
  };
  // repeated .NetworkIO.CardMetaData Deck = 3;
  int deck_size() const;
  private:
  int _internal_deck_size() const;
  public:
  void clear_deck();
  ::NetworkIO::CardMetaData* mutable_deck(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NetworkIO::CardMetaData >*
      mutable_deck();
  private:
  const ::NetworkIO::CardMetaData& _internal_deck(int index) const;
  ::NetworkIO::CardMetaData* _internal_add_deck();
  public:
  const ::NetworkIO::CardMetaData& deck(int index) const;
  ::NetworkIO::CardMetaData* add_deck();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NetworkIO::CardMetaData >&
      deck() const;

  // @@protoc_insertion_point(class_scope:NetworkIO.DeckList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NetworkIO::CardMetaData > deck_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_GameInfo_2eproto;
};
// -------------------------------------------------------------------

class RandomAgent PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:NetworkIO.RandomAgent) */ {
 public:
  inline RandomAgent() : RandomAgent(nullptr) {}
  virtual ~RandomAgent();

  RandomAgent(const RandomAgent& from);
  RandomAgent(RandomAgent&& from) noexcept
    : RandomAgent() {
    *this = ::std::move(from);
  }

  inline RandomAgent& operator=(const RandomAgent& from) {
    CopyFrom(from);
    return *this;
  }
  inline RandomAgent& operator=(RandomAgent&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RandomAgent& default_instance();

  static inline const RandomAgent* internal_default_instance() {
    return reinterpret_cast<const RandomAgent*>(
               &_RandomAgent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(RandomAgent& a, RandomAgent& b) {
    a.Swap(&b);
  }
  inline void Swap(RandomAgent* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RandomAgent* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RandomAgent* New() const final {
    return CreateMaybeMessage<RandomAgent>(nullptr);
  }

  RandomAgent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RandomAgent>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RandomAgent& from);
  void MergeFrom(const RandomAgent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RandomAgent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "NetworkIO.RandomAgent";
  }
  protected:
  explicit RandomAgent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_GameInfo_2eproto);
    return ::descriptor_table_GameInfo_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:NetworkIO.RandomAgent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_GameInfo_2eproto;
};
// -------------------------------------------------------------------

class AIAgent PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:NetworkIO.AIAgent) */ {
 public:
  inline AIAgent() : AIAgent(nullptr) {}
  virtual ~AIAgent();

  AIAgent(const AIAgent& from);
  AIAgent(AIAgent&& from) noexcept
    : AIAgent() {
    *this = ::std::move(from);
  }

  inline AIAgent& operator=(const AIAgent& from) {
    CopyFrom(from);
    return *this;
  }
  inline AIAgent& operator=(AIAgent&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AIAgent& default_instance();

  static inline const AIAgent* internal_default_instance() {
    return reinterpret_cast<const AIAgent*>(
               &_AIAgent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(AIAgent& a, AIAgent& b) {
    a.Swap(&b);
  }
  inline void Swap(AIAgent* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AIAgent* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AIAgent* New() const final {
    return CreateMaybeMessage<AIAgent>(nullptr);
  }

  AIAgent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AIAgent>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AIAgent& from);
  void MergeFrom(const AIAgent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AIAgent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "NetworkIO.AIAgent";
  }
  protected:
  explicit AIAgent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_GameInfo_2eproto);
    return ::descriptor_table_GameInfo_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:NetworkIO.AIAgent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_GameInfo_2eproto;
};
// -------------------------------------------------------------------

class PlayerAgent PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:NetworkIO.PlayerAgent) */ {
 public:
  inline PlayerAgent() : PlayerAgent(nullptr) {}
  virtual ~PlayerAgent();

  PlayerAgent(const PlayerAgent& from);
  PlayerAgent(PlayerAgent&& from) noexcept
    : PlayerAgent() {
    *this = ::std::move(from);
  }

  inline PlayerAgent& operator=(const PlayerAgent& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlayerAgent& operator=(PlayerAgent&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PlayerAgent& default_instance();

  static inline const PlayerAgent* internal_default_instance() {
    return reinterpret_cast<const PlayerAgent*>(
               &_PlayerAgent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(PlayerAgent& a, PlayerAgent& b) {
    a.Swap(&b);
  }
  inline void Swap(PlayerAgent* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PlayerAgent* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PlayerAgent* New() const final {
    return CreateMaybeMessage<PlayerAgent>(nullptr);
  }

  PlayerAgent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PlayerAgent>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PlayerAgent& from);
  void MergeFrom(const PlayerAgent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlayerAgent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "NetworkIO.PlayerAgent";
  }
  protected:
  explicit PlayerAgent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_GameInfo_2eproto);
    return ::descriptor_table_GameInfo_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerUIDFieldNumber = 1,
  };
  // int32 PlayerUID = 1;
  void clear_playeruid();
  ::PROTOBUF_NAMESPACE_ID::int32 playeruid() const;
  void set_playeruid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_playeruid() const;
  void _internal_set_playeruid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:NetworkIO.PlayerAgent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 playeruid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_GameInfo_2eproto;
};
// -------------------------------------------------------------------

class PlayerInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:NetworkIO.PlayerInfo) */ {
 public:
  inline PlayerInfo() : PlayerInfo(nullptr) {}
  virtual ~PlayerInfo();

  PlayerInfo(const PlayerInfo& from);
  PlayerInfo(PlayerInfo&& from) noexcept
    : PlayerInfo() {
    *this = ::std::move(from);
  }

  inline PlayerInfo& operator=(const PlayerInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlayerInfo& operator=(PlayerInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PlayerInfo& default_instance();

  enum AgentInfoCase {
    kAIAgent = 5,
    kRandomAgent = 6,
    kPlayerAgent = 7,
    AGENTINFO_NOT_SET = 0,
  };

  static inline const PlayerInfo* internal_default_instance() {
    return reinterpret_cast<const PlayerInfo*>(
               &_PlayerInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(PlayerInfo& a, PlayerInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(PlayerInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PlayerInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PlayerInfo* New() const final {
    return CreateMaybeMessage<PlayerInfo>(nullptr);
  }

  PlayerInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PlayerInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PlayerInfo& from);
  void MergeFrom(const PlayerInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlayerInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "NetworkIO.PlayerInfo";
  }
  protected:
  explicit PlayerInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_GameInfo_2eproto);
    return ::descriptor_table_GameInfo_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUsernameFieldNumber = 1,
    kUIDFieldNumber = 2,
    kDeckFieldNumber = 3,
    kStartingPositionFieldNumber = 4,
    kAIAgentFieldNumber = 5,
    kRandomAgentFieldNumber = 6,
    kPlayerAgentFieldNumber = 7,
  };
  // string Username = 1;
  void clear_username();
  const std::string& username() const;
  void set_username(const std::string& value);
  void set_username(std::string&& value);
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  std::string* mutable_username();
  std::string* release_username();
  void set_allocated_username(std::string* username);
  private:
  const std::string& _internal_username() const;
  void _internal_set_username(const std::string& value);
  std::string* _internal_mutable_username();
  public:

  // string UID = 2;
  void clear_uid();
  const std::string& uid() const;
  void set_uid(const std::string& value);
  void set_uid(std::string&& value);
  void set_uid(const char* value);
  void set_uid(const char* value, size_t size);
  std::string* mutable_uid();
  std::string* release_uid();
  void set_allocated_uid(std::string* uid);
  private:
  const std::string& _internal_uid() const;
  void _internal_set_uid(const std::string& value);
  std::string* _internal_mutable_uid();
  public:

  // .NetworkIO.DeckList Deck = 3;
  bool has_deck() const;
  private:
  bool _internal_has_deck() const;
  public:
  void clear_deck();
  const ::NetworkIO::DeckList& deck() const;
  ::NetworkIO::DeckList* release_deck();
  ::NetworkIO::DeckList* mutable_deck();
  void set_allocated_deck(::NetworkIO::DeckList* deck);
  private:
  const ::NetworkIO::DeckList& _internal_deck() const;
  ::NetworkIO::DeckList* _internal_mutable_deck();
  public:
  void unsafe_arena_set_allocated_deck(
      ::NetworkIO::DeckList* deck);
  ::NetworkIO::DeckList* unsafe_arena_release_deck();

  // .Types.Vec2i StartingPosition = 4;
  bool has_startingposition() const;
  private:
  bool _internal_has_startingposition() const;
  public:
  void clear_startingposition();
  const ::Types::Vec2i& startingposition() const;
  ::Types::Vec2i* release_startingposition();
  ::Types::Vec2i* mutable_startingposition();
  void set_allocated_startingposition(::Types::Vec2i* startingposition);
  private:
  const ::Types::Vec2i& _internal_startingposition() const;
  ::Types::Vec2i* _internal_mutable_startingposition();
  public:
  void unsafe_arena_set_allocated_startingposition(
      ::Types::Vec2i* startingposition);
  ::Types::Vec2i* unsafe_arena_release_startingposition();

  // .NetworkIO.AIAgent AIAgent = 5;
  bool has_aiagent() const;
  private:
  bool _internal_has_aiagent() const;
  public:
  void clear_aiagent();
  const ::NetworkIO::AIAgent& aiagent() const;
  ::NetworkIO::AIAgent* release_aiagent();
  ::NetworkIO::AIAgent* mutable_aiagent();
  void set_allocated_aiagent(::NetworkIO::AIAgent* aiagent);
  private:
  const ::NetworkIO::AIAgent& _internal_aiagent() const;
  ::NetworkIO::AIAgent* _internal_mutable_aiagent();
  public:
  void unsafe_arena_set_allocated_aiagent(
      ::NetworkIO::AIAgent* aiagent);
  ::NetworkIO::AIAgent* unsafe_arena_release_aiagent();

  // .NetworkIO.RandomAgent RandomAgent = 6;
  bool has_randomagent() const;
  private:
  bool _internal_has_randomagent() const;
  public:
  void clear_randomagent();
  const ::NetworkIO::RandomAgent& randomagent() const;
  ::NetworkIO::RandomAgent* release_randomagent();
  ::NetworkIO::RandomAgent* mutable_randomagent();
  void set_allocated_randomagent(::NetworkIO::RandomAgent* randomagent);
  private:
  const ::NetworkIO::RandomAgent& _internal_randomagent() const;
  ::NetworkIO::RandomAgent* _internal_mutable_randomagent();
  public:
  void unsafe_arena_set_allocated_randomagent(
      ::NetworkIO::RandomAgent* randomagent);
  ::NetworkIO::RandomAgent* unsafe_arena_release_randomagent();

  // .NetworkIO.PlayerAgent PlayerAgent = 7;
  bool has_playeragent() const;
  private:
  bool _internal_has_playeragent() const;
  public:
  void clear_playeragent();
  const ::NetworkIO::PlayerAgent& playeragent() const;
  ::NetworkIO::PlayerAgent* release_playeragent();
  ::NetworkIO::PlayerAgent* mutable_playeragent();
  void set_allocated_playeragent(::NetworkIO::PlayerAgent* playeragent);
  private:
  const ::NetworkIO::PlayerAgent& _internal_playeragent() const;
  ::NetworkIO::PlayerAgent* _internal_mutable_playeragent();
  public:
  void unsafe_arena_set_allocated_playeragent(
      ::NetworkIO::PlayerAgent* playeragent);
  ::NetworkIO::PlayerAgent* unsafe_arena_release_playeragent();

  void clear_AgentInfo();
  AgentInfoCase AgentInfo_case() const;
  // @@protoc_insertion_point(class_scope:NetworkIO.PlayerInfo)
 private:
  class _Internal;
  void set_has_aiagent();
  void set_has_randomagent();
  void set_has_playeragent();

  inline bool has_AgentInfo() const;
  inline void clear_has_AgentInfo();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr username_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uid_;
  ::NetworkIO::DeckList* deck_;
  ::Types::Vec2i* startingposition_;
  union AgentInfoUnion {
    AgentInfoUnion() {}
    ::NetworkIO::AIAgent* aiagent_;
    ::NetworkIO::RandomAgent* randomagent_;
    ::NetworkIO::PlayerAgent* playeragent_;
  } AgentInfo_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_GameInfo_2eproto;
};
// -------------------------------------------------------------------

class GameInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:NetworkIO.GameInfo) */ {
 public:
  inline GameInfo() : GameInfo(nullptr) {}
  virtual ~GameInfo();

  GameInfo(const GameInfo& from);
  GameInfo(GameInfo&& from) noexcept
    : GameInfo() {
    *this = ::std::move(from);
  }

  inline GameInfo& operator=(const GameInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline GameInfo& operator=(GameInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GameInfo& default_instance();

  static inline const GameInfo* internal_default_instance() {
    return reinterpret_cast<const GameInfo*>(
               &_GameInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(GameInfo& a, GameInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(GameInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GameInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GameInfo* New() const final {
    return CreateMaybeMessage<GameInfo>(nullptr);
  }

  GameInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GameInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GameInfo& from);
  void MergeFrom(const GameInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GameInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "NetworkIO.GameInfo";
  }
  protected:
  explicit GameInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_GameInfo_2eproto);
    return ::descriptor_table_GameInfo_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayersFieldNumber = 1,
    kMapSizeFieldNumber = 2,
  };
  // repeated .NetworkIO.PlayerInfo Players = 1;
  int players_size() const;
  private:
  int _internal_players_size() const;
  public:
  void clear_players();
  ::NetworkIO::PlayerInfo* mutable_players(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NetworkIO::PlayerInfo >*
      mutable_players();
  private:
  const ::NetworkIO::PlayerInfo& _internal_players(int index) const;
  ::NetworkIO::PlayerInfo* _internal_add_players();
  public:
  const ::NetworkIO::PlayerInfo& players(int index) const;
  ::NetworkIO::PlayerInfo* add_players();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NetworkIO::PlayerInfo >&
      players() const;

  // .Types.Vec2i MapSize = 2;
  bool has_mapsize() const;
  private:
  bool _internal_has_mapsize() const;
  public:
  void clear_mapsize();
  const ::Types::Vec2i& mapsize() const;
  ::Types::Vec2i* release_mapsize();
  ::Types::Vec2i* mutable_mapsize();
  void set_allocated_mapsize(::Types::Vec2i* mapsize);
  private:
  const ::Types::Vec2i& _internal_mapsize() const;
  ::Types::Vec2i* _internal_mutable_mapsize();
  public:
  void unsafe_arena_set_allocated_mapsize(
      ::Types::Vec2i* mapsize);
  ::Types::Vec2i* unsafe_arena_release_mapsize();

  // @@protoc_insertion_point(class_scope:NetworkIO.GameInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NetworkIO::PlayerInfo > players_;
  ::Types::Vec2i* mapsize_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_GameInfo_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CardMetaData

// string Name = 1;
inline void CardMetaData::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& CardMetaData::name() const {
  // @@protoc_insertion_point(field_get:NetworkIO.CardMetaData.Name)
  return _internal_name();
}
inline void CardMetaData::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:NetworkIO.CardMetaData.Name)
}
inline std::string* CardMetaData::mutable_name() {
  // @@protoc_insertion_point(field_mutable:NetworkIO.CardMetaData.Name)
  return _internal_mutable_name();
}
inline const std::string& CardMetaData::_internal_name() const {
  return name_.Get();
}
inline void CardMetaData::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CardMetaData::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:NetworkIO.CardMetaData.Name)
}
inline void CardMetaData::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:NetworkIO.CardMetaData.Name)
}
inline void CardMetaData::set_name(const char* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:NetworkIO.CardMetaData.Name)
}
inline std::string* CardMetaData::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CardMetaData::release_name() {
  // @@protoc_insertion_point(field_release:NetworkIO.CardMetaData.Name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CardMetaData::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:NetworkIO.CardMetaData.Name)
}

// string Archetype = 2;
inline void CardMetaData::clear_archetype() {
  archetype_.ClearToEmpty();
}
inline const std::string& CardMetaData::archetype() const {
  // @@protoc_insertion_point(field_get:NetworkIO.CardMetaData.Archetype)
  return _internal_archetype();
}
inline void CardMetaData::set_archetype(const std::string& value) {
  _internal_set_archetype(value);
  // @@protoc_insertion_point(field_set:NetworkIO.CardMetaData.Archetype)
}
inline std::string* CardMetaData::mutable_archetype() {
  // @@protoc_insertion_point(field_mutable:NetworkIO.CardMetaData.Archetype)
  return _internal_mutable_archetype();
}
inline const std::string& CardMetaData::_internal_archetype() const {
  return archetype_.Get();
}
inline void CardMetaData::_internal_set_archetype(const std::string& value) {
  
  archetype_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CardMetaData::set_archetype(std::string&& value) {
  
  archetype_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:NetworkIO.CardMetaData.Archetype)
}
inline void CardMetaData::set_archetype(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  archetype_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:NetworkIO.CardMetaData.Archetype)
}
inline void CardMetaData::set_archetype(const char* value,
    size_t size) {
  
  archetype_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:NetworkIO.CardMetaData.Archetype)
}
inline std::string* CardMetaData::_internal_mutable_archetype() {
  
  return archetype_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CardMetaData::release_archetype() {
  // @@protoc_insertion_point(field_release:NetworkIO.CardMetaData.Archetype)
  return archetype_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CardMetaData::set_allocated_archetype(std::string* archetype) {
  if (archetype != nullptr) {
    
  } else {
    
  }
  archetype_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), archetype,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:NetworkIO.CardMetaData.Archetype)
}

// bool Ultimate = 3;
inline void CardMetaData::clear_ultimate() {
  ultimate_ = false;
}
inline bool CardMetaData::_internal_ultimate() const {
  return ultimate_;
}
inline bool CardMetaData::ultimate() const {
  // @@protoc_insertion_point(field_get:NetworkIO.CardMetaData.Ultimate)
  return _internal_ultimate();
}
inline void CardMetaData::_internal_set_ultimate(bool value) {
  
  ultimate_ = value;
}
inline void CardMetaData::set_ultimate(bool value) {
  _internal_set_ultimate(value);
  // @@protoc_insertion_point(field_set:NetworkIO.CardMetaData.Ultimate)
}

// bool Feat = 4;
inline void CardMetaData::clear_feat() {
  feat_ = false;
}
inline bool CardMetaData::_internal_feat() const {
  return feat_;
}
inline bool CardMetaData::feat() const {
  // @@protoc_insertion_point(field_get:NetworkIO.CardMetaData.Feat)
  return _internal_feat();
}
inline void CardMetaData::_internal_set_feat(bool value) {
  
  feat_ = value;
}
inline void CardMetaData::set_feat(bool value) {
  _internal_set_feat(value);
  // @@protoc_insertion_point(field_set:NetworkIO.CardMetaData.Feat)
}

// repeated .GameState.Card.Color Colors = 5;
inline int CardMetaData::_internal_colors_size() const {
  return colors_.size();
}
inline int CardMetaData::colors_size() const {
  return _internal_colors_size();
}
inline void CardMetaData::clear_colors() {
  colors_.Clear();
}
inline ::GameState::Card_Color CardMetaData::_internal_colors(int index) const {
  return static_cast< ::GameState::Card_Color >(colors_.Get(index));
}
inline ::GameState::Card_Color CardMetaData::colors(int index) const {
  // @@protoc_insertion_point(field_get:NetworkIO.CardMetaData.Colors)
  return _internal_colors(index);
}
inline void CardMetaData::set_colors(int index, ::GameState::Card_Color value) {
  colors_.Set(index, value);
  // @@protoc_insertion_point(field_set:NetworkIO.CardMetaData.Colors)
}
inline void CardMetaData::_internal_add_colors(::GameState::Card_Color value) {
  colors_.Add(value);
}
inline void CardMetaData::add_colors(::GameState::Card_Color value) {
  // @@protoc_insertion_point(field_add:NetworkIO.CardMetaData.Colors)
  _internal_add_colors(value);
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
CardMetaData::colors() const {
  // @@protoc_insertion_point(field_list:NetworkIO.CardMetaData.Colors)
  return colors_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
CardMetaData::_internal_mutable_colors() {
  return &colors_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
CardMetaData::mutable_colors() {
  // @@protoc_insertion_point(field_mutable_list:NetworkIO.CardMetaData.Colors)
  return _internal_mutable_colors();
}

// int32 Count = 6;
inline void CardMetaData::clear_count() {
  count_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CardMetaData::_internal_count() const {
  return count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CardMetaData::count() const {
  // @@protoc_insertion_point(field_get:NetworkIO.CardMetaData.Count)
  return _internal_count();
}
inline void CardMetaData::_internal_set_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  count_ = value;
}
inline void CardMetaData::set_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:NetworkIO.CardMetaData.Count)
}

// .Effects.CardEffect OmniPresentEffect = 7;
inline bool CardMetaData::_internal_has_omnipresenteffect() const {
  return this != internal_default_instance() && omnipresenteffect_ != nullptr;
}
inline bool CardMetaData::has_omnipresenteffect() const {
  return _internal_has_omnipresenteffect();
}
inline const ::Effects::CardEffect& CardMetaData::_internal_omnipresenteffect() const {
  const ::Effects::CardEffect* p = omnipresenteffect_;
  return p != nullptr ? *p : reinterpret_cast<const ::Effects::CardEffect&>(
      ::Effects::_CardEffect_default_instance_);
}
inline const ::Effects::CardEffect& CardMetaData::omnipresenteffect() const {
  // @@protoc_insertion_point(field_get:NetworkIO.CardMetaData.OmniPresentEffect)
  return _internal_omnipresenteffect();
}
inline void CardMetaData::unsafe_arena_set_allocated_omnipresenteffect(
    ::Effects::CardEffect* omnipresenteffect) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(omnipresenteffect_);
  }
  omnipresenteffect_ = omnipresenteffect;
  if (omnipresenteffect) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:NetworkIO.CardMetaData.OmniPresentEffect)
}
inline ::Effects::CardEffect* CardMetaData::release_omnipresenteffect() {
  
  ::Effects::CardEffect* temp = omnipresenteffect_;
  omnipresenteffect_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Effects::CardEffect* CardMetaData::unsafe_arena_release_omnipresenteffect() {
  // @@protoc_insertion_point(field_release:NetworkIO.CardMetaData.OmniPresentEffect)
  
  ::Effects::CardEffect* temp = omnipresenteffect_;
  omnipresenteffect_ = nullptr;
  return temp;
}
inline ::Effects::CardEffect* CardMetaData::_internal_mutable_omnipresenteffect() {
  
  if (omnipresenteffect_ == nullptr) {
    auto* p = CreateMaybeMessage<::Effects::CardEffect>(GetArena());
    omnipresenteffect_ = p;
  }
  return omnipresenteffect_;
}
inline ::Effects::CardEffect* CardMetaData::mutable_omnipresenteffect() {
  // @@protoc_insertion_point(field_mutable:NetworkIO.CardMetaData.OmniPresentEffect)
  return _internal_mutable_omnipresenteffect();
}
inline void CardMetaData::set_allocated_omnipresenteffect(::Effects::CardEffect* omnipresenteffect) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(omnipresenteffect_);
  }
  if (omnipresenteffect) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(omnipresenteffect)->GetArena();
    if (message_arena != submessage_arena) {
      omnipresenteffect = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, omnipresenteffect, submessage_arena);
    }
    
  } else {
    
  }
  omnipresenteffect_ = omnipresenteffect;
  // @@protoc_insertion_point(field_set_allocated:NetworkIO.CardMetaData.OmniPresentEffect)
}

// .Effects.CardEffect PassiveEffect = 8;
inline bool CardMetaData::_internal_has_passiveeffect() const {
  return this != internal_default_instance() && passiveeffect_ != nullptr;
}
inline bool CardMetaData::has_passiveeffect() const {
  return _internal_has_passiveeffect();
}
inline const ::Effects::CardEffect& CardMetaData::_internal_passiveeffect() const {
  const ::Effects::CardEffect* p = passiveeffect_;
  return p != nullptr ? *p : reinterpret_cast<const ::Effects::CardEffect&>(
      ::Effects::_CardEffect_default_instance_);
}
inline const ::Effects::CardEffect& CardMetaData::passiveeffect() const {
  // @@protoc_insertion_point(field_get:NetworkIO.CardMetaData.PassiveEffect)
  return _internal_passiveeffect();
}
inline void CardMetaData::unsafe_arena_set_allocated_passiveeffect(
    ::Effects::CardEffect* passiveeffect) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(passiveeffect_);
  }
  passiveeffect_ = passiveeffect;
  if (passiveeffect) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:NetworkIO.CardMetaData.PassiveEffect)
}
inline ::Effects::CardEffect* CardMetaData::release_passiveeffect() {
  
  ::Effects::CardEffect* temp = passiveeffect_;
  passiveeffect_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Effects::CardEffect* CardMetaData::unsafe_arena_release_passiveeffect() {
  // @@protoc_insertion_point(field_release:NetworkIO.CardMetaData.PassiveEffect)
  
  ::Effects::CardEffect* temp = passiveeffect_;
  passiveeffect_ = nullptr;
  return temp;
}
inline ::Effects::CardEffect* CardMetaData::_internal_mutable_passiveeffect() {
  
  if (passiveeffect_ == nullptr) {
    auto* p = CreateMaybeMessage<::Effects::CardEffect>(GetArena());
    passiveeffect_ = p;
  }
  return passiveeffect_;
}
inline ::Effects::CardEffect* CardMetaData::mutable_passiveeffect() {
  // @@protoc_insertion_point(field_mutable:NetworkIO.CardMetaData.PassiveEffect)
  return _internal_mutable_passiveeffect();
}
inline void CardMetaData::set_allocated_passiveeffect(::Effects::CardEffect* passiveeffect) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(passiveeffect_);
  }
  if (passiveeffect) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(passiveeffect)->GetArena();
    if (message_arena != submessage_arena) {
      passiveeffect = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, passiveeffect, submessage_arena);
    }
    
  } else {
    
  }
  passiveeffect_ = passiveeffect;
  // @@protoc_insertion_point(field_set_allocated:NetworkIO.CardMetaData.PassiveEffect)
}

// .Effects.CardEffect FeatEffect = 9;
inline bool CardMetaData::_internal_has_feateffect() const {
  return this != internal_default_instance() && feateffect_ != nullptr;
}
inline bool CardMetaData::has_feateffect() const {
  return _internal_has_feateffect();
}
inline const ::Effects::CardEffect& CardMetaData::_internal_feateffect() const {
  const ::Effects::CardEffect* p = feateffect_;
  return p != nullptr ? *p : reinterpret_cast<const ::Effects::CardEffect&>(
      ::Effects::_CardEffect_default_instance_);
}
inline const ::Effects::CardEffect& CardMetaData::feateffect() const {
  // @@protoc_insertion_point(field_get:NetworkIO.CardMetaData.FeatEffect)
  return _internal_feateffect();
}
inline void CardMetaData::unsafe_arena_set_allocated_feateffect(
    ::Effects::CardEffect* feateffect) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(feateffect_);
  }
  feateffect_ = feateffect;
  if (feateffect) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:NetworkIO.CardMetaData.FeatEffect)
}
inline ::Effects::CardEffect* CardMetaData::release_feateffect() {
  
  ::Effects::CardEffect* temp = feateffect_;
  feateffect_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Effects::CardEffect* CardMetaData::unsafe_arena_release_feateffect() {
  // @@protoc_insertion_point(field_release:NetworkIO.CardMetaData.FeatEffect)
  
  ::Effects::CardEffect* temp = feateffect_;
  feateffect_ = nullptr;
  return temp;
}
inline ::Effects::CardEffect* CardMetaData::_internal_mutable_feateffect() {
  
  if (feateffect_ == nullptr) {
    auto* p = CreateMaybeMessage<::Effects::CardEffect>(GetArena());
    feateffect_ = p;
  }
  return feateffect_;
}
inline ::Effects::CardEffect* CardMetaData::mutable_feateffect() {
  // @@protoc_insertion_point(field_mutable:NetworkIO.CardMetaData.FeatEffect)
  return _internal_mutable_feateffect();
}
inline void CardMetaData::set_allocated_feateffect(::Effects::CardEffect* feateffect) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(feateffect_);
  }
  if (feateffect) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(feateffect)->GetArena();
    if (message_arena != submessage_arena) {
      feateffect = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, feateffect, submessage_arena);
    }
    
  } else {
    
  }
  feateffect_ = feateffect;
  // @@protoc_insertion_point(field_set_allocated:NetworkIO.CardMetaData.FeatEffect)
}

// .Effects.CardEffect PlayEffect = 10;
inline bool CardMetaData::_internal_has_playeffect() const {
  return this != internal_default_instance() && playeffect_ != nullptr;
}
inline bool CardMetaData::has_playeffect() const {
  return _internal_has_playeffect();
}
inline const ::Effects::CardEffect& CardMetaData::_internal_playeffect() const {
  const ::Effects::CardEffect* p = playeffect_;
  return p != nullptr ? *p : reinterpret_cast<const ::Effects::CardEffect&>(
      ::Effects::_CardEffect_default_instance_);
}
inline const ::Effects::CardEffect& CardMetaData::playeffect() const {
  // @@protoc_insertion_point(field_get:NetworkIO.CardMetaData.PlayEffect)
  return _internal_playeffect();
}
inline void CardMetaData::unsafe_arena_set_allocated_playeffect(
    ::Effects::CardEffect* playeffect) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(playeffect_);
  }
  playeffect_ = playeffect;
  if (playeffect) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:NetworkIO.CardMetaData.PlayEffect)
}
inline ::Effects::CardEffect* CardMetaData::release_playeffect() {
  
  ::Effects::CardEffect* temp = playeffect_;
  playeffect_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Effects::CardEffect* CardMetaData::unsafe_arena_release_playeffect() {
  // @@protoc_insertion_point(field_release:NetworkIO.CardMetaData.PlayEffect)
  
  ::Effects::CardEffect* temp = playeffect_;
  playeffect_ = nullptr;
  return temp;
}
inline ::Effects::CardEffect* CardMetaData::_internal_mutable_playeffect() {
  
  if (playeffect_ == nullptr) {
    auto* p = CreateMaybeMessage<::Effects::CardEffect>(GetArena());
    playeffect_ = p;
  }
  return playeffect_;
}
inline ::Effects::CardEffect* CardMetaData::mutable_playeffect() {
  // @@protoc_insertion_point(field_mutable:NetworkIO.CardMetaData.PlayEffect)
  return _internal_mutable_playeffect();
}
inline void CardMetaData::set_allocated_playeffect(::Effects::CardEffect* playeffect) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(playeffect_);
  }
  if (playeffect) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(playeffect)->GetArena();
    if (message_arena != submessage_arena) {
      playeffect = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, playeffect, submessage_arena);
    }
    
  } else {
    
  }
  playeffect_ = playeffect;
  // @@protoc_insertion_point(field_set_allocated:NetworkIO.CardMetaData.PlayEffect)
}

// .Effects.CardEffect ResolveEffect = 11;
inline bool CardMetaData::_internal_has_resolveeffect() const {
  return this != internal_default_instance() && resolveeffect_ != nullptr;
}
inline bool CardMetaData::has_resolveeffect() const {
  return _internal_has_resolveeffect();
}
inline const ::Effects::CardEffect& CardMetaData::_internal_resolveeffect() const {
  const ::Effects::CardEffect* p = resolveeffect_;
  return p != nullptr ? *p : reinterpret_cast<const ::Effects::CardEffect&>(
      ::Effects::_CardEffect_default_instance_);
}
inline const ::Effects::CardEffect& CardMetaData::resolveeffect() const {
  // @@protoc_insertion_point(field_get:NetworkIO.CardMetaData.ResolveEffect)
  return _internal_resolveeffect();
}
inline void CardMetaData::unsafe_arena_set_allocated_resolveeffect(
    ::Effects::CardEffect* resolveeffect) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(resolveeffect_);
  }
  resolveeffect_ = resolveeffect;
  if (resolveeffect) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:NetworkIO.CardMetaData.ResolveEffect)
}
inline ::Effects::CardEffect* CardMetaData::release_resolveeffect() {
  
  ::Effects::CardEffect* temp = resolveeffect_;
  resolveeffect_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Effects::CardEffect* CardMetaData::unsafe_arena_release_resolveeffect() {
  // @@protoc_insertion_point(field_release:NetworkIO.CardMetaData.ResolveEffect)
  
  ::Effects::CardEffect* temp = resolveeffect_;
  resolveeffect_ = nullptr;
  return temp;
}
inline ::Effects::CardEffect* CardMetaData::_internal_mutable_resolveeffect() {
  
  if (resolveeffect_ == nullptr) {
    auto* p = CreateMaybeMessage<::Effects::CardEffect>(GetArena());
    resolveeffect_ = p;
  }
  return resolveeffect_;
}
inline ::Effects::CardEffect* CardMetaData::mutable_resolveeffect() {
  // @@protoc_insertion_point(field_mutable:NetworkIO.CardMetaData.ResolveEffect)
  return _internal_mutable_resolveeffect();
}
inline void CardMetaData::set_allocated_resolveeffect(::Effects::CardEffect* resolveeffect) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(resolveeffect_);
  }
  if (resolveeffect) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(resolveeffect)->GetArena();
    if (message_arena != submessage_arena) {
      resolveeffect = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolveeffect, submessage_arena);
    }
    
  } else {
    
  }
  resolveeffect_ = resolveeffect;
  // @@protoc_insertion_point(field_set_allocated:NetworkIO.CardMetaData.ResolveEffect)
}

// -------------------------------------------------------------------

// DeckList

// repeated .NetworkIO.CardMetaData Deck = 3;
inline int DeckList::_internal_deck_size() const {
  return deck_.size();
}
inline int DeckList::deck_size() const {
  return _internal_deck_size();
}
inline void DeckList::clear_deck() {
  deck_.Clear();
}
inline ::NetworkIO::CardMetaData* DeckList::mutable_deck(int index) {
  // @@protoc_insertion_point(field_mutable:NetworkIO.DeckList.Deck)
  return deck_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NetworkIO::CardMetaData >*
DeckList::mutable_deck() {
  // @@protoc_insertion_point(field_mutable_list:NetworkIO.DeckList.Deck)
  return &deck_;
}
inline const ::NetworkIO::CardMetaData& DeckList::_internal_deck(int index) const {
  return deck_.Get(index);
}
inline const ::NetworkIO::CardMetaData& DeckList::deck(int index) const {
  // @@protoc_insertion_point(field_get:NetworkIO.DeckList.Deck)
  return _internal_deck(index);
}
inline ::NetworkIO::CardMetaData* DeckList::_internal_add_deck() {
  return deck_.Add();
}
inline ::NetworkIO::CardMetaData* DeckList::add_deck() {
  // @@protoc_insertion_point(field_add:NetworkIO.DeckList.Deck)
  return _internal_add_deck();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NetworkIO::CardMetaData >&
DeckList::deck() const {
  // @@protoc_insertion_point(field_list:NetworkIO.DeckList.Deck)
  return deck_;
}

// -------------------------------------------------------------------

// RandomAgent

// -------------------------------------------------------------------

// AIAgent

// -------------------------------------------------------------------

// PlayerAgent

// int32 PlayerUID = 1;
inline void PlayerAgent::clear_playeruid() {
  playeruid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlayerAgent::_internal_playeruid() const {
  return playeruid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlayerAgent::playeruid() const {
  // @@protoc_insertion_point(field_get:NetworkIO.PlayerAgent.PlayerUID)
  return _internal_playeruid();
}
inline void PlayerAgent::_internal_set_playeruid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  playeruid_ = value;
}
inline void PlayerAgent::set_playeruid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_playeruid(value);
  // @@protoc_insertion_point(field_set:NetworkIO.PlayerAgent.PlayerUID)
}

// -------------------------------------------------------------------

// PlayerInfo

// string Username = 1;
inline void PlayerInfo::clear_username() {
  username_.ClearToEmpty();
}
inline const std::string& PlayerInfo::username() const {
  // @@protoc_insertion_point(field_get:NetworkIO.PlayerInfo.Username)
  return _internal_username();
}
inline void PlayerInfo::set_username(const std::string& value) {
  _internal_set_username(value);
  // @@protoc_insertion_point(field_set:NetworkIO.PlayerInfo.Username)
}
inline std::string* PlayerInfo::mutable_username() {
  // @@protoc_insertion_point(field_mutable:NetworkIO.PlayerInfo.Username)
  return _internal_mutable_username();
}
inline const std::string& PlayerInfo::_internal_username() const {
  return username_.Get();
}
inline void PlayerInfo::_internal_set_username(const std::string& value) {
  
  username_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void PlayerInfo::set_username(std::string&& value) {
  
  username_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:NetworkIO.PlayerInfo.Username)
}
inline void PlayerInfo::set_username(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  username_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:NetworkIO.PlayerInfo.Username)
}
inline void PlayerInfo::set_username(const char* value,
    size_t size) {
  
  username_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:NetworkIO.PlayerInfo.Username)
}
inline std::string* PlayerInfo::_internal_mutable_username() {
  
  return username_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* PlayerInfo::release_username() {
  // @@protoc_insertion_point(field_release:NetworkIO.PlayerInfo.Username)
  return username_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PlayerInfo::set_allocated_username(std::string* username) {
  if (username != nullptr) {
    
  } else {
    
  }
  username_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), username,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:NetworkIO.PlayerInfo.Username)
}

// string UID = 2;
inline void PlayerInfo::clear_uid() {
  uid_.ClearToEmpty();
}
inline const std::string& PlayerInfo::uid() const {
  // @@protoc_insertion_point(field_get:NetworkIO.PlayerInfo.UID)
  return _internal_uid();
}
inline void PlayerInfo::set_uid(const std::string& value) {
  _internal_set_uid(value);
  // @@protoc_insertion_point(field_set:NetworkIO.PlayerInfo.UID)
}
inline std::string* PlayerInfo::mutable_uid() {
  // @@protoc_insertion_point(field_mutable:NetworkIO.PlayerInfo.UID)
  return _internal_mutable_uid();
}
inline const std::string& PlayerInfo::_internal_uid() const {
  return uid_.Get();
}
inline void PlayerInfo::_internal_set_uid(const std::string& value) {
  
  uid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void PlayerInfo::set_uid(std::string&& value) {
  
  uid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:NetworkIO.PlayerInfo.UID)
}
inline void PlayerInfo::set_uid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  uid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:NetworkIO.PlayerInfo.UID)
}
inline void PlayerInfo::set_uid(const char* value,
    size_t size) {
  
  uid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:NetworkIO.PlayerInfo.UID)
}
inline std::string* PlayerInfo::_internal_mutable_uid() {
  
  return uid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* PlayerInfo::release_uid() {
  // @@protoc_insertion_point(field_release:NetworkIO.PlayerInfo.UID)
  return uid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PlayerInfo::set_allocated_uid(std::string* uid) {
  if (uid != nullptr) {
    
  } else {
    
  }
  uid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), uid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:NetworkIO.PlayerInfo.UID)
}

// .NetworkIO.DeckList Deck = 3;
inline bool PlayerInfo::_internal_has_deck() const {
  return this != internal_default_instance() && deck_ != nullptr;
}
inline bool PlayerInfo::has_deck() const {
  return _internal_has_deck();
}
inline void PlayerInfo::clear_deck() {
  if (GetArena() == nullptr && deck_ != nullptr) {
    delete deck_;
  }
  deck_ = nullptr;
}
inline const ::NetworkIO::DeckList& PlayerInfo::_internal_deck() const {
  const ::NetworkIO::DeckList* p = deck_;
  return p != nullptr ? *p : reinterpret_cast<const ::NetworkIO::DeckList&>(
      ::NetworkIO::_DeckList_default_instance_);
}
inline const ::NetworkIO::DeckList& PlayerInfo::deck() const {
  // @@protoc_insertion_point(field_get:NetworkIO.PlayerInfo.Deck)
  return _internal_deck();
}
inline void PlayerInfo::unsafe_arena_set_allocated_deck(
    ::NetworkIO::DeckList* deck) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(deck_);
  }
  deck_ = deck;
  if (deck) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:NetworkIO.PlayerInfo.Deck)
}
inline ::NetworkIO::DeckList* PlayerInfo::release_deck() {
  
  ::NetworkIO::DeckList* temp = deck_;
  deck_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::NetworkIO::DeckList* PlayerInfo::unsafe_arena_release_deck() {
  // @@protoc_insertion_point(field_release:NetworkIO.PlayerInfo.Deck)
  
  ::NetworkIO::DeckList* temp = deck_;
  deck_ = nullptr;
  return temp;
}
inline ::NetworkIO::DeckList* PlayerInfo::_internal_mutable_deck() {
  
  if (deck_ == nullptr) {
    auto* p = CreateMaybeMessage<::NetworkIO::DeckList>(GetArena());
    deck_ = p;
  }
  return deck_;
}
inline ::NetworkIO::DeckList* PlayerInfo::mutable_deck() {
  // @@protoc_insertion_point(field_mutable:NetworkIO.PlayerInfo.Deck)
  return _internal_mutable_deck();
}
inline void PlayerInfo::set_allocated_deck(::NetworkIO::DeckList* deck) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete deck_;
  }
  if (deck) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(deck);
    if (message_arena != submessage_arena) {
      deck = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, deck, submessage_arena);
    }
    
  } else {
    
  }
  deck_ = deck;
  // @@protoc_insertion_point(field_set_allocated:NetworkIO.PlayerInfo.Deck)
}

// .Types.Vec2i StartingPosition = 4;
inline bool PlayerInfo::_internal_has_startingposition() const {
  return this != internal_default_instance() && startingposition_ != nullptr;
}
inline bool PlayerInfo::has_startingposition() const {
  return _internal_has_startingposition();
}
inline const ::Types::Vec2i& PlayerInfo::_internal_startingposition() const {
  const ::Types::Vec2i* p = startingposition_;
  return p != nullptr ? *p : reinterpret_cast<const ::Types::Vec2i&>(
      ::Types::_Vec2i_default_instance_);
}
inline const ::Types::Vec2i& PlayerInfo::startingposition() const {
  // @@protoc_insertion_point(field_get:NetworkIO.PlayerInfo.StartingPosition)
  return _internal_startingposition();
}
inline void PlayerInfo::unsafe_arena_set_allocated_startingposition(
    ::Types::Vec2i* startingposition) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(startingposition_);
  }
  startingposition_ = startingposition;
  if (startingposition) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:NetworkIO.PlayerInfo.StartingPosition)
}
inline ::Types::Vec2i* PlayerInfo::release_startingposition() {
  
  ::Types::Vec2i* temp = startingposition_;
  startingposition_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Types::Vec2i* PlayerInfo::unsafe_arena_release_startingposition() {
  // @@protoc_insertion_point(field_release:NetworkIO.PlayerInfo.StartingPosition)
  
  ::Types::Vec2i* temp = startingposition_;
  startingposition_ = nullptr;
  return temp;
}
inline ::Types::Vec2i* PlayerInfo::_internal_mutable_startingposition() {
  
  if (startingposition_ == nullptr) {
    auto* p = CreateMaybeMessage<::Types::Vec2i>(GetArena());
    startingposition_ = p;
  }
  return startingposition_;
}
inline ::Types::Vec2i* PlayerInfo::mutable_startingposition() {
  // @@protoc_insertion_point(field_mutable:NetworkIO.PlayerInfo.StartingPosition)
  return _internal_mutable_startingposition();
}
inline void PlayerInfo::set_allocated_startingposition(::Types::Vec2i* startingposition) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(startingposition_);
  }
  if (startingposition) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(startingposition)->GetArena();
    if (message_arena != submessage_arena) {
      startingposition = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, startingposition, submessage_arena);
    }
    
  } else {
    
  }
  startingposition_ = startingposition;
  // @@protoc_insertion_point(field_set_allocated:NetworkIO.PlayerInfo.StartingPosition)
}

// .NetworkIO.AIAgent AIAgent = 5;
inline bool PlayerInfo::_internal_has_aiagent() const {
  return AgentInfo_case() == kAIAgent;
}
inline bool PlayerInfo::has_aiagent() const {
  return _internal_has_aiagent();
}
inline void PlayerInfo::set_has_aiagent() {
  _oneof_case_[0] = kAIAgent;
}
inline void PlayerInfo::clear_aiagent() {
  if (_internal_has_aiagent()) {
    if (GetArena() == nullptr) {
      delete AgentInfo_.aiagent_;
    }
    clear_has_AgentInfo();
  }
}
inline ::NetworkIO::AIAgent* PlayerInfo::release_aiagent() {
  // @@protoc_insertion_point(field_release:NetworkIO.PlayerInfo.AIAgent)
  if (_internal_has_aiagent()) {
    clear_has_AgentInfo();
      ::NetworkIO::AIAgent* temp = AgentInfo_.aiagent_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    AgentInfo_.aiagent_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::NetworkIO::AIAgent& PlayerInfo::_internal_aiagent() const {
  return _internal_has_aiagent()
      ? *AgentInfo_.aiagent_
      : reinterpret_cast< ::NetworkIO::AIAgent&>(::NetworkIO::_AIAgent_default_instance_);
}
inline const ::NetworkIO::AIAgent& PlayerInfo::aiagent() const {
  // @@protoc_insertion_point(field_get:NetworkIO.PlayerInfo.AIAgent)
  return _internal_aiagent();
}
inline ::NetworkIO::AIAgent* PlayerInfo::unsafe_arena_release_aiagent() {
  // @@protoc_insertion_point(field_unsafe_arena_release:NetworkIO.PlayerInfo.AIAgent)
  if (_internal_has_aiagent()) {
    clear_has_AgentInfo();
    ::NetworkIO::AIAgent* temp = AgentInfo_.aiagent_;
    AgentInfo_.aiagent_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void PlayerInfo::unsafe_arena_set_allocated_aiagent(::NetworkIO::AIAgent* aiagent) {
  clear_AgentInfo();
  if (aiagent) {
    set_has_aiagent();
    AgentInfo_.aiagent_ = aiagent;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:NetworkIO.PlayerInfo.AIAgent)
}
inline ::NetworkIO::AIAgent* PlayerInfo::_internal_mutable_aiagent() {
  if (!_internal_has_aiagent()) {
    clear_AgentInfo();
    set_has_aiagent();
    AgentInfo_.aiagent_ = CreateMaybeMessage< ::NetworkIO::AIAgent >(GetArena());
  }
  return AgentInfo_.aiagent_;
}
inline ::NetworkIO::AIAgent* PlayerInfo::mutable_aiagent() {
  // @@protoc_insertion_point(field_mutable:NetworkIO.PlayerInfo.AIAgent)
  return _internal_mutable_aiagent();
}

// .NetworkIO.RandomAgent RandomAgent = 6;
inline bool PlayerInfo::_internal_has_randomagent() const {
  return AgentInfo_case() == kRandomAgent;
}
inline bool PlayerInfo::has_randomagent() const {
  return _internal_has_randomagent();
}
inline void PlayerInfo::set_has_randomagent() {
  _oneof_case_[0] = kRandomAgent;
}
inline void PlayerInfo::clear_randomagent() {
  if (_internal_has_randomagent()) {
    if (GetArena() == nullptr) {
      delete AgentInfo_.randomagent_;
    }
    clear_has_AgentInfo();
  }
}
inline ::NetworkIO::RandomAgent* PlayerInfo::release_randomagent() {
  // @@protoc_insertion_point(field_release:NetworkIO.PlayerInfo.RandomAgent)
  if (_internal_has_randomagent()) {
    clear_has_AgentInfo();
      ::NetworkIO::RandomAgent* temp = AgentInfo_.randomagent_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    AgentInfo_.randomagent_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::NetworkIO::RandomAgent& PlayerInfo::_internal_randomagent() const {
  return _internal_has_randomagent()
      ? *AgentInfo_.randomagent_
      : reinterpret_cast< ::NetworkIO::RandomAgent&>(::NetworkIO::_RandomAgent_default_instance_);
}
inline const ::NetworkIO::RandomAgent& PlayerInfo::randomagent() const {
  // @@protoc_insertion_point(field_get:NetworkIO.PlayerInfo.RandomAgent)
  return _internal_randomagent();
}
inline ::NetworkIO::RandomAgent* PlayerInfo::unsafe_arena_release_randomagent() {
  // @@protoc_insertion_point(field_unsafe_arena_release:NetworkIO.PlayerInfo.RandomAgent)
  if (_internal_has_randomagent()) {
    clear_has_AgentInfo();
    ::NetworkIO::RandomAgent* temp = AgentInfo_.randomagent_;
    AgentInfo_.randomagent_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void PlayerInfo::unsafe_arena_set_allocated_randomagent(::NetworkIO::RandomAgent* randomagent) {
  clear_AgentInfo();
  if (randomagent) {
    set_has_randomagent();
    AgentInfo_.randomagent_ = randomagent;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:NetworkIO.PlayerInfo.RandomAgent)
}
inline ::NetworkIO::RandomAgent* PlayerInfo::_internal_mutable_randomagent() {
  if (!_internal_has_randomagent()) {
    clear_AgentInfo();
    set_has_randomagent();
    AgentInfo_.randomagent_ = CreateMaybeMessage< ::NetworkIO::RandomAgent >(GetArena());
  }
  return AgentInfo_.randomagent_;
}
inline ::NetworkIO::RandomAgent* PlayerInfo::mutable_randomagent() {
  // @@protoc_insertion_point(field_mutable:NetworkIO.PlayerInfo.RandomAgent)
  return _internal_mutable_randomagent();
}

// .NetworkIO.PlayerAgent PlayerAgent = 7;
inline bool PlayerInfo::_internal_has_playeragent() const {
  return AgentInfo_case() == kPlayerAgent;
}
inline bool PlayerInfo::has_playeragent() const {
  return _internal_has_playeragent();
}
inline void PlayerInfo::set_has_playeragent() {
  _oneof_case_[0] = kPlayerAgent;
}
inline void PlayerInfo::clear_playeragent() {
  if (_internal_has_playeragent()) {
    if (GetArena() == nullptr) {
      delete AgentInfo_.playeragent_;
    }
    clear_has_AgentInfo();
  }
}
inline ::NetworkIO::PlayerAgent* PlayerInfo::release_playeragent() {
  // @@protoc_insertion_point(field_release:NetworkIO.PlayerInfo.PlayerAgent)
  if (_internal_has_playeragent()) {
    clear_has_AgentInfo();
      ::NetworkIO::PlayerAgent* temp = AgentInfo_.playeragent_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    AgentInfo_.playeragent_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::NetworkIO::PlayerAgent& PlayerInfo::_internal_playeragent() const {
  return _internal_has_playeragent()
      ? *AgentInfo_.playeragent_
      : reinterpret_cast< ::NetworkIO::PlayerAgent&>(::NetworkIO::_PlayerAgent_default_instance_);
}
inline const ::NetworkIO::PlayerAgent& PlayerInfo::playeragent() const {
  // @@protoc_insertion_point(field_get:NetworkIO.PlayerInfo.PlayerAgent)
  return _internal_playeragent();
}
inline ::NetworkIO::PlayerAgent* PlayerInfo::unsafe_arena_release_playeragent() {
  // @@protoc_insertion_point(field_unsafe_arena_release:NetworkIO.PlayerInfo.PlayerAgent)
  if (_internal_has_playeragent()) {
    clear_has_AgentInfo();
    ::NetworkIO::PlayerAgent* temp = AgentInfo_.playeragent_;
    AgentInfo_.playeragent_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void PlayerInfo::unsafe_arena_set_allocated_playeragent(::NetworkIO::PlayerAgent* playeragent) {
  clear_AgentInfo();
  if (playeragent) {
    set_has_playeragent();
    AgentInfo_.playeragent_ = playeragent;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:NetworkIO.PlayerInfo.PlayerAgent)
}
inline ::NetworkIO::PlayerAgent* PlayerInfo::_internal_mutable_playeragent() {
  if (!_internal_has_playeragent()) {
    clear_AgentInfo();
    set_has_playeragent();
    AgentInfo_.playeragent_ = CreateMaybeMessage< ::NetworkIO::PlayerAgent >(GetArena());
  }
  return AgentInfo_.playeragent_;
}
inline ::NetworkIO::PlayerAgent* PlayerInfo::mutable_playeragent() {
  // @@protoc_insertion_point(field_mutable:NetworkIO.PlayerInfo.PlayerAgent)
  return _internal_mutable_playeragent();
}

inline bool PlayerInfo::has_AgentInfo() const {
  return AgentInfo_case() != AGENTINFO_NOT_SET;
}
inline void PlayerInfo::clear_has_AgentInfo() {
  _oneof_case_[0] = AGENTINFO_NOT_SET;
}
inline PlayerInfo::AgentInfoCase PlayerInfo::AgentInfo_case() const {
  return PlayerInfo::AgentInfoCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// GameInfo

// repeated .NetworkIO.PlayerInfo Players = 1;
inline int GameInfo::_internal_players_size() const {
  return players_.size();
}
inline int GameInfo::players_size() const {
  return _internal_players_size();
}
inline void GameInfo::clear_players() {
  players_.Clear();
}
inline ::NetworkIO::PlayerInfo* GameInfo::mutable_players(int index) {
  // @@protoc_insertion_point(field_mutable:NetworkIO.GameInfo.Players)
  return players_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NetworkIO::PlayerInfo >*
GameInfo::mutable_players() {
  // @@protoc_insertion_point(field_mutable_list:NetworkIO.GameInfo.Players)
  return &players_;
}
inline const ::NetworkIO::PlayerInfo& GameInfo::_internal_players(int index) const {
  return players_.Get(index);
}
inline const ::NetworkIO::PlayerInfo& GameInfo::players(int index) const {
  // @@protoc_insertion_point(field_get:NetworkIO.GameInfo.Players)
  return _internal_players(index);
}
inline ::NetworkIO::PlayerInfo* GameInfo::_internal_add_players() {
  return players_.Add();
}
inline ::NetworkIO::PlayerInfo* GameInfo::add_players() {
  // @@protoc_insertion_point(field_add:NetworkIO.GameInfo.Players)
  return _internal_add_players();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NetworkIO::PlayerInfo >&
GameInfo::players() const {
  // @@protoc_insertion_point(field_list:NetworkIO.GameInfo.Players)
  return players_;
}

// .Types.Vec2i MapSize = 2;
inline bool GameInfo::_internal_has_mapsize() const {
  return this != internal_default_instance() && mapsize_ != nullptr;
}
inline bool GameInfo::has_mapsize() const {
  return _internal_has_mapsize();
}
inline const ::Types::Vec2i& GameInfo::_internal_mapsize() const {
  const ::Types::Vec2i* p = mapsize_;
  return p != nullptr ? *p : reinterpret_cast<const ::Types::Vec2i&>(
      ::Types::_Vec2i_default_instance_);
}
inline const ::Types::Vec2i& GameInfo::mapsize() const {
  // @@protoc_insertion_point(field_get:NetworkIO.GameInfo.MapSize)
  return _internal_mapsize();
}
inline void GameInfo::unsafe_arena_set_allocated_mapsize(
    ::Types::Vec2i* mapsize) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mapsize_);
  }
  mapsize_ = mapsize;
  if (mapsize) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:NetworkIO.GameInfo.MapSize)
}
inline ::Types::Vec2i* GameInfo::release_mapsize() {
  
  ::Types::Vec2i* temp = mapsize_;
  mapsize_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Types::Vec2i* GameInfo::unsafe_arena_release_mapsize() {
  // @@protoc_insertion_point(field_release:NetworkIO.GameInfo.MapSize)
  
  ::Types::Vec2i* temp = mapsize_;
  mapsize_ = nullptr;
  return temp;
}
inline ::Types::Vec2i* GameInfo::_internal_mutable_mapsize() {
  
  if (mapsize_ == nullptr) {
    auto* p = CreateMaybeMessage<::Types::Vec2i>(GetArena());
    mapsize_ = p;
  }
  return mapsize_;
}
inline ::Types::Vec2i* GameInfo::mutable_mapsize() {
  // @@protoc_insertion_point(field_mutable:NetworkIO.GameInfo.MapSize)
  return _internal_mutable_mapsize();
}
inline void GameInfo::set_allocated_mapsize(::Types::Vec2i* mapsize) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(mapsize_);
  }
  if (mapsize) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mapsize)->GetArena();
    if (message_arena != submessage_arena) {
      mapsize = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mapsize, submessage_arena);
    }
    
  } else {
    
  }
  mapsize_ = mapsize;
  // @@protoc_insertion_point(field_set_allocated:NetworkIO.GameInfo.MapSize)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace NetworkIO

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_GameInfo_2eproto
