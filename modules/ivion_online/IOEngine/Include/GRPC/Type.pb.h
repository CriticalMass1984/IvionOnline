// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Type.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Type_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Type_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Type_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Type_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Type_2eproto;
namespace IvionOnline {
class Boolean;
class BooleanDefaultTypeInternal;
extern BooleanDefaultTypeInternal _Boolean_default_instance_;
class Integer;
class IntegerDefaultTypeInternal;
extern IntegerDefaultTypeInternal _Integer_default_instance_;
class ObjectPath;
class ObjectPathDefaultTypeInternal;
extern ObjectPathDefaultTypeInternal _ObjectPath_default_instance_;
class Vec2i;
class Vec2iDefaultTypeInternal;
extern Vec2iDefaultTypeInternal _Vec2i_default_instance_;
}  // namespace IvionOnline
PROTOBUF_NAMESPACE_OPEN
template<> ::IvionOnline::Boolean* Arena::CreateMaybeMessage<::IvionOnline::Boolean>(Arena*);
template<> ::IvionOnline::Integer* Arena::CreateMaybeMessage<::IvionOnline::Integer>(Arena*);
template<> ::IvionOnline::ObjectPath* Arena::CreateMaybeMessage<::IvionOnline::ObjectPath>(Arena*);
template<> ::IvionOnline::Vec2i* Arena::CreateMaybeMessage<::IvionOnline::Vec2i>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace IvionOnline {

enum Type : int {
  TYPE_BOOLEAN = 0,
  TYPE_REF_BOOLEAN = 1,
  TYPE_LIST_BOOLEAN = 2,
  TYPE_LIST_REF_BOOLEAN = 3,
  TYPE_REF_LIST_REF_BOOLEAN = 4,
  TYPE_INTEGER = 5,
  TYPE_REF_INTEGER = 6,
  TYPE_LIST_INTEGER = 7,
  TYPE_LIST_REF_INTEGER = 8,
  TYPE_REF_LIST_REF_INTEGER = 9,
  TYPE_VEC2I = 10,
  TYPE_REF_VEC2I = 11,
  TYPE_LIST_VEC2I = 12,
  TYPE_LIST_REF_VEC2I = 13,
  TYPE_REF_LIST_REF_VEC2I = 14,
  TYPE_TERRAIN_TYPE = 15,
  TYPE_REF_TERRAIN_TYPE = 16,
  TYPE_LIST_TERRAIN_TYPE = 17,
  TYPE_LIST_REF_TERRAIN_TYPE = 18,
  TYPE_REF_LIST_REF_TERRAIN_TYPE = 19,
  TYPE_COLOR = 20,
  TYPE_REF_COLOR = 21,
  TYPE_LIST_COLOR = 22,
  TYPE_LIST_REF_COLOR = 23,
  TYPE_REF_LIST_REF_COLOR = 24,
  Type_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Type_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Type_IsValid(int value);
constexpr Type Type_MIN = TYPE_BOOLEAN;
constexpr Type Type_MAX = TYPE_REF_LIST_REF_COLOR;
constexpr int Type_ARRAYSIZE = Type_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Type_descriptor();
template<typename T>
inline const std::string& Type_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Type>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Type_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Type_descriptor(), enum_t_value);
}
inline bool Type_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Type* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Type>(
    Type_descriptor(), name, value);
}
enum Terrain_Type : int {
  TERRAIN_TYPE_NONE = 0,
  TERRAIN_TYPE_DIFFICULT = 1,
  TERRAIN_TYPE_ENCHANTED = 2,
  Terrain_Type_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Terrain_Type_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Terrain_Type_IsValid(int value);
constexpr Terrain_Type Terrain_Type_MIN = TERRAIN_TYPE_NONE;
constexpr Terrain_Type Terrain_Type_MAX = TERRAIN_TYPE_ENCHANTED;
constexpr int Terrain_Type_ARRAYSIZE = Terrain_Type_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Terrain_Type_descriptor();
template<typename T>
inline const std::string& Terrain_Type_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Terrain_Type>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Terrain_Type_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Terrain_Type_descriptor(), enum_t_value);
}
inline bool Terrain_Type_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Terrain_Type* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Terrain_Type>(
    Terrain_Type_descriptor(), name, value);
}
enum Color : int {
  COLOR_NONE = 0,
  COLOR_GRAY = 1,
  COLOR_BLACK = 2,
  COLOR_RED = 3,
  COLOR_GREEN = 4,
  COLOR_BLUE = 5,
  COLOR_WHITE = 6,
  Color_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Color_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Color_IsValid(int value);
constexpr Color Color_MIN = COLOR_NONE;
constexpr Color Color_MAX = COLOR_WHITE;
constexpr int Color_ARRAYSIZE = Color_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Color_descriptor();
template<typename T>
inline const std::string& Color_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Color>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Color_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Color_descriptor(), enum_t_value);
}
inline bool Color_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Color* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Color>(
    Color_descriptor(), name, value);
}
// ===================================================================

class ObjectPath PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IvionOnline.ObjectPath) */ {
 public:
  inline ObjectPath() : ObjectPath(nullptr) {}
  virtual ~ObjectPath();

  ObjectPath(const ObjectPath& from);
  ObjectPath(ObjectPath&& from) noexcept
    : ObjectPath() {
    *this = ::std::move(from);
  }

  inline ObjectPath& operator=(const ObjectPath& from) {
    CopyFrom(from);
    return *this;
  }
  inline ObjectPath& operator=(ObjectPath&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ObjectPath& default_instance();

  static inline const ObjectPath* internal_default_instance() {
    return reinterpret_cast<const ObjectPath*>(
               &_ObjectPath_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ObjectPath& a, ObjectPath& b) {
    a.Swap(&b);
  }
  inline void Swap(ObjectPath* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ObjectPath* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ObjectPath* New() const final {
    return CreateMaybeMessage<ObjectPath>(nullptr);
  }

  ObjectPath* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ObjectPath>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ObjectPath& from);
  void MergeFrom(const ObjectPath& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ObjectPath* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IvionOnline.ObjectPath";
  }
  protected:
  explicit ObjectPath(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Type_2eproto);
    return ::descriptor_table_Type_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFieldIndeciesFieldNumber = 1,
    kFullPathFieldNumber = 2,
    kObjectTypeFieldNumber = 3,
  };
  // repeated int32 FieldIndecies = 1;
  int fieldindecies_size() const;
  private:
  int _internal_fieldindecies_size() const;
  public:
  void clear_fieldindecies();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_fieldindecies(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_fieldindecies() const;
  void _internal_add_fieldindecies(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_fieldindecies();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 fieldindecies(int index) const;
  void set_fieldindecies(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_fieldindecies(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      fieldindecies() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_fieldindecies();

  // string FullPath = 2;
  void clear_fullpath();
  const std::string& fullpath() const;
  void set_fullpath(const std::string& value);
  void set_fullpath(std::string&& value);
  void set_fullpath(const char* value);
  void set_fullpath(const char* value, size_t size);
  std::string* mutable_fullpath();
  std::string* release_fullpath();
  void set_allocated_fullpath(std::string* fullpath);
  private:
  const std::string& _internal_fullpath() const;
  void _internal_set_fullpath(const std::string& value);
  std::string* _internal_mutable_fullpath();
  public:

  // .IvionOnline.Type Object_type = 3;
  void clear_object_type();
  ::IvionOnline::Type object_type() const;
  void set_object_type(::IvionOnline::Type value);
  private:
  ::IvionOnline::Type _internal_object_type() const;
  void _internal_set_object_type(::IvionOnline::Type value);
  public:

  // @@protoc_insertion_point(class_scope:IvionOnline.ObjectPath)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > fieldindecies_;
  mutable std::atomic<int> _fieldindecies_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr fullpath_;
  int object_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Type_2eproto;
};
// -------------------------------------------------------------------

class Boolean PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IvionOnline.Boolean) */ {
 public:
  inline Boolean() : Boolean(nullptr) {}
  virtual ~Boolean();

  Boolean(const Boolean& from);
  Boolean(Boolean&& from) noexcept
    : Boolean() {
    *this = ::std::move(from);
  }

  inline Boolean& operator=(const Boolean& from) {
    CopyFrom(from);
    return *this;
  }
  inline Boolean& operator=(Boolean&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Boolean& default_instance();

  static inline const Boolean* internal_default_instance() {
    return reinterpret_cast<const Boolean*>(
               &_Boolean_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Boolean& a, Boolean& b) {
    a.Swap(&b);
  }
  inline void Swap(Boolean* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Boolean* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Boolean* New() const final {
    return CreateMaybeMessage<Boolean>(nullptr);
  }

  Boolean* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Boolean>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Boolean& from);
  void MergeFrom(const Boolean& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Boolean* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IvionOnline.Boolean";
  }
  protected:
  explicit Boolean(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Type_2eproto);
    return ::descriptor_table_Type_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
  };
  // bool Value = 1;
  void clear_value();
  bool value() const;
  void set_value(bool value);
  private:
  bool _internal_value() const;
  void _internal_set_value(bool value);
  public:

  // @@protoc_insertion_point(class_scope:IvionOnline.Boolean)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Type_2eproto;
};
// -------------------------------------------------------------------

class Integer PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IvionOnline.Integer) */ {
 public:
  inline Integer() : Integer(nullptr) {}
  virtual ~Integer();

  Integer(const Integer& from);
  Integer(Integer&& from) noexcept
    : Integer() {
    *this = ::std::move(from);
  }

  inline Integer& operator=(const Integer& from) {
    CopyFrom(from);
    return *this;
  }
  inline Integer& operator=(Integer&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Integer& default_instance();

  static inline const Integer* internal_default_instance() {
    return reinterpret_cast<const Integer*>(
               &_Integer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Integer& a, Integer& b) {
    a.Swap(&b);
  }
  inline void Swap(Integer* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Integer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Integer* New() const final {
    return CreateMaybeMessage<Integer>(nullptr);
  }

  Integer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Integer>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Integer& from);
  void MergeFrom(const Integer& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Integer* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IvionOnline.Integer";
  }
  protected:
  explicit Integer(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Type_2eproto);
    return ::descriptor_table_Type_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
  };
  // int32 Value = 1;
  void clear_value();
  ::PROTOBUF_NAMESPACE_ID::int32 value() const;
  void set_value(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_value() const;
  void _internal_set_value(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:IvionOnline.Integer)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Type_2eproto;
};
// -------------------------------------------------------------------

class Vec2i PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IvionOnline.Vec2i) */ {
 public:
  inline Vec2i() : Vec2i(nullptr) {}
  virtual ~Vec2i();

  Vec2i(const Vec2i& from);
  Vec2i(Vec2i&& from) noexcept
    : Vec2i() {
    *this = ::std::move(from);
  }

  inline Vec2i& operator=(const Vec2i& from) {
    CopyFrom(from);
    return *this;
  }
  inline Vec2i& operator=(Vec2i&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Vec2i& default_instance();

  static inline const Vec2i* internal_default_instance() {
    return reinterpret_cast<const Vec2i*>(
               &_Vec2i_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Vec2i& a, Vec2i& b) {
    a.Swap(&b);
  }
  inline void Swap(Vec2i* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Vec2i* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Vec2i* New() const final {
    return CreateMaybeMessage<Vec2i>(nullptr);
  }

  Vec2i* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Vec2i>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Vec2i& from);
  void MergeFrom(const Vec2i& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Vec2i* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IvionOnline.Vec2i";
  }
  protected:
  explicit Vec2i(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Type_2eproto);
    return ::descriptor_table_Type_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
  };
  // int32 x = 1;
  void clear_x();
  ::PROTOBUF_NAMESPACE_ID::int32 x() const;
  void set_x(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_x() const;
  void _internal_set_x(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 y = 2;
  void clear_y();
  ::PROTOBUF_NAMESPACE_ID::int32 y() const;
  void set_y(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_y() const;
  void _internal_set_y(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:IvionOnline.Vec2i)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 x_;
  ::PROTOBUF_NAMESPACE_ID::int32 y_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Type_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ObjectPath

// repeated int32 FieldIndecies = 1;
inline int ObjectPath::_internal_fieldindecies_size() const {
  return fieldindecies_.size();
}
inline int ObjectPath::fieldindecies_size() const {
  return _internal_fieldindecies_size();
}
inline void ObjectPath::clear_fieldindecies() {
  fieldindecies_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ObjectPath::_internal_fieldindecies(int index) const {
  return fieldindecies_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ObjectPath::fieldindecies(int index) const {
  // @@protoc_insertion_point(field_get:IvionOnline.ObjectPath.FieldIndecies)
  return _internal_fieldindecies(index);
}
inline void ObjectPath::set_fieldindecies(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  fieldindecies_.Set(index, value);
  // @@protoc_insertion_point(field_set:IvionOnline.ObjectPath.FieldIndecies)
}
inline void ObjectPath::_internal_add_fieldindecies(::PROTOBUF_NAMESPACE_ID::int32 value) {
  fieldindecies_.Add(value);
}
inline void ObjectPath::add_fieldindecies(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_fieldindecies(value);
  // @@protoc_insertion_point(field_add:IvionOnline.ObjectPath.FieldIndecies)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
ObjectPath::_internal_fieldindecies() const {
  return fieldindecies_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
ObjectPath::fieldindecies() const {
  // @@protoc_insertion_point(field_list:IvionOnline.ObjectPath.FieldIndecies)
  return _internal_fieldindecies();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
ObjectPath::_internal_mutable_fieldindecies() {
  return &fieldindecies_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
ObjectPath::mutable_fieldindecies() {
  // @@protoc_insertion_point(field_mutable_list:IvionOnline.ObjectPath.FieldIndecies)
  return _internal_mutable_fieldindecies();
}

// string FullPath = 2;
inline void ObjectPath::clear_fullpath() {
  fullpath_.ClearToEmpty();
}
inline const std::string& ObjectPath::fullpath() const {
  // @@protoc_insertion_point(field_get:IvionOnline.ObjectPath.FullPath)
  return _internal_fullpath();
}
inline void ObjectPath::set_fullpath(const std::string& value) {
  _internal_set_fullpath(value);
  // @@protoc_insertion_point(field_set:IvionOnline.ObjectPath.FullPath)
}
inline std::string* ObjectPath::mutable_fullpath() {
  // @@protoc_insertion_point(field_mutable:IvionOnline.ObjectPath.FullPath)
  return _internal_mutable_fullpath();
}
inline const std::string& ObjectPath::_internal_fullpath() const {
  return fullpath_.Get();
}
inline void ObjectPath::_internal_set_fullpath(const std::string& value) {
  
  fullpath_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ObjectPath::set_fullpath(std::string&& value) {
  
  fullpath_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:IvionOnline.ObjectPath.FullPath)
}
inline void ObjectPath::set_fullpath(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  fullpath_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:IvionOnline.ObjectPath.FullPath)
}
inline void ObjectPath::set_fullpath(const char* value,
    size_t size) {
  
  fullpath_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:IvionOnline.ObjectPath.FullPath)
}
inline std::string* ObjectPath::_internal_mutable_fullpath() {
  
  return fullpath_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ObjectPath::release_fullpath() {
  // @@protoc_insertion_point(field_release:IvionOnline.ObjectPath.FullPath)
  return fullpath_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ObjectPath::set_allocated_fullpath(std::string* fullpath) {
  if (fullpath != nullptr) {
    
  } else {
    
  }
  fullpath_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), fullpath,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:IvionOnline.ObjectPath.FullPath)
}

// .IvionOnline.Type Object_type = 3;
inline void ObjectPath::clear_object_type() {
  object_type_ = 0;
}
inline ::IvionOnline::Type ObjectPath::_internal_object_type() const {
  return static_cast< ::IvionOnline::Type >(object_type_);
}
inline ::IvionOnline::Type ObjectPath::object_type() const {
  // @@protoc_insertion_point(field_get:IvionOnline.ObjectPath.Object_type)
  return _internal_object_type();
}
inline void ObjectPath::_internal_set_object_type(::IvionOnline::Type value) {
  
  object_type_ = value;
}
inline void ObjectPath::set_object_type(::IvionOnline::Type value) {
  _internal_set_object_type(value);
  // @@protoc_insertion_point(field_set:IvionOnline.ObjectPath.Object_type)
}

// -------------------------------------------------------------------

// Boolean

// bool Value = 1;
inline void Boolean::clear_value() {
  value_ = false;
}
inline bool Boolean::_internal_value() const {
  return value_;
}
inline bool Boolean::value() const {
  // @@protoc_insertion_point(field_get:IvionOnline.Boolean.Value)
  return _internal_value();
}
inline void Boolean::_internal_set_value(bool value) {
  
  value_ = value;
}
inline void Boolean::set_value(bool value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:IvionOnline.Boolean.Value)
}

// -------------------------------------------------------------------

// Integer

// int32 Value = 1;
inline void Integer::clear_value() {
  value_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Integer::_internal_value() const {
  return value_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Integer::value() const {
  // @@protoc_insertion_point(field_get:IvionOnline.Integer.Value)
  return _internal_value();
}
inline void Integer::_internal_set_value(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  value_ = value;
}
inline void Integer::set_value(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:IvionOnline.Integer.Value)
}

// -------------------------------------------------------------------

// Vec2i

// int32 x = 1;
inline void Vec2i::clear_x() {
  x_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Vec2i::_internal_x() const {
  return x_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Vec2i::x() const {
  // @@protoc_insertion_point(field_get:IvionOnline.Vec2i.x)
  return _internal_x();
}
inline void Vec2i::_internal_set_x(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  x_ = value;
}
inline void Vec2i::set_x(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:IvionOnline.Vec2i.x)
}

// int32 y = 2;
inline void Vec2i::clear_y() {
  y_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Vec2i::_internal_y() const {
  return y_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Vec2i::y() const {
  // @@protoc_insertion_point(field_get:IvionOnline.Vec2i.y)
  return _internal_y();
}
inline void Vec2i::_internal_set_y(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  y_ = value;
}
inline void Vec2i::set_y(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:IvionOnline.Vec2i.y)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace IvionOnline

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::IvionOnline::Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::IvionOnline::Type>() {
  return ::IvionOnline::Type_descriptor();
}
template <> struct is_proto_enum< ::IvionOnline::Terrain_Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::IvionOnline::Terrain_Type>() {
  return ::IvionOnline::Terrain_Type_descriptor();
}
template <> struct is_proto_enum< ::IvionOnline::Color> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::IvionOnline::Color>() {
  return ::IvionOnline::Color_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Type_2eproto
