// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: GameState.proto

#include <GRPC/GameState.pb.h>

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_Effects_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CardEffect_Effects_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_GameState_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_Card_GameState_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_GameState_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CardRef_GameState_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_GameState_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_EntityRef_GameState_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_GameState_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_EntityValue_GameState_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_GameState_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_GameState_GameState_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_GameState_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_InsertMutation_GameState_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_GameState_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Integer_GameState_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_GameState_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_IntegerRef_GameState_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_GameState_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_Mutation_GameState_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_GameState_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Path_GameState_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_GameState_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_Player_GameState_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_GameState_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Player_Stats_GameState_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_GameState_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PlayerRef_GameState_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_GameState_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_RemoveMutation_GameState_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_GameState_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SetMutation_GameState_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_GameState_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Team_GameState_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_GameState_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_Tile_GameState_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_GameState_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TileRef_GameState_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_GameState_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Vec2i_GameState_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_GameState_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Vec2iRef_GameState_2eproto;
namespace GameState {
class PathDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Path> _instance;
} _Path_default_instance_;
class IntegerDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Integer> _instance;
} _Integer_default_instance_;
class Vec2iDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Vec2i> _instance;
} _Vec2i_default_instance_;
class PlayerRefDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PlayerRef> _instance;
} _PlayerRef_default_instance_;
class CardRefDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CardRef> _instance;
} _CardRef_default_instance_;
class TileRefDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TileRef> _instance;
} _TileRef_default_instance_;
class IntegerRefDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<IntegerRef> _instance;
} _IntegerRef_default_instance_;
class Vec2iRefDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Vec2iRef> _instance;
} _Vec2iRef_default_instance_;
class IntegerValueDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<IntegerValue> _instance;
} _IntegerValue_default_instance_;
class Vec2iValueDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Vec2iValue> _instance;
} _Vec2iValue_default_instance_;
class EntityRefDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EntityRef> _instance;
} _EntityRef_default_instance_;
class EntityValueDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EntityValue> _instance;
} _EntityValue_default_instance_;
class Player_StatsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Player_Stats> _instance;
} _Player_Stats_default_instance_;
class PlayerDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Player> _instance;
} _Player_default_instance_;
class TileDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Tile> _instance;
} _Tile_default_instance_;
class CardDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Card> _instance;
} _Card_default_instance_;
class TeamDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Team> _instance;
} _Team_default_instance_;
class SetMutationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SetMutation> _instance;
} _SetMutation_default_instance_;
class RemoveMutationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RemoveMutation> _instance;
} _RemoveMutation_default_instance_;
class InsertMutationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<InsertMutation> _instance;
} _InsertMutation_default_instance_;
class MutationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Mutation> _instance;
} _Mutation_default_instance_;
class GameStateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GameState> _instance;
} _GameState_default_instance_;
class GameInstanceDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GameInstance> _instance;
} _GameInstance_default_instance_;
}  // namespace GameState
static void InitDefaultsscc_info_Card_GameState_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::GameState::_Card_default_instance_;
    new (ptr) ::GameState::Card();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_Card_GameState_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, 0, InitDefaultsscc_info_Card_GameState_2eproto}, {
      &scc_info_PlayerRef_GameState_2eproto.base,
      &scc_info_IntegerRef_GameState_2eproto.base,
      &scc_info_EntityRef_GameState_2eproto.base,
      &scc_info_CardEffect_Effects_2eproto.base,}};

static void InitDefaultsscc_info_CardRef_GameState_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::GameState::_CardRef_default_instance_;
    new (ptr) ::GameState::CardRef();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CardRef_GameState_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_CardRef_GameState_2eproto}, {
      &scc_info_Path_GameState_2eproto.base,}};

static void InitDefaultsscc_info_EntityRef_GameState_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::GameState::_EntityRef_default_instance_;
    new (ptr) ::GameState::EntityRef();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_EntityRef_GameState_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_EntityRef_GameState_2eproto}, {
      &scc_info_PlayerRef_GameState_2eproto.base,
      &scc_info_CardRef_GameState_2eproto.base,
      &scc_info_TileRef_GameState_2eproto.base,}};

static void InitDefaultsscc_info_EntityValue_GameState_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::GameState::_EntityValue_default_instance_;
    new (ptr) ::GameState::EntityValue();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_EntityValue_GameState_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 5, 0, InitDefaultsscc_info_EntityValue_GameState_2eproto}, {
      &scc_info_PlayerRef_GameState_2eproto.base,
      &scc_info_CardRef_GameState_2eproto.base,
      &scc_info_TileRef_GameState_2eproto.base,
      &scc_info_IntegerRef_GameState_2eproto.base,
      &scc_info_Vec2i_GameState_2eproto.base,}};

static void InitDefaultsscc_info_GameInstance_GameState_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::GameState::_GameInstance_default_instance_;
    new (ptr) ::GameState::GameInstance();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_GameInstance_GameState_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_GameInstance_GameState_2eproto}, {
      &scc_info_GameState_GameState_2eproto.base,
      &scc_info_Mutation_GameState_2eproto.base,}};

static void InitDefaultsscc_info_GameState_GameState_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::GameState::_GameState_default_instance_;
    new (ptr) ::GameState::GameState();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_GameState_GameState_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 5, 0, InitDefaultsscc_info_GameState_GameState_2eproto}, {
      &scc_info_Player_GameState_2eproto.base,
      &scc_info_Card_GameState_2eproto.base,
      &scc_info_Tile_GameState_2eproto.base,
      &scc_info_Team_GameState_2eproto.base,
      &scc_info_Integer_GameState_2eproto.base,}};

static void InitDefaultsscc_info_InsertMutation_GameState_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::GameState::_InsertMutation_default_instance_;
    new (ptr) ::GameState::InsertMutation();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_InsertMutation_GameState_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_InsertMutation_GameState_2eproto}, {
      &scc_info_EntityRef_GameState_2eproto.base,
      &scc_info_EntityValue_GameState_2eproto.base,}};

static void InitDefaultsscc_info_Integer_GameState_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::GameState::_Integer_default_instance_;
    new (ptr) ::GameState::Integer();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Integer_GameState_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Integer_GameState_2eproto}, {}};

static void InitDefaultsscc_info_IntegerRef_GameState_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::GameState::_IntegerRef_default_instance_;
    new (ptr) ::GameState::IntegerRef();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_IntegerRef_GameState_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_IntegerRef_GameState_2eproto}, {
      &scc_info_Path_GameState_2eproto.base,}};

static void InitDefaultsscc_info_IntegerValue_GameState_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::GameState::_IntegerValue_default_instance_;
    new (ptr) ::GameState::IntegerValue();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_IntegerValue_GameState_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_IntegerValue_GameState_2eproto}, {
      &scc_info_IntegerRef_GameState_2eproto.base,}};

static void InitDefaultsscc_info_Mutation_GameState_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::GameState::_Mutation_default_instance_;
    new (ptr) ::GameState::Mutation();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_Mutation_GameState_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_Mutation_GameState_2eproto}, {
      &scc_info_SetMutation_GameState_2eproto.base,
      &scc_info_RemoveMutation_GameState_2eproto.base,
      &scc_info_InsertMutation_GameState_2eproto.base,}};

static void InitDefaultsscc_info_Path_GameState_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::GameState::_Path_default_instance_;
    new (ptr) ::GameState::Path();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Path_GameState_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Path_GameState_2eproto}, {}};

static void InitDefaultsscc_info_Player_GameState_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::GameState::_Player_default_instance_;
    new (ptr) ::GameState::Player();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_Player_GameState_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_Player_GameState_2eproto}, {
      &scc_info_CardRef_GameState_2eproto.base,
      &scc_info_Player_Stats_GameState_2eproto.base,
      &scc_info_Vec2iRef_GameState_2eproto.base,}};

static void InitDefaultsscc_info_Player_Stats_GameState_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::GameState::_Player_Stats_default_instance_;
    new (ptr) ::GameState::Player_Stats();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Player_Stats_GameState_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Player_Stats_GameState_2eproto}, {
      &scc_info_IntegerRef_GameState_2eproto.base,}};

static void InitDefaultsscc_info_PlayerRef_GameState_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::GameState::_PlayerRef_default_instance_;
    new (ptr) ::GameState::PlayerRef();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PlayerRef_GameState_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PlayerRef_GameState_2eproto}, {
      &scc_info_Path_GameState_2eproto.base,}};

static void InitDefaultsscc_info_RemoveMutation_GameState_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::GameState::_RemoveMutation_default_instance_;
    new (ptr) ::GameState::RemoveMutation();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_RemoveMutation_GameState_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_RemoveMutation_GameState_2eproto}, {
      &scc_info_EntityRef_GameState_2eproto.base,
      &scc_info_EntityValue_GameState_2eproto.base,}};

static void InitDefaultsscc_info_SetMutation_GameState_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::GameState::_SetMutation_default_instance_;
    new (ptr) ::GameState::SetMutation();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SetMutation_GameState_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_SetMutation_GameState_2eproto}, {
      &scc_info_EntityRef_GameState_2eproto.base,
      &scc_info_EntityValue_GameState_2eproto.base,}};

static void InitDefaultsscc_info_Team_GameState_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::GameState::_Team_default_instance_;
    new (ptr) ::GameState::Team();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Team_GameState_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Team_GameState_2eproto}, {
      &scc_info_PlayerRef_GameState_2eproto.base,}};

static void InitDefaultsscc_info_Tile_GameState_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::GameState::_Tile_default_instance_;
    new (ptr) ::GameState::Tile();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_Tile_GameState_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_Tile_GameState_2eproto}, {
      &scc_info_Vec2i_GameState_2eproto.base,
      &scc_info_PlayerRef_GameState_2eproto.base,
      &scc_info_CardRef_GameState_2eproto.base,}};

static void InitDefaultsscc_info_TileRef_GameState_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::GameState::_TileRef_default_instance_;
    new (ptr) ::GameState::TileRef();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TileRef_GameState_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_TileRef_GameState_2eproto}, {
      &scc_info_Path_GameState_2eproto.base,}};

static void InitDefaultsscc_info_Vec2i_GameState_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::GameState::_Vec2i_default_instance_;
    new (ptr) ::GameState::Vec2i();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Vec2i_GameState_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Vec2i_GameState_2eproto}, {}};

static void InitDefaultsscc_info_Vec2iRef_GameState_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::GameState::_Vec2iRef_default_instance_;
    new (ptr) ::GameState::Vec2iRef();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Vec2iRef_GameState_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Vec2iRef_GameState_2eproto}, {
      &scc_info_Path_GameState_2eproto.base,}};

static void InitDefaultsscc_info_Vec2iValue_GameState_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::GameState::_Vec2iValue_default_instance_;
    new (ptr) ::GameState::Vec2iValue();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Vec2iValue_GameState_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_Vec2iValue_GameState_2eproto}, {
      &scc_info_Vec2i_GameState_2eproto.base,
      &scc_info_Vec2iRef_GameState_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_GameState_2eproto[23];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_GameState_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_GameState_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_GameState_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::GameState::Path, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::GameState::Path, fieldindex_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::GameState::Integer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::GameState::Integer, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::GameState::Vec2i, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::GameState::Vec2i, x_),
  PROTOBUF_FIELD_OFFSET(::GameState::Vec2i, y_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::GameState::PlayerRef, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::GameState::PlayerRef, objectpath_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::GameState::CardRef, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::GameState::CardRef, objectpath_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::GameState::TileRef, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::GameState::TileRef, objectpath_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::GameState::IntegerRef, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::GameState::IntegerRef, objectpath_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::GameState::Vec2iRef, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::GameState::Vec2iRef, objectpath_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::GameState::IntegerValue, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::GameState::IntegerValue, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::GameState::IntegerValue, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::GameState::Vec2iValue, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::GameState::Vec2iValue, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::GameState::Vec2iValue, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::GameState::EntityRef, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::GameState::EntityRef, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::GameState::EntityRef, entity_ref_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::GameState::EntityValue, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::GameState::EntityValue, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::GameState::EntityValue, entity_val_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::GameState::Player_Stats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::GameState::Player_Stats, health_),
  PROTOBUF_FIELD_OFFSET(::GameState::Player_Stats, actions_),
  PROTOBUF_FIELD_OFFSET(::GameState::Player_Stats, power_),
  PROTOBUF_FIELD_OFFSET(::GameState::Player_Stats, slow_),
  PROTOBUF_FIELD_OFFSET(::GameState::Player_Stats, silence_),
  PROTOBUF_FIELD_OFFSET(::GameState::Player_Stats, disarm_),
  PROTOBUF_FIELD_OFFSET(::GameState::Player_Stats, initiative_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::GameState::Player, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::GameState::Player, displayname_),
  PROTOBUF_FIELD_OFFSET(::GameState::Player, uid_),
  PROTOBUF_FIELD_OFFSET(::GameState::Player, field_),
  PROTOBUF_FIELD_OFFSET(::GameState::Player, hand_),
  PROTOBUF_FIELD_OFFSET(::GameState::Player, deck_),
  PROTOBUF_FIELD_OFFSET(::GameState::Player, discard_),
  PROTOBUF_FIELD_OFFSET(::GameState::Player, feats_),
  PROTOBUF_FIELD_OFFSET(::GameState::Player, state_),
  PROTOBUF_FIELD_OFFSET(::GameState::Player, maxstate_),
  PROTOBUF_FIELD_OFFSET(::GameState::Player, position_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::GameState::Tile, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::GameState::Tile, position_),
  PROTOBUF_FIELD_OFFSET(::GameState::Tile, terrain_),
  PROTOBUF_FIELD_OFFSET(::GameState::Tile, players_),
  PROTOBUF_FIELD_OFFSET(::GameState::Tile, cards_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::GameState::Card, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::GameState::Card, name_),
  PROTOBUF_FIELD_OFFSET(::GameState::Card, archetype_),
  PROTOBUF_FIELD_OFFSET(::GameState::Card, ultimate_),
  PROTOBUF_FIELD_OFFSET(::GameState::Card, feat_),
  PROTOBUF_FIELD_OFFSET(::GameState::Card, basicaction_),
  PROTOBUF_FIELD_OFFSET(::GameState::Card, colors_),
  PROTOBUF_FIELD_OFFSET(::GameState::Card, owner_),
  PROTOBUF_FIELD_OFFSET(::GameState::Card, controller_),
  PROTOBUF_FIELD_OFFSET(::GameState::Card, actioncost_),
  PROTOBUF_FIELD_OFFSET(::GameState::Card, powercost_),
  PROTOBUF_FIELD_OFFSET(::GameState::Card, range_),
  PROTOBUF_FIELD_OFFSET(::GameState::Card, attached_),
  PROTOBUF_FIELD_OFFSET(::GameState::Card, affectedbyslow_),
  PROTOBUF_FIELD_OFFSET(::GameState::Card, affectedbysilence_),
  PROTOBUF_FIELD_OFFSET(::GameState::Card, affectedbydisarm_),
  PROTOBUF_FIELD_OFFSET(::GameState::Card, omnipresenteffect_),
  PROTOBUF_FIELD_OFFSET(::GameState::Card, passiveeffect_),
  PROTOBUF_FIELD_OFFSET(::GameState::Card, feateffect_),
  PROTOBUF_FIELD_OFFSET(::GameState::Card, playeffect_),
  PROTOBUF_FIELD_OFFSET(::GameState::Card, resolveeffect_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::GameState::Team, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::GameState::Team, players_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::GameState::SetMutation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::GameState::SetMutation, object_),
  PROTOBUF_FIELD_OFFSET(::GameState::SetMutation, newvalue_),
  PROTOBUF_FIELD_OFFSET(::GameState::SetMutation, oldvalue_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::GameState::RemoveMutation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::GameState::RemoveMutation, object_),
  PROTOBUF_FIELD_OFFSET(::GameState::RemoveMutation, oldvalue_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::GameState::InsertMutation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::GameState::InsertMutation, object_),
  PROTOBUF_FIELD_OFFSET(::GameState::InsertMutation, newvalue_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::GameState::Mutation, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::GameState::Mutation, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::GameState::Mutation, mutation_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::GameState::GameState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::GameState::GameState, players_),
  PROTOBUF_FIELD_OFFSET(::GameState::GameState, cards_),
  PROTOBUF_FIELD_OFFSET(::GameState::GameState, tiles_),
  PROTOBUF_FIELD_OFFSET(::GameState::GameState, teams_),
  PROTOBUF_FIELD_OFFSET(::GameState::GameState, turnnumber_),
  PROTOBUF_FIELD_OFFSET(::GameState::GameState, stack_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::GameState::GameInstance, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::GameState::GameInstance, gamestate_),
  PROTOBUF_FIELD_OFFSET(::GameState::GameInstance, history_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::GameState::Path)},
  { 6, -1, sizeof(::GameState::Integer)},
  { 12, -1, sizeof(::GameState::Vec2i)},
  { 19, -1, sizeof(::GameState::PlayerRef)},
  { 25, -1, sizeof(::GameState::CardRef)},
  { 31, -1, sizeof(::GameState::TileRef)},
  { 37, -1, sizeof(::GameState::IntegerRef)},
  { 43, -1, sizeof(::GameState::Vec2iRef)},
  { 49, -1, sizeof(::GameState::IntegerValue)},
  { 57, -1, sizeof(::GameState::Vec2iValue)},
  { 65, -1, sizeof(::GameState::EntityRef)},
  { 74, -1, sizeof(::GameState::EntityValue)},
  { 87, -1, sizeof(::GameState::Player_Stats)},
  { 99, -1, sizeof(::GameState::Player)},
  { 114, -1, sizeof(::GameState::Tile)},
  { 123, -1, sizeof(::GameState::Card)},
  { 148, -1, sizeof(::GameState::Team)},
  { 154, -1, sizeof(::GameState::SetMutation)},
  { 162, -1, sizeof(::GameState::RemoveMutation)},
  { 169, -1, sizeof(::GameState::InsertMutation)},
  { 176, -1, sizeof(::GameState::Mutation)},
  { 185, -1, sizeof(::GameState::GameState)},
  { 196, -1, sizeof(::GameState::GameInstance)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::GameState::_Path_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::GameState::_Integer_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::GameState::_Vec2i_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::GameState::_PlayerRef_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::GameState::_CardRef_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::GameState::_TileRef_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::GameState::_IntegerRef_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::GameState::_Vec2iRef_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::GameState::_IntegerValue_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::GameState::_Vec2iValue_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::GameState::_EntityRef_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::GameState::_EntityValue_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::GameState::_Player_Stats_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::GameState::_Player_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::GameState::_Tile_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::GameState::_Card_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::GameState::_Team_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::GameState::_SetMutation_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::GameState::_RemoveMutation_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::GameState::_InsertMutation_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::GameState::_Mutation_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::GameState::_GameState_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::GameState::_GameInstance_default_instance_),
};

const char descriptor_table_protodef_GameState_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\017GameState.proto\022\tGameState\032\013Types.prot"
  "o\032\rEffects.proto\"\032\n\004Path\022\022\n\nFieldIndex\030\001"
  " \003(\005\"\030\n\007Integer\022\r\n\005Value\030\001 \001(\005\"\035\n\005Vec2i\022"
  "\t\n\001X\030\001 \001(\005\022\t\n\001Y\030\002 \001(\005\"0\n\tPlayerRef\022#\n\nOb"
  "jectPath\030\001 \001(\0132\017.GameState.Path\".\n\007CardR"
  "ef\022#\n\nObjectPath\030\001 \001(\0132\017.GameState.Path\""
  ".\n\007TileRef\022#\n\nObjectPath\030\001 \001(\0132\017.GameSta"
  "te.Path\"1\n\nIntegerRef\022#\n\nObjectPath\030\001 \001("
  "\0132\017.GameState.Path\"/\n\010Vec2iRef\022#\n\nObject"
  "Path\030\001 \001(\0132\017.GameState.Path\"N\n\014IntegerVa"
  "lue\022\017\n\005Value\030\001 \001(\005H\000\022$\n\003Ref\030\002 \001(\0132\025.Game"
  "State.IntegerRefH\000B\007\n\005value\"\\\n\nVec2iValu"
  "e\022!\n\005Value\030\001 \001(\0132\020.GameState.Vec2iH\000\022\"\n\003"
  "Ref\030\002 \001(\0132\023.GameState.Vec2iRefH\000B\007\n\005valu"
  "e\"\211\001\n\tEntityRef\022&\n\006Player\030\001 \001(\0132\024.GameSt"
  "ate.PlayerRefH\000\022\"\n\004Card\030\002 \001(\0132\022.GameStat"
  "e.CardRefH\000\022\"\n\004Tile\030\003 \001(\0132\022.GameState.Ti"
  "leRefH\000B\014\n\nentity_ref\"\235\002\n\013EntityValue\022&\n"
  "\006Player\030\001 \001(\0132\024.GameState.PlayerRefH\000\022\"\n"
  "\004Card\030\002 \001(\0132\022.GameState.CardRefH\000\022\"\n\004Til"
  "e\030\003 \001(\0132\022.GameState.TileRefH\000\022(\n\007Integer"
  "\030\004 \001(\0132\025.GameState.IntegerRefH\000\022\022\n\010IntVa"
  "lue\030\005 \001(\005H\000\022&\n\nVec2iValue\030\006 \001(\0132\020.GameSt"
  "ate.Vec2iH\000\022*\n\014TerrainValue\030\007 \001(\0162\022.Type"
  "s.TerrainTypeH\000B\014\n\nentity_val\"\361\004\n\006Player"
  "\022\023\n\013DisplayName\030\001 \001(\t\022\013\n\003UID\030\002 \001(\t\022!\n\005Fi"
  "eld\030\003 \003(\0132\022.GameState.CardRef\022 \n\004Hand\030\004 "
  "\003(\0132\022.GameState.CardRef\022 \n\004Deck\030\005 \003(\0132\022."
  "GameState.CardRef\022#\n\007Discard\030\006 \003(\0132\022.Gam"
  "eState.CardRef\022!\n\005Feats\030\007 \003(\0132\022.GameStat"
  "e.CardRef\022&\n\005State\030\010 \001(\0132\027.GameState.Pla"
  "yer.Stats\022)\n\010MaxState\030\t \001(\0132\027.GameState."
  "Player.Stats\022%\n\010Position\030\n \001(\0132\023.GameSta"
  "te.Vec2iRef\032\233\002\n\005Stats\022%\n\006Health\030\001 \001(\0132\025."
  "GameState.IntegerRef\022&\n\007Actions\030\002 \001(\0132\025."
  "GameState.IntegerRef\022$\n\005Power\030\003 \001(\0132\025.Ga"
  "meState.IntegerRef\022#\n\004Slow\030\004 \001(\0132\025.GameS"
  "tate.IntegerRef\022&\n\007Silence\030\005 \001(\0132\025.GameS"
  "tate.IntegerRef\022%\n\006Disarm\030\006 \001(\0132\025.GameSt"
  "ate.IntegerRef\022)\n\nInitiative\030\007 \001(\0132\025.Gam"
  "eState.IntegerRef\"\231\001\n\004Tile\022\"\n\010Position\030\001"
  " \001(\0132\020.GameState.Vec2i\022#\n\007Terrain\030\002 \001(\0162"
  "\022.Types.TerrainType\022%\n\007Players\030\003 \003(\0132\024.G"
  "ameState.PlayerRef\022!\n\005Cards\030\004 \003(\0132\022.Game"
  "State.CardRef\"\250\006\n\004Card\022\014\n\004Name\030\001 \001(\t\022\021\n\t"
  "Archetype\030\002 \001(\t\022\020\n\010Ultimate\030\003 \001(\010\022\014\n\004Fea"
  "t\030\004 \001(\010\022\023\n\013BasicAction\030\005 \001(\010\022%\n\006Colors\030\006"
  " \003(\0162\025.GameState.Card.Color\022#\n\005Owner\030\007 \001"
  "(\0132\024.GameState.PlayerRef\022(\n\nController\030\010"
  " \001(\0132\024.GameState.PlayerRef\022)\n\nActionCost"
  "\030\t \001(\0132\025.GameState.IntegerRef\022(\n\tPowerCo"
  "st\030\n \001(\0132\025.GameState.IntegerRef\022$\n\005Range"
  "\030\013 \001(\0132\025.GameState.IntegerRef\022&\n\010Attache"
  "d\030\014 \001(\0132\024.GameState.EntityRef\022-\n\016Affecte"
  "dBySlow\030\r \001(\0132\025.GameState.IntegerRef\0220\n\021"
  "AffectedBySilence\030\016 \001(\0132\025.GameState.Inte"
  "gerRef\022/\n\020AffectedByDisarm\030\017 \001(\0132\025.GameS"
  "tate.IntegerRef\022.\n\021OmniPresentEffect\030\020 \001"
  "(\0132\023.Effects.CardEffect\022*\n\rPassiveEffect"
  "\030\021 \001(\0132\023.Effects.CardEffect\022\'\n\nFeatEffec"
  "t\030\022 \001(\0132\023.Effects.CardEffect\022\'\n\nPlayEffe"
  "ct\030\023 \001(\0132\023.Effects.CardEffect\022*\n\rResolve"
  "Effect\030\024 \001(\0132\023.Effects.CardEffect\"E\n\005Col"
  "or\022\010\n\004GRAY\020\000\022\t\n\005BLACK\020\001\022\007\n\003RED\020\002\022\t\n\005GREE"
  "N\020\003\022\010\n\004BLUE\020\004\022\t\n\005WHITE\020\005\"-\n\004Team\022%\n\007Play"
  "ers\030\001 \003(\0132\024.GameState.PlayerRef\"\207\001\n\013SetM"
  "utation\022$\n\006Object\030\001 \001(\0132\024.GameState.Enti"
  "tyRef\022(\n\010NewValue\030\002 \001(\0132\026.GameState.Enti"
  "tyValue\022(\n\010OldValue\030\003 \001(\0132\026.GameState.En"
  "tityValue\"`\n\016RemoveMutation\022$\n\006Object\030\001 "
  "\001(\0132\024.GameState.EntityRef\022(\n\010OldValue\030\002 "
  "\001(\0132\026.GameState.EntityValue\"`\n\016InsertMut"
  "ation\022$\n\006Object\030\001 \001(\0132\024.GameState.Entity"
  "Ref\022(\n\010NewValue\030\002 \001(\0132\026.GameState.Entity"
  "Value\"\227\001\n\010Mutation\022%\n\003Set\030\001 \001(\0132\026.GameSt"
  "ate.SetMutationH\000\022+\n\006Remove\030\002 \001(\0132\031.Game"
  "State.RemoveMutationH\000\022+\n\006Insert\030\003 \001(\0132\031"
  ".GameState.InsertMutationH\000B\n\n\010mutation\""
  "\327\001\n\tGameState\022\"\n\007Players\030\001 \003(\0132\021.GameSta"
  "te.Player\022\036\n\005Cards\030\002 \003(\0132\017.GameState.Car"
  "d\022\036\n\005Tiles\030\003 \003(\0132\017.GameState.Tile\022\036\n\005Tea"
  "ms\030\004 \003(\0132\017.GameState.Team\022&\n\nTurnNumber\030"
  "\006 \001(\0132\022.GameState.Integer\022\036\n\005Stack\030\007 \003(\013"
  "2\017.GameState.Card\"]\n\014GameInstance\022\'\n\tGam"
  "eState\030\001 \001(\0132\024.GameState.GameState\022$\n\007Hi"
  "story\030\002 \003(\0132\023.GameState.Mutationb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_GameState_2eproto_deps[2] = {
  &::descriptor_table_Effects_2eproto,
  &::descriptor_table_Types_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_GameState_2eproto_sccs[23] = {
  &scc_info_Card_GameState_2eproto.base,
  &scc_info_CardRef_GameState_2eproto.base,
  &scc_info_EntityRef_GameState_2eproto.base,
  &scc_info_EntityValue_GameState_2eproto.base,
  &scc_info_GameInstance_GameState_2eproto.base,
  &scc_info_GameState_GameState_2eproto.base,
  &scc_info_InsertMutation_GameState_2eproto.base,
  &scc_info_Integer_GameState_2eproto.base,
  &scc_info_IntegerRef_GameState_2eproto.base,
  &scc_info_IntegerValue_GameState_2eproto.base,
  &scc_info_Mutation_GameState_2eproto.base,
  &scc_info_Path_GameState_2eproto.base,
  &scc_info_Player_GameState_2eproto.base,
  &scc_info_Player_Stats_GameState_2eproto.base,
  &scc_info_PlayerRef_GameState_2eproto.base,
  &scc_info_RemoveMutation_GameState_2eproto.base,
  &scc_info_SetMutation_GameState_2eproto.base,
  &scc_info_Team_GameState_2eproto.base,
  &scc_info_Tile_GameState_2eproto.base,
  &scc_info_TileRef_GameState_2eproto.base,
  &scc_info_Vec2i_GameState_2eproto.base,
  &scc_info_Vec2iRef_GameState_2eproto.base,
  &scc_info_Vec2iValue_GameState_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_GameState_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_GameState_2eproto = {
  false, false, descriptor_table_protodef_GameState_2eproto, "GameState.proto", 3440,
  &descriptor_table_GameState_2eproto_once, descriptor_table_GameState_2eproto_sccs, descriptor_table_GameState_2eproto_deps, 23, 2,
  schemas, file_default_instances, TableStruct_GameState_2eproto::offsets,
  file_level_metadata_GameState_2eproto, 23, file_level_enum_descriptors_GameState_2eproto, file_level_service_descriptors_GameState_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_GameState_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_GameState_2eproto)), true);
namespace GameState {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Card_Color_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_GameState_2eproto);
  return file_level_enum_descriptors_GameState_2eproto[0];
}
bool Card_Color_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Card_Color Card::GRAY;
constexpr Card_Color Card::BLACK;
constexpr Card_Color Card::RED;
constexpr Card_Color Card::GREEN;
constexpr Card_Color Card::BLUE;
constexpr Card_Color Card::WHITE;
constexpr Card_Color Card::Color_MIN;
constexpr Card_Color Card::Color_MAX;
constexpr int Card::Color_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

class Path::_Internal {
 public:
};

Path::Path(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  fieldindex_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:GameState.Path)
}
Path::Path(const Path& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      fieldindex_(from.fieldindex_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:GameState.Path)
}

void Path::SharedCtor() {
}

Path::~Path() {
  // @@protoc_insertion_point(destructor:GameState.Path)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Path::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Path::ArenaDtor(void* object) {
  Path* _this = reinterpret_cast< Path* >(object);
  (void)_this;
}
void Path::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Path::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Path& Path::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Path_GameState_2eproto.base);
  return *internal_default_instance();
}


void Path::Clear() {
// @@protoc_insertion_point(message_clear_start:GameState.Path)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  fieldindex_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Path::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated int32 FieldIndex = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_fieldindex(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8) {
          _internal_add_fieldindex(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Path::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GameState.Path)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 FieldIndex = 1;
  {
    int byte_size = _fieldindex_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          1, _internal_fieldindex(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameState.Path)
  return target;
}

size_t Path::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameState.Path)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 FieldIndex = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->fieldindex_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _fieldindex_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Path::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameState.Path)
  GOOGLE_DCHECK_NE(&from, this);
  const Path* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Path>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameState.Path)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameState.Path)
    MergeFrom(*source);
  }
}

void Path::MergeFrom(const Path& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameState.Path)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  fieldindex_.MergeFrom(from.fieldindex_);
}

void Path::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameState.Path)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Path::CopyFrom(const Path& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameState.Path)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Path::IsInitialized() const {
  return true;
}

void Path::InternalSwap(Path* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  fieldindex_.InternalSwap(&other->fieldindex_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Path::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Integer::_Internal {
 public:
};

Integer::Integer(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:GameState.Integer)
}
Integer::Integer(const Integer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  value_ = from.value_;
  // @@protoc_insertion_point(copy_constructor:GameState.Integer)
}

void Integer::SharedCtor() {
  value_ = 0;
}

Integer::~Integer() {
  // @@protoc_insertion_point(destructor:GameState.Integer)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Integer::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Integer::ArenaDtor(void* object) {
  Integer* _this = reinterpret_cast< Integer* >(object);
  (void)_this;
}
void Integer::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Integer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Integer& Integer::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Integer_GameState_2eproto.base);
  return *internal_default_instance();
}


void Integer::Clear() {
// @@protoc_insertion_point(message_clear_start:GameState.Integer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Integer::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 Value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Integer::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GameState.Integer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 Value = 1;
  if (this->value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameState.Integer)
  return target;
}

size_t Integer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameState.Integer)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 Value = 1;
  if (this->value() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Integer::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameState.Integer)
  GOOGLE_DCHECK_NE(&from, this);
  const Integer* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Integer>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameState.Integer)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameState.Integer)
    MergeFrom(*source);
  }
}

void Integer::MergeFrom(const Integer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameState.Integer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.value() != 0) {
    _internal_set_value(from._internal_value());
  }
}

void Integer::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameState.Integer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Integer::CopyFrom(const Integer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameState.Integer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Integer::IsInitialized() const {
  return true;
}

void Integer::InternalSwap(Integer* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(value_, other->value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Integer::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Vec2i::_Internal {
 public:
};

Vec2i::Vec2i(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:GameState.Vec2i)
}
Vec2i::Vec2i(const Vec2i& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&x_)) + sizeof(y_));
  // @@protoc_insertion_point(copy_constructor:GameState.Vec2i)
}

void Vec2i::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&x_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&y_) -
      reinterpret_cast<char*>(&x_)) + sizeof(y_));
}

Vec2i::~Vec2i() {
  // @@protoc_insertion_point(destructor:GameState.Vec2i)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Vec2i::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Vec2i::ArenaDtor(void* object) {
  Vec2i* _this = reinterpret_cast< Vec2i* >(object);
  (void)_this;
}
void Vec2i::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Vec2i::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Vec2i& Vec2i::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Vec2i_GameState_2eproto.base);
  return *internal_default_instance();
}


void Vec2i::Clear() {
// @@protoc_insertion_point(message_clear_start:GameState.Vec2i)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&y_) -
      reinterpret_cast<char*>(&x_)) + sizeof(y_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Vec2i::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 X = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 Y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Vec2i::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GameState.Vec2i)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 X = 1;
  if (this->x() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_x(), target);
  }

  // int32 Y = 2;
  if (this->y() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_y(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameState.Vec2i)
  return target;
}

size_t Vec2i::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameState.Vec2i)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 X = 1;
  if (this->x() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_x());
  }

  // int32 Y = 2;
  if (this->y() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_y());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Vec2i::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameState.Vec2i)
  GOOGLE_DCHECK_NE(&from, this);
  const Vec2i* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Vec2i>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameState.Vec2i)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameState.Vec2i)
    MergeFrom(*source);
  }
}

void Vec2i::MergeFrom(const Vec2i& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameState.Vec2i)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.x() != 0) {
    _internal_set_x(from._internal_x());
  }
  if (from.y() != 0) {
    _internal_set_y(from._internal_y());
  }
}

void Vec2i::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameState.Vec2i)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Vec2i::CopyFrom(const Vec2i& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameState.Vec2i)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vec2i::IsInitialized() const {
  return true;
}

void Vec2i::InternalSwap(Vec2i* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Vec2i, y_)
      + sizeof(Vec2i::y_)
      - PROTOBUF_FIELD_OFFSET(Vec2i, x_)>(
          reinterpret_cast<char*>(&x_),
          reinterpret_cast<char*>(&other->x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Vec2i::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class PlayerRef::_Internal {
 public:
  static const ::GameState::Path& objectpath(const PlayerRef* msg);
};

const ::GameState::Path&
PlayerRef::_Internal::objectpath(const PlayerRef* msg) {
  return *msg->objectpath_;
}
PlayerRef::PlayerRef(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:GameState.PlayerRef)
}
PlayerRef::PlayerRef(const PlayerRef& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_objectpath()) {
    objectpath_ = new ::GameState::Path(*from.objectpath_);
  } else {
    objectpath_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:GameState.PlayerRef)
}

void PlayerRef::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PlayerRef_GameState_2eproto.base);
  objectpath_ = nullptr;
}

PlayerRef::~PlayerRef() {
  // @@protoc_insertion_point(destructor:GameState.PlayerRef)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PlayerRef::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete objectpath_;
}

void PlayerRef::ArenaDtor(void* object) {
  PlayerRef* _this = reinterpret_cast< PlayerRef* >(object);
  (void)_this;
}
void PlayerRef::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PlayerRef::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PlayerRef& PlayerRef::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PlayerRef_GameState_2eproto.base);
  return *internal_default_instance();
}


void PlayerRef::Clear() {
// @@protoc_insertion_point(message_clear_start:GameState.PlayerRef)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && objectpath_ != nullptr) {
    delete objectpath_;
  }
  objectpath_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PlayerRef::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .GameState.Path ObjectPath = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_objectpath(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PlayerRef::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GameState.PlayerRef)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .GameState.Path ObjectPath = 1;
  if (this->has_objectpath()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::objectpath(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameState.PlayerRef)
  return target;
}

size_t PlayerRef::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameState.PlayerRef)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .GameState.Path ObjectPath = 1;
  if (this->has_objectpath()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *objectpath_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PlayerRef::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameState.PlayerRef)
  GOOGLE_DCHECK_NE(&from, this);
  const PlayerRef* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PlayerRef>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameState.PlayerRef)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameState.PlayerRef)
    MergeFrom(*source);
  }
}

void PlayerRef::MergeFrom(const PlayerRef& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameState.PlayerRef)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_objectpath()) {
    _internal_mutable_objectpath()->::GameState::Path::MergeFrom(from._internal_objectpath());
  }
}

void PlayerRef::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameState.PlayerRef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerRef::CopyFrom(const PlayerRef& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameState.PlayerRef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerRef::IsInitialized() const {
  return true;
}

void PlayerRef::InternalSwap(PlayerRef* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(objectpath_, other->objectpath_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PlayerRef::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CardRef::_Internal {
 public:
  static const ::GameState::Path& objectpath(const CardRef* msg);
};

const ::GameState::Path&
CardRef::_Internal::objectpath(const CardRef* msg) {
  return *msg->objectpath_;
}
CardRef::CardRef(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:GameState.CardRef)
}
CardRef::CardRef(const CardRef& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_objectpath()) {
    objectpath_ = new ::GameState::Path(*from.objectpath_);
  } else {
    objectpath_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:GameState.CardRef)
}

void CardRef::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CardRef_GameState_2eproto.base);
  objectpath_ = nullptr;
}

CardRef::~CardRef() {
  // @@protoc_insertion_point(destructor:GameState.CardRef)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CardRef::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete objectpath_;
}

void CardRef::ArenaDtor(void* object) {
  CardRef* _this = reinterpret_cast< CardRef* >(object);
  (void)_this;
}
void CardRef::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CardRef::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CardRef& CardRef::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CardRef_GameState_2eproto.base);
  return *internal_default_instance();
}


void CardRef::Clear() {
// @@protoc_insertion_point(message_clear_start:GameState.CardRef)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && objectpath_ != nullptr) {
    delete objectpath_;
  }
  objectpath_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CardRef::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .GameState.Path ObjectPath = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_objectpath(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CardRef::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GameState.CardRef)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .GameState.Path ObjectPath = 1;
  if (this->has_objectpath()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::objectpath(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameState.CardRef)
  return target;
}

size_t CardRef::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameState.CardRef)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .GameState.Path ObjectPath = 1;
  if (this->has_objectpath()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *objectpath_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CardRef::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameState.CardRef)
  GOOGLE_DCHECK_NE(&from, this);
  const CardRef* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CardRef>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameState.CardRef)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameState.CardRef)
    MergeFrom(*source);
  }
}

void CardRef::MergeFrom(const CardRef& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameState.CardRef)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_objectpath()) {
    _internal_mutable_objectpath()->::GameState::Path::MergeFrom(from._internal_objectpath());
  }
}

void CardRef::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameState.CardRef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CardRef::CopyFrom(const CardRef& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameState.CardRef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CardRef::IsInitialized() const {
  return true;
}

void CardRef::InternalSwap(CardRef* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(objectpath_, other->objectpath_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CardRef::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class TileRef::_Internal {
 public:
  static const ::GameState::Path& objectpath(const TileRef* msg);
};

const ::GameState::Path&
TileRef::_Internal::objectpath(const TileRef* msg) {
  return *msg->objectpath_;
}
TileRef::TileRef(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:GameState.TileRef)
}
TileRef::TileRef(const TileRef& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_objectpath()) {
    objectpath_ = new ::GameState::Path(*from.objectpath_);
  } else {
    objectpath_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:GameState.TileRef)
}

void TileRef::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TileRef_GameState_2eproto.base);
  objectpath_ = nullptr;
}

TileRef::~TileRef() {
  // @@protoc_insertion_point(destructor:GameState.TileRef)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TileRef::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete objectpath_;
}

void TileRef::ArenaDtor(void* object) {
  TileRef* _this = reinterpret_cast< TileRef* >(object);
  (void)_this;
}
void TileRef::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TileRef::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TileRef& TileRef::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TileRef_GameState_2eproto.base);
  return *internal_default_instance();
}


void TileRef::Clear() {
// @@protoc_insertion_point(message_clear_start:GameState.TileRef)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && objectpath_ != nullptr) {
    delete objectpath_;
  }
  objectpath_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TileRef::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .GameState.Path ObjectPath = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_objectpath(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TileRef::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GameState.TileRef)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .GameState.Path ObjectPath = 1;
  if (this->has_objectpath()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::objectpath(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameState.TileRef)
  return target;
}

size_t TileRef::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameState.TileRef)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .GameState.Path ObjectPath = 1;
  if (this->has_objectpath()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *objectpath_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TileRef::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameState.TileRef)
  GOOGLE_DCHECK_NE(&from, this);
  const TileRef* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TileRef>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameState.TileRef)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameState.TileRef)
    MergeFrom(*source);
  }
}

void TileRef::MergeFrom(const TileRef& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameState.TileRef)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_objectpath()) {
    _internal_mutable_objectpath()->::GameState::Path::MergeFrom(from._internal_objectpath());
  }
}

void TileRef::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameState.TileRef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TileRef::CopyFrom(const TileRef& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameState.TileRef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TileRef::IsInitialized() const {
  return true;
}

void TileRef::InternalSwap(TileRef* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(objectpath_, other->objectpath_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TileRef::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class IntegerRef::_Internal {
 public:
  static const ::GameState::Path& objectpath(const IntegerRef* msg);
};

const ::GameState::Path&
IntegerRef::_Internal::objectpath(const IntegerRef* msg) {
  return *msg->objectpath_;
}
IntegerRef::IntegerRef(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:GameState.IntegerRef)
}
IntegerRef::IntegerRef(const IntegerRef& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_objectpath()) {
    objectpath_ = new ::GameState::Path(*from.objectpath_);
  } else {
    objectpath_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:GameState.IntegerRef)
}

void IntegerRef::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_IntegerRef_GameState_2eproto.base);
  objectpath_ = nullptr;
}

IntegerRef::~IntegerRef() {
  // @@protoc_insertion_point(destructor:GameState.IntegerRef)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void IntegerRef::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete objectpath_;
}

void IntegerRef::ArenaDtor(void* object) {
  IntegerRef* _this = reinterpret_cast< IntegerRef* >(object);
  (void)_this;
}
void IntegerRef::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void IntegerRef::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const IntegerRef& IntegerRef::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_IntegerRef_GameState_2eproto.base);
  return *internal_default_instance();
}


void IntegerRef::Clear() {
// @@protoc_insertion_point(message_clear_start:GameState.IntegerRef)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && objectpath_ != nullptr) {
    delete objectpath_;
  }
  objectpath_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IntegerRef::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .GameState.Path ObjectPath = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_objectpath(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* IntegerRef::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GameState.IntegerRef)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .GameState.Path ObjectPath = 1;
  if (this->has_objectpath()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::objectpath(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameState.IntegerRef)
  return target;
}

size_t IntegerRef::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameState.IntegerRef)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .GameState.Path ObjectPath = 1;
  if (this->has_objectpath()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *objectpath_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IntegerRef::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameState.IntegerRef)
  GOOGLE_DCHECK_NE(&from, this);
  const IntegerRef* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<IntegerRef>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameState.IntegerRef)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameState.IntegerRef)
    MergeFrom(*source);
  }
}

void IntegerRef::MergeFrom(const IntegerRef& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameState.IntegerRef)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_objectpath()) {
    _internal_mutable_objectpath()->::GameState::Path::MergeFrom(from._internal_objectpath());
  }
}

void IntegerRef::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameState.IntegerRef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IntegerRef::CopyFrom(const IntegerRef& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameState.IntegerRef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IntegerRef::IsInitialized() const {
  return true;
}

void IntegerRef::InternalSwap(IntegerRef* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(objectpath_, other->objectpath_);
}

::PROTOBUF_NAMESPACE_ID::Metadata IntegerRef::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Vec2iRef::_Internal {
 public:
  static const ::GameState::Path& objectpath(const Vec2iRef* msg);
};

const ::GameState::Path&
Vec2iRef::_Internal::objectpath(const Vec2iRef* msg) {
  return *msg->objectpath_;
}
Vec2iRef::Vec2iRef(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:GameState.Vec2iRef)
}
Vec2iRef::Vec2iRef(const Vec2iRef& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_objectpath()) {
    objectpath_ = new ::GameState::Path(*from.objectpath_);
  } else {
    objectpath_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:GameState.Vec2iRef)
}

void Vec2iRef::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Vec2iRef_GameState_2eproto.base);
  objectpath_ = nullptr;
}

Vec2iRef::~Vec2iRef() {
  // @@protoc_insertion_point(destructor:GameState.Vec2iRef)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Vec2iRef::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete objectpath_;
}

void Vec2iRef::ArenaDtor(void* object) {
  Vec2iRef* _this = reinterpret_cast< Vec2iRef* >(object);
  (void)_this;
}
void Vec2iRef::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Vec2iRef::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Vec2iRef& Vec2iRef::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Vec2iRef_GameState_2eproto.base);
  return *internal_default_instance();
}


void Vec2iRef::Clear() {
// @@protoc_insertion_point(message_clear_start:GameState.Vec2iRef)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && objectpath_ != nullptr) {
    delete objectpath_;
  }
  objectpath_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Vec2iRef::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .GameState.Path ObjectPath = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_objectpath(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Vec2iRef::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GameState.Vec2iRef)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .GameState.Path ObjectPath = 1;
  if (this->has_objectpath()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::objectpath(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameState.Vec2iRef)
  return target;
}

size_t Vec2iRef::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameState.Vec2iRef)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .GameState.Path ObjectPath = 1;
  if (this->has_objectpath()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *objectpath_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Vec2iRef::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameState.Vec2iRef)
  GOOGLE_DCHECK_NE(&from, this);
  const Vec2iRef* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Vec2iRef>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameState.Vec2iRef)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameState.Vec2iRef)
    MergeFrom(*source);
  }
}

void Vec2iRef::MergeFrom(const Vec2iRef& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameState.Vec2iRef)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_objectpath()) {
    _internal_mutable_objectpath()->::GameState::Path::MergeFrom(from._internal_objectpath());
  }
}

void Vec2iRef::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameState.Vec2iRef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Vec2iRef::CopyFrom(const Vec2iRef& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameState.Vec2iRef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vec2iRef::IsInitialized() const {
  return true;
}

void Vec2iRef::InternalSwap(Vec2iRef* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(objectpath_, other->objectpath_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Vec2iRef::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class IntegerValue::_Internal {
 public:
  static const ::GameState::IntegerRef& ref(const IntegerValue* msg);
};

const ::GameState::IntegerRef&
IntegerValue::_Internal::ref(const IntegerValue* msg) {
  return *msg->value_.ref_;
}
void IntegerValue::set_allocated_ref(::GameState::IntegerRef* ref) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_value();
  if (ref) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(ref);
    if (message_arena != submessage_arena) {
      ref = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ref, submessage_arena);
    }
    set_has_ref();
    value_.ref_ = ref;
  }
  // @@protoc_insertion_point(field_set_allocated:GameState.IntegerValue.Ref)
}
IntegerValue::IntegerValue(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:GameState.IntegerValue)
}
IntegerValue::IntegerValue(const IntegerValue& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_value();
  switch (from.value_case()) {
    case kValue: {
      _internal_set_value(from._internal_value());
      break;
    }
    case kRef: {
      _internal_mutable_ref()->::GameState::IntegerRef::MergeFrom(from._internal_ref());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:GameState.IntegerValue)
}

void IntegerValue::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_IntegerValue_GameState_2eproto.base);
  clear_has_value();
}

IntegerValue::~IntegerValue() {
  // @@protoc_insertion_point(destructor:GameState.IntegerValue)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void IntegerValue::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_value()) {
    clear_value();
  }
}

void IntegerValue::ArenaDtor(void* object) {
  IntegerValue* _this = reinterpret_cast< IntegerValue* >(object);
  (void)_this;
}
void IntegerValue::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void IntegerValue::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const IntegerValue& IntegerValue::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_IntegerValue_GameState_2eproto.base);
  return *internal_default_instance();
}


void IntegerValue::clear_value() {
// @@protoc_insertion_point(one_of_clear_start:GameState.IntegerValue)
  switch (value_case()) {
    case kValue: {
      // No need to clear
      break;
    }
    case kRef: {
      if (GetArena() == nullptr) {
        delete value_.ref_;
      }
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = VALUE_NOT_SET;
}


void IntegerValue::Clear() {
// @@protoc_insertion_point(message_clear_start:GameState.IntegerValue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_value();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IntegerValue::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 Value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _internal_set_value(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .GameState.IntegerRef Ref = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_ref(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* IntegerValue::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GameState.IntegerValue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 Value = 1;
  if (_internal_has_value()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_value(), target);
  }

  // .GameState.IntegerRef Ref = 2;
  if (_internal_has_ref()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::ref(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameState.IntegerValue)
  return target;
}

size_t IntegerValue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameState.IntegerValue)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (value_case()) {
    // int32 Value = 1;
    case kValue: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_value());
      break;
    }
    // .GameState.IntegerRef Ref = 2;
    case kRef: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *value_.ref_);
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IntegerValue::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameState.IntegerValue)
  GOOGLE_DCHECK_NE(&from, this);
  const IntegerValue* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<IntegerValue>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameState.IntegerValue)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameState.IntegerValue)
    MergeFrom(*source);
  }
}

void IntegerValue::MergeFrom(const IntegerValue& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameState.IntegerValue)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.value_case()) {
    case kValue: {
      _internal_set_value(from._internal_value());
      break;
    }
    case kRef: {
      _internal_mutable_ref()->::GameState::IntegerRef::MergeFrom(from._internal_ref());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
}

void IntegerValue::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameState.IntegerValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IntegerValue::CopyFrom(const IntegerValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameState.IntegerValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IntegerValue::IsInitialized() const {
  return true;
}

void IntegerValue::InternalSwap(IntegerValue* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(value_, other->value_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata IntegerValue::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Vec2iValue::_Internal {
 public:
  static const ::GameState::Vec2i& value(const Vec2iValue* msg);
  static const ::GameState::Vec2iRef& ref(const Vec2iValue* msg);
};

const ::GameState::Vec2i&
Vec2iValue::_Internal::value(const Vec2iValue* msg) {
  return *msg->value_.value_;
}
const ::GameState::Vec2iRef&
Vec2iValue::_Internal::ref(const Vec2iValue* msg) {
  return *msg->value_.ref_;
}
void Vec2iValue::set_allocated_value(::GameState::Vec2i* value) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_value();
  if (value) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(value);
    if (message_arena != submessage_arena) {
      value = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, value, submessage_arena);
    }
    set_has_value();
    value_.value_ = value;
  }
  // @@protoc_insertion_point(field_set_allocated:GameState.Vec2iValue.Value)
}
void Vec2iValue::set_allocated_ref(::GameState::Vec2iRef* ref) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_value();
  if (ref) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(ref);
    if (message_arena != submessage_arena) {
      ref = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ref, submessage_arena);
    }
    set_has_ref();
    value_.ref_ = ref;
  }
  // @@protoc_insertion_point(field_set_allocated:GameState.Vec2iValue.Ref)
}
Vec2iValue::Vec2iValue(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:GameState.Vec2iValue)
}
Vec2iValue::Vec2iValue(const Vec2iValue& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_value();
  switch (from.value_case()) {
    case kValue: {
      _internal_mutable_value()->::GameState::Vec2i::MergeFrom(from._internal_value());
      break;
    }
    case kRef: {
      _internal_mutable_ref()->::GameState::Vec2iRef::MergeFrom(from._internal_ref());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:GameState.Vec2iValue)
}

void Vec2iValue::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Vec2iValue_GameState_2eproto.base);
  clear_has_value();
}

Vec2iValue::~Vec2iValue() {
  // @@protoc_insertion_point(destructor:GameState.Vec2iValue)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Vec2iValue::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_value()) {
    clear_value();
  }
}

void Vec2iValue::ArenaDtor(void* object) {
  Vec2iValue* _this = reinterpret_cast< Vec2iValue* >(object);
  (void)_this;
}
void Vec2iValue::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Vec2iValue::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Vec2iValue& Vec2iValue::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Vec2iValue_GameState_2eproto.base);
  return *internal_default_instance();
}


void Vec2iValue::clear_value() {
// @@protoc_insertion_point(one_of_clear_start:GameState.Vec2iValue)
  switch (value_case()) {
    case kValue: {
      if (GetArena() == nullptr) {
        delete value_.value_;
      }
      break;
    }
    case kRef: {
      if (GetArena() == nullptr) {
        delete value_.ref_;
      }
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = VALUE_NOT_SET;
}


void Vec2iValue::Clear() {
// @@protoc_insertion_point(message_clear_start:GameState.Vec2iValue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_value();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Vec2iValue::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .GameState.Vec2i Value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_value(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .GameState.Vec2iRef Ref = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_ref(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Vec2iValue::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GameState.Vec2iValue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .GameState.Vec2i Value = 1;
  if (_internal_has_value()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::value(this), target, stream);
  }

  // .GameState.Vec2iRef Ref = 2;
  if (_internal_has_ref()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::ref(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameState.Vec2iValue)
  return target;
}

size_t Vec2iValue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameState.Vec2iValue)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (value_case()) {
    // .GameState.Vec2i Value = 1;
    case kValue: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *value_.value_);
      break;
    }
    // .GameState.Vec2iRef Ref = 2;
    case kRef: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *value_.ref_);
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Vec2iValue::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameState.Vec2iValue)
  GOOGLE_DCHECK_NE(&from, this);
  const Vec2iValue* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Vec2iValue>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameState.Vec2iValue)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameState.Vec2iValue)
    MergeFrom(*source);
  }
}

void Vec2iValue::MergeFrom(const Vec2iValue& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameState.Vec2iValue)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.value_case()) {
    case kValue: {
      _internal_mutable_value()->::GameState::Vec2i::MergeFrom(from._internal_value());
      break;
    }
    case kRef: {
      _internal_mutable_ref()->::GameState::Vec2iRef::MergeFrom(from._internal_ref());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
}

void Vec2iValue::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameState.Vec2iValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Vec2iValue::CopyFrom(const Vec2iValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameState.Vec2iValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vec2iValue::IsInitialized() const {
  return true;
}

void Vec2iValue::InternalSwap(Vec2iValue* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(value_, other->value_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Vec2iValue::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class EntityRef::_Internal {
 public:
  static const ::GameState::PlayerRef& player(const EntityRef* msg);
  static const ::GameState::CardRef& card(const EntityRef* msg);
  static const ::GameState::TileRef& tile(const EntityRef* msg);
};

const ::GameState::PlayerRef&
EntityRef::_Internal::player(const EntityRef* msg) {
  return *msg->entity_ref_.player_;
}
const ::GameState::CardRef&
EntityRef::_Internal::card(const EntityRef* msg) {
  return *msg->entity_ref_.card_;
}
const ::GameState::TileRef&
EntityRef::_Internal::tile(const EntityRef* msg) {
  return *msg->entity_ref_.tile_;
}
void EntityRef::set_allocated_player(::GameState::PlayerRef* player) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_entity_ref();
  if (player) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(player);
    if (message_arena != submessage_arena) {
      player = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player, submessage_arena);
    }
    set_has_player();
    entity_ref_.player_ = player;
  }
  // @@protoc_insertion_point(field_set_allocated:GameState.EntityRef.Player)
}
void EntityRef::set_allocated_card(::GameState::CardRef* card) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_entity_ref();
  if (card) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(card);
    if (message_arena != submessage_arena) {
      card = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, card, submessage_arena);
    }
    set_has_card();
    entity_ref_.card_ = card;
  }
  // @@protoc_insertion_point(field_set_allocated:GameState.EntityRef.Card)
}
void EntityRef::set_allocated_tile(::GameState::TileRef* tile) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_entity_ref();
  if (tile) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(tile);
    if (message_arena != submessage_arena) {
      tile = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tile, submessage_arena);
    }
    set_has_tile();
    entity_ref_.tile_ = tile;
  }
  // @@protoc_insertion_point(field_set_allocated:GameState.EntityRef.Tile)
}
EntityRef::EntityRef(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:GameState.EntityRef)
}
EntityRef::EntityRef(const EntityRef& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_entity_ref();
  switch (from.entity_ref_case()) {
    case kPlayer: {
      _internal_mutable_player()->::GameState::PlayerRef::MergeFrom(from._internal_player());
      break;
    }
    case kCard: {
      _internal_mutable_card()->::GameState::CardRef::MergeFrom(from._internal_card());
      break;
    }
    case kTile: {
      _internal_mutable_tile()->::GameState::TileRef::MergeFrom(from._internal_tile());
      break;
    }
    case ENTITY_REF_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:GameState.EntityRef)
}

void EntityRef::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_EntityRef_GameState_2eproto.base);
  clear_has_entity_ref();
}

EntityRef::~EntityRef() {
  // @@protoc_insertion_point(destructor:GameState.EntityRef)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void EntityRef::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_entity_ref()) {
    clear_entity_ref();
  }
}

void EntityRef::ArenaDtor(void* object) {
  EntityRef* _this = reinterpret_cast< EntityRef* >(object);
  (void)_this;
}
void EntityRef::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EntityRef::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EntityRef& EntityRef::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EntityRef_GameState_2eproto.base);
  return *internal_default_instance();
}


void EntityRef::clear_entity_ref() {
// @@protoc_insertion_point(one_of_clear_start:GameState.EntityRef)
  switch (entity_ref_case()) {
    case kPlayer: {
      if (GetArena() == nullptr) {
        delete entity_ref_.player_;
      }
      break;
    }
    case kCard: {
      if (GetArena() == nullptr) {
        delete entity_ref_.card_;
      }
      break;
    }
    case kTile: {
      if (GetArena() == nullptr) {
        delete entity_ref_.tile_;
      }
      break;
    }
    case ENTITY_REF_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = ENTITY_REF_NOT_SET;
}


void EntityRef::Clear() {
// @@protoc_insertion_point(message_clear_start:GameState.EntityRef)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_entity_ref();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EntityRef::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .GameState.PlayerRef Player = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_player(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .GameState.CardRef Card = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_card(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .GameState.TileRef Tile = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_tile(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EntityRef::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GameState.EntityRef)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .GameState.PlayerRef Player = 1;
  if (_internal_has_player()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::player(this), target, stream);
  }

  // .GameState.CardRef Card = 2;
  if (_internal_has_card()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::card(this), target, stream);
  }

  // .GameState.TileRef Tile = 3;
  if (_internal_has_tile()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::tile(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameState.EntityRef)
  return target;
}

size_t EntityRef::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameState.EntityRef)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (entity_ref_case()) {
    // .GameState.PlayerRef Player = 1;
    case kPlayer: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *entity_ref_.player_);
      break;
    }
    // .GameState.CardRef Card = 2;
    case kCard: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *entity_ref_.card_);
      break;
    }
    // .GameState.TileRef Tile = 3;
    case kTile: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *entity_ref_.tile_);
      break;
    }
    case ENTITY_REF_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EntityRef::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameState.EntityRef)
  GOOGLE_DCHECK_NE(&from, this);
  const EntityRef* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EntityRef>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameState.EntityRef)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameState.EntityRef)
    MergeFrom(*source);
  }
}

void EntityRef::MergeFrom(const EntityRef& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameState.EntityRef)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.entity_ref_case()) {
    case kPlayer: {
      _internal_mutable_player()->::GameState::PlayerRef::MergeFrom(from._internal_player());
      break;
    }
    case kCard: {
      _internal_mutable_card()->::GameState::CardRef::MergeFrom(from._internal_card());
      break;
    }
    case kTile: {
      _internal_mutable_tile()->::GameState::TileRef::MergeFrom(from._internal_tile());
      break;
    }
    case ENTITY_REF_NOT_SET: {
      break;
    }
  }
}

void EntityRef::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameState.EntityRef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EntityRef::CopyFrom(const EntityRef& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameState.EntityRef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EntityRef::IsInitialized() const {
  return true;
}

void EntityRef::InternalSwap(EntityRef* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(entity_ref_, other->entity_ref_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata EntityRef::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class EntityValue::_Internal {
 public:
  static const ::GameState::PlayerRef& player(const EntityValue* msg);
  static const ::GameState::CardRef& card(const EntityValue* msg);
  static const ::GameState::TileRef& tile(const EntityValue* msg);
  static const ::GameState::IntegerRef& integer(const EntityValue* msg);
  static const ::GameState::Vec2i& vec2ivalue(const EntityValue* msg);
};

const ::GameState::PlayerRef&
EntityValue::_Internal::player(const EntityValue* msg) {
  return *msg->entity_val_.player_;
}
const ::GameState::CardRef&
EntityValue::_Internal::card(const EntityValue* msg) {
  return *msg->entity_val_.card_;
}
const ::GameState::TileRef&
EntityValue::_Internal::tile(const EntityValue* msg) {
  return *msg->entity_val_.tile_;
}
const ::GameState::IntegerRef&
EntityValue::_Internal::integer(const EntityValue* msg) {
  return *msg->entity_val_.integer_;
}
const ::GameState::Vec2i&
EntityValue::_Internal::vec2ivalue(const EntityValue* msg) {
  return *msg->entity_val_.vec2ivalue_;
}
void EntityValue::set_allocated_player(::GameState::PlayerRef* player) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_entity_val();
  if (player) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(player);
    if (message_arena != submessage_arena) {
      player = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player, submessage_arena);
    }
    set_has_player();
    entity_val_.player_ = player;
  }
  // @@protoc_insertion_point(field_set_allocated:GameState.EntityValue.Player)
}
void EntityValue::set_allocated_card(::GameState::CardRef* card) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_entity_val();
  if (card) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(card);
    if (message_arena != submessage_arena) {
      card = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, card, submessage_arena);
    }
    set_has_card();
    entity_val_.card_ = card;
  }
  // @@protoc_insertion_point(field_set_allocated:GameState.EntityValue.Card)
}
void EntityValue::set_allocated_tile(::GameState::TileRef* tile) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_entity_val();
  if (tile) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(tile);
    if (message_arena != submessage_arena) {
      tile = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tile, submessage_arena);
    }
    set_has_tile();
    entity_val_.tile_ = tile;
  }
  // @@protoc_insertion_point(field_set_allocated:GameState.EntityValue.Tile)
}
void EntityValue::set_allocated_integer(::GameState::IntegerRef* integer) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_entity_val();
  if (integer) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(integer);
    if (message_arena != submessage_arena) {
      integer = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, integer, submessage_arena);
    }
    set_has_integer();
    entity_val_.integer_ = integer;
  }
  // @@protoc_insertion_point(field_set_allocated:GameState.EntityValue.Integer)
}
void EntityValue::set_allocated_vec2ivalue(::GameState::Vec2i* vec2ivalue) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_entity_val();
  if (vec2ivalue) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(vec2ivalue);
    if (message_arena != submessage_arena) {
      vec2ivalue = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, vec2ivalue, submessage_arena);
    }
    set_has_vec2ivalue();
    entity_val_.vec2ivalue_ = vec2ivalue;
  }
  // @@protoc_insertion_point(field_set_allocated:GameState.EntityValue.Vec2iValue)
}
EntityValue::EntityValue(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:GameState.EntityValue)
}
EntityValue::EntityValue(const EntityValue& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_entity_val();
  switch (from.entity_val_case()) {
    case kPlayer: {
      _internal_mutable_player()->::GameState::PlayerRef::MergeFrom(from._internal_player());
      break;
    }
    case kCard: {
      _internal_mutable_card()->::GameState::CardRef::MergeFrom(from._internal_card());
      break;
    }
    case kTile: {
      _internal_mutable_tile()->::GameState::TileRef::MergeFrom(from._internal_tile());
      break;
    }
    case kInteger: {
      _internal_mutable_integer()->::GameState::IntegerRef::MergeFrom(from._internal_integer());
      break;
    }
    case kIntValue: {
      _internal_set_intvalue(from._internal_intvalue());
      break;
    }
    case kVec2IValue: {
      _internal_mutable_vec2ivalue()->::GameState::Vec2i::MergeFrom(from._internal_vec2ivalue());
      break;
    }
    case kTerrainValue: {
      _internal_set_terrainvalue(from._internal_terrainvalue());
      break;
    }
    case ENTITY_VAL_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:GameState.EntityValue)
}

void EntityValue::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_EntityValue_GameState_2eproto.base);
  clear_has_entity_val();
}

EntityValue::~EntityValue() {
  // @@protoc_insertion_point(destructor:GameState.EntityValue)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void EntityValue::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_entity_val()) {
    clear_entity_val();
  }
}

void EntityValue::ArenaDtor(void* object) {
  EntityValue* _this = reinterpret_cast< EntityValue* >(object);
  (void)_this;
}
void EntityValue::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EntityValue::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EntityValue& EntityValue::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EntityValue_GameState_2eproto.base);
  return *internal_default_instance();
}


void EntityValue::clear_entity_val() {
// @@protoc_insertion_point(one_of_clear_start:GameState.EntityValue)
  switch (entity_val_case()) {
    case kPlayer: {
      if (GetArena() == nullptr) {
        delete entity_val_.player_;
      }
      break;
    }
    case kCard: {
      if (GetArena() == nullptr) {
        delete entity_val_.card_;
      }
      break;
    }
    case kTile: {
      if (GetArena() == nullptr) {
        delete entity_val_.tile_;
      }
      break;
    }
    case kInteger: {
      if (GetArena() == nullptr) {
        delete entity_val_.integer_;
      }
      break;
    }
    case kIntValue: {
      // No need to clear
      break;
    }
    case kVec2IValue: {
      if (GetArena() == nullptr) {
        delete entity_val_.vec2ivalue_;
      }
      break;
    }
    case kTerrainValue: {
      // No need to clear
      break;
    }
    case ENTITY_VAL_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = ENTITY_VAL_NOT_SET;
}


void EntityValue::Clear() {
// @@protoc_insertion_point(message_clear_start:GameState.EntityValue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_entity_val();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EntityValue::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .GameState.PlayerRef Player = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_player(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .GameState.CardRef Card = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_card(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .GameState.TileRef Tile = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_tile(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .GameState.IntegerRef Integer = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_integer(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 IntValue = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _internal_set_intvalue(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .GameState.Vec2i Vec2iValue = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_vec2ivalue(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Types.TerrainType TerrainValue = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_terrainvalue(static_cast<::Types::TerrainType>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EntityValue::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GameState.EntityValue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .GameState.PlayerRef Player = 1;
  if (_internal_has_player()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::player(this), target, stream);
  }

  // .GameState.CardRef Card = 2;
  if (_internal_has_card()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::card(this), target, stream);
  }

  // .GameState.TileRef Tile = 3;
  if (_internal_has_tile()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::tile(this), target, stream);
  }

  // .GameState.IntegerRef Integer = 4;
  if (_internal_has_integer()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::integer(this), target, stream);
  }

  // int32 IntValue = 5;
  if (_internal_has_intvalue()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_intvalue(), target);
  }

  // .GameState.Vec2i Vec2iValue = 6;
  if (_internal_has_vec2ivalue()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::vec2ivalue(this), target, stream);
  }

  // .Types.TerrainType TerrainValue = 7;
  if (_internal_has_terrainvalue()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      7, this->_internal_terrainvalue(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameState.EntityValue)
  return target;
}

size_t EntityValue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameState.EntityValue)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (entity_val_case()) {
    // .GameState.PlayerRef Player = 1;
    case kPlayer: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *entity_val_.player_);
      break;
    }
    // .GameState.CardRef Card = 2;
    case kCard: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *entity_val_.card_);
      break;
    }
    // .GameState.TileRef Tile = 3;
    case kTile: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *entity_val_.tile_);
      break;
    }
    // .GameState.IntegerRef Integer = 4;
    case kInteger: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *entity_val_.integer_);
      break;
    }
    // int32 IntValue = 5;
    case kIntValue: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_intvalue());
      break;
    }
    // .GameState.Vec2i Vec2iValue = 6;
    case kVec2IValue: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *entity_val_.vec2ivalue_);
      break;
    }
    // .Types.TerrainType TerrainValue = 7;
    case kTerrainValue: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_terrainvalue());
      break;
    }
    case ENTITY_VAL_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EntityValue::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameState.EntityValue)
  GOOGLE_DCHECK_NE(&from, this);
  const EntityValue* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EntityValue>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameState.EntityValue)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameState.EntityValue)
    MergeFrom(*source);
  }
}

void EntityValue::MergeFrom(const EntityValue& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameState.EntityValue)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.entity_val_case()) {
    case kPlayer: {
      _internal_mutable_player()->::GameState::PlayerRef::MergeFrom(from._internal_player());
      break;
    }
    case kCard: {
      _internal_mutable_card()->::GameState::CardRef::MergeFrom(from._internal_card());
      break;
    }
    case kTile: {
      _internal_mutable_tile()->::GameState::TileRef::MergeFrom(from._internal_tile());
      break;
    }
    case kInteger: {
      _internal_mutable_integer()->::GameState::IntegerRef::MergeFrom(from._internal_integer());
      break;
    }
    case kIntValue: {
      _internal_set_intvalue(from._internal_intvalue());
      break;
    }
    case kVec2IValue: {
      _internal_mutable_vec2ivalue()->::GameState::Vec2i::MergeFrom(from._internal_vec2ivalue());
      break;
    }
    case kTerrainValue: {
      _internal_set_terrainvalue(from._internal_terrainvalue());
      break;
    }
    case ENTITY_VAL_NOT_SET: {
      break;
    }
  }
}

void EntityValue::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameState.EntityValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EntityValue::CopyFrom(const EntityValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameState.EntityValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EntityValue::IsInitialized() const {
  return true;
}

void EntityValue::InternalSwap(EntityValue* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(entity_val_, other->entity_val_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata EntityValue::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Player_Stats::_Internal {
 public:
  static const ::GameState::IntegerRef& health(const Player_Stats* msg);
  static const ::GameState::IntegerRef& actions(const Player_Stats* msg);
  static const ::GameState::IntegerRef& power(const Player_Stats* msg);
  static const ::GameState::IntegerRef& slow(const Player_Stats* msg);
  static const ::GameState::IntegerRef& silence(const Player_Stats* msg);
  static const ::GameState::IntegerRef& disarm(const Player_Stats* msg);
  static const ::GameState::IntegerRef& initiative(const Player_Stats* msg);
};

const ::GameState::IntegerRef&
Player_Stats::_Internal::health(const Player_Stats* msg) {
  return *msg->health_;
}
const ::GameState::IntegerRef&
Player_Stats::_Internal::actions(const Player_Stats* msg) {
  return *msg->actions_;
}
const ::GameState::IntegerRef&
Player_Stats::_Internal::power(const Player_Stats* msg) {
  return *msg->power_;
}
const ::GameState::IntegerRef&
Player_Stats::_Internal::slow(const Player_Stats* msg) {
  return *msg->slow_;
}
const ::GameState::IntegerRef&
Player_Stats::_Internal::silence(const Player_Stats* msg) {
  return *msg->silence_;
}
const ::GameState::IntegerRef&
Player_Stats::_Internal::disarm(const Player_Stats* msg) {
  return *msg->disarm_;
}
const ::GameState::IntegerRef&
Player_Stats::_Internal::initiative(const Player_Stats* msg) {
  return *msg->initiative_;
}
Player_Stats::Player_Stats(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:GameState.Player.Stats)
}
Player_Stats::Player_Stats(const Player_Stats& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_health()) {
    health_ = new ::GameState::IntegerRef(*from.health_);
  } else {
    health_ = nullptr;
  }
  if (from._internal_has_actions()) {
    actions_ = new ::GameState::IntegerRef(*from.actions_);
  } else {
    actions_ = nullptr;
  }
  if (from._internal_has_power()) {
    power_ = new ::GameState::IntegerRef(*from.power_);
  } else {
    power_ = nullptr;
  }
  if (from._internal_has_slow()) {
    slow_ = new ::GameState::IntegerRef(*from.slow_);
  } else {
    slow_ = nullptr;
  }
  if (from._internal_has_silence()) {
    silence_ = new ::GameState::IntegerRef(*from.silence_);
  } else {
    silence_ = nullptr;
  }
  if (from._internal_has_disarm()) {
    disarm_ = new ::GameState::IntegerRef(*from.disarm_);
  } else {
    disarm_ = nullptr;
  }
  if (from._internal_has_initiative()) {
    initiative_ = new ::GameState::IntegerRef(*from.initiative_);
  } else {
    initiative_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:GameState.Player.Stats)
}

void Player_Stats::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Player_Stats_GameState_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&health_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&initiative_) -
      reinterpret_cast<char*>(&health_)) + sizeof(initiative_));
}

Player_Stats::~Player_Stats() {
  // @@protoc_insertion_point(destructor:GameState.Player.Stats)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Player_Stats::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete health_;
  if (this != internal_default_instance()) delete actions_;
  if (this != internal_default_instance()) delete power_;
  if (this != internal_default_instance()) delete slow_;
  if (this != internal_default_instance()) delete silence_;
  if (this != internal_default_instance()) delete disarm_;
  if (this != internal_default_instance()) delete initiative_;
}

void Player_Stats::ArenaDtor(void* object) {
  Player_Stats* _this = reinterpret_cast< Player_Stats* >(object);
  (void)_this;
}
void Player_Stats::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Player_Stats::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Player_Stats& Player_Stats::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Player_Stats_GameState_2eproto.base);
  return *internal_default_instance();
}


void Player_Stats::Clear() {
// @@protoc_insertion_point(message_clear_start:GameState.Player.Stats)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && health_ != nullptr) {
    delete health_;
  }
  health_ = nullptr;
  if (GetArena() == nullptr && actions_ != nullptr) {
    delete actions_;
  }
  actions_ = nullptr;
  if (GetArena() == nullptr && power_ != nullptr) {
    delete power_;
  }
  power_ = nullptr;
  if (GetArena() == nullptr && slow_ != nullptr) {
    delete slow_;
  }
  slow_ = nullptr;
  if (GetArena() == nullptr && silence_ != nullptr) {
    delete silence_;
  }
  silence_ = nullptr;
  if (GetArena() == nullptr && disarm_ != nullptr) {
    delete disarm_;
  }
  disarm_ = nullptr;
  if (GetArena() == nullptr && initiative_ != nullptr) {
    delete initiative_;
  }
  initiative_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Player_Stats::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .GameState.IntegerRef Health = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_health(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .GameState.IntegerRef Actions = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_actions(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .GameState.IntegerRef Power = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_power(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .GameState.IntegerRef Slow = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_slow(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .GameState.IntegerRef Silence = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_silence(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .GameState.IntegerRef Disarm = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_disarm(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .GameState.IntegerRef Initiative = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_initiative(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Player_Stats::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GameState.Player.Stats)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .GameState.IntegerRef Health = 1;
  if (this->has_health()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::health(this), target, stream);
  }

  // .GameState.IntegerRef Actions = 2;
  if (this->has_actions()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::actions(this), target, stream);
  }

  // .GameState.IntegerRef Power = 3;
  if (this->has_power()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::power(this), target, stream);
  }

  // .GameState.IntegerRef Slow = 4;
  if (this->has_slow()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::slow(this), target, stream);
  }

  // .GameState.IntegerRef Silence = 5;
  if (this->has_silence()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::silence(this), target, stream);
  }

  // .GameState.IntegerRef Disarm = 6;
  if (this->has_disarm()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::disarm(this), target, stream);
  }

  // .GameState.IntegerRef Initiative = 7;
  if (this->has_initiative()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::initiative(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameState.Player.Stats)
  return target;
}

size_t Player_Stats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameState.Player.Stats)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .GameState.IntegerRef Health = 1;
  if (this->has_health()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *health_);
  }

  // .GameState.IntegerRef Actions = 2;
  if (this->has_actions()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *actions_);
  }

  // .GameState.IntegerRef Power = 3;
  if (this->has_power()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *power_);
  }

  // .GameState.IntegerRef Slow = 4;
  if (this->has_slow()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *slow_);
  }

  // .GameState.IntegerRef Silence = 5;
  if (this->has_silence()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *silence_);
  }

  // .GameState.IntegerRef Disarm = 6;
  if (this->has_disarm()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *disarm_);
  }

  // .GameState.IntegerRef Initiative = 7;
  if (this->has_initiative()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *initiative_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Player_Stats::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameState.Player.Stats)
  GOOGLE_DCHECK_NE(&from, this);
  const Player_Stats* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Player_Stats>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameState.Player.Stats)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameState.Player.Stats)
    MergeFrom(*source);
  }
}

void Player_Stats::MergeFrom(const Player_Stats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameState.Player.Stats)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_health()) {
    _internal_mutable_health()->::GameState::IntegerRef::MergeFrom(from._internal_health());
  }
  if (from.has_actions()) {
    _internal_mutable_actions()->::GameState::IntegerRef::MergeFrom(from._internal_actions());
  }
  if (from.has_power()) {
    _internal_mutable_power()->::GameState::IntegerRef::MergeFrom(from._internal_power());
  }
  if (from.has_slow()) {
    _internal_mutable_slow()->::GameState::IntegerRef::MergeFrom(from._internal_slow());
  }
  if (from.has_silence()) {
    _internal_mutable_silence()->::GameState::IntegerRef::MergeFrom(from._internal_silence());
  }
  if (from.has_disarm()) {
    _internal_mutable_disarm()->::GameState::IntegerRef::MergeFrom(from._internal_disarm());
  }
  if (from.has_initiative()) {
    _internal_mutable_initiative()->::GameState::IntegerRef::MergeFrom(from._internal_initiative());
  }
}

void Player_Stats::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameState.Player.Stats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Player_Stats::CopyFrom(const Player_Stats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameState.Player.Stats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Player_Stats::IsInitialized() const {
  return true;
}

void Player_Stats::InternalSwap(Player_Stats* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Player_Stats, initiative_)
      + sizeof(Player_Stats::initiative_)
      - PROTOBUF_FIELD_OFFSET(Player_Stats, health_)>(
          reinterpret_cast<char*>(&health_),
          reinterpret_cast<char*>(&other->health_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Player_Stats::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Player::_Internal {
 public:
  static const ::GameState::Player_Stats& state(const Player* msg);
  static const ::GameState::Player_Stats& maxstate(const Player* msg);
  static const ::GameState::Vec2iRef& position(const Player* msg);
};

const ::GameState::Player_Stats&
Player::_Internal::state(const Player* msg) {
  return *msg->state_;
}
const ::GameState::Player_Stats&
Player::_Internal::maxstate(const Player* msg) {
  return *msg->maxstate_;
}
const ::GameState::Vec2iRef&
Player::_Internal::position(const Player* msg) {
  return *msg->position_;
}
Player::Player(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  field_(arena),
  hand_(arena),
  deck_(arena),
  discard_(arena),
  feats_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:GameState.Player)
}
Player::Player(const Player& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      field_(from.field_),
      hand_(from.hand_),
      deck_(from.deck_),
      discard_(from.discard_),
      feats_(from.feats_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  displayname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_displayname().empty()) {
    displayname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_displayname(), 
      GetArena());
  }
  uid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_uid().empty()) {
    uid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_uid(), 
      GetArena());
  }
  if (from._internal_has_state()) {
    state_ = new ::GameState::Player_Stats(*from.state_);
  } else {
    state_ = nullptr;
  }
  if (from._internal_has_maxstate()) {
    maxstate_ = new ::GameState::Player_Stats(*from.maxstate_);
  } else {
    maxstate_ = nullptr;
  }
  if (from._internal_has_position()) {
    position_ = new ::GameState::Vec2iRef(*from.position_);
  } else {
    position_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:GameState.Player)
}

void Player::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Player_GameState_2eproto.base);
  displayname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  uid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&state_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&position_) -
      reinterpret_cast<char*>(&state_)) + sizeof(position_));
}

Player::~Player() {
  // @@protoc_insertion_point(destructor:GameState.Player)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Player::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  displayname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  uid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete state_;
  if (this != internal_default_instance()) delete maxstate_;
  if (this != internal_default_instance()) delete position_;
}

void Player::ArenaDtor(void* object) {
  Player* _this = reinterpret_cast< Player* >(object);
  (void)_this;
}
void Player::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Player::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Player& Player::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Player_GameState_2eproto.base);
  return *internal_default_instance();
}


void Player::Clear() {
// @@protoc_insertion_point(message_clear_start:GameState.Player)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  field_.Clear();
  hand_.Clear();
  deck_.Clear();
  discard_.Clear();
  feats_.Clear();
  displayname_.ClearToEmpty();
  uid_.ClearToEmpty();
  if (GetArena() == nullptr && state_ != nullptr) {
    delete state_;
  }
  state_ = nullptr;
  if (GetArena() == nullptr && maxstate_ != nullptr) {
    delete maxstate_;
  }
  maxstate_ = nullptr;
  if (GetArena() == nullptr && position_ != nullptr) {
    delete position_;
  }
  position_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Player::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string DisplayName = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_displayname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "GameState.Player.DisplayName"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string UID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_uid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "GameState.Player.UID"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .GameState.CardRef Field = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_field(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .GameState.CardRef Hand = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_hand(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .GameState.CardRef Deck = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_deck(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .GameState.CardRef Discard = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_discard(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .GameState.CardRef Feats = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_feats(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      // .GameState.Player.Stats State = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_state(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .GameState.Player.Stats MaxState = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_maxstate(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .GameState.Vec2iRef Position = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_position(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Player::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GameState.Player)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string DisplayName = 1;
  if (this->displayname().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_displayname().data(), static_cast<int>(this->_internal_displayname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "GameState.Player.DisplayName");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_displayname(), target);
  }

  // string UID = 2;
  if (this->uid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_uid().data(), static_cast<int>(this->_internal_uid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "GameState.Player.UID");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_uid(), target);
  }

  // repeated .GameState.CardRef Field = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_field_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_field(i), target, stream);
  }

  // repeated .GameState.CardRef Hand = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_hand_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_hand(i), target, stream);
  }

  // repeated .GameState.CardRef Deck = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_deck_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_deck(i), target, stream);
  }

  // repeated .GameState.CardRef Discard = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_discard_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_discard(i), target, stream);
  }

  // repeated .GameState.CardRef Feats = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_feats_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, this->_internal_feats(i), target, stream);
  }

  // .GameState.Player.Stats State = 8;
  if (this->has_state()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::state(this), target, stream);
  }

  // .GameState.Player.Stats MaxState = 9;
  if (this->has_maxstate()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::maxstate(this), target, stream);
  }

  // .GameState.Vec2iRef Position = 10;
  if (this->has_position()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::position(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameState.Player)
  return target;
}

size_t Player::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameState.Player)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .GameState.CardRef Field = 3;
  total_size += 1UL * this->_internal_field_size();
  for (const auto& msg : this->field_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .GameState.CardRef Hand = 4;
  total_size += 1UL * this->_internal_hand_size();
  for (const auto& msg : this->hand_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .GameState.CardRef Deck = 5;
  total_size += 1UL * this->_internal_deck_size();
  for (const auto& msg : this->deck_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .GameState.CardRef Discard = 6;
  total_size += 1UL * this->_internal_discard_size();
  for (const auto& msg : this->discard_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .GameState.CardRef Feats = 7;
  total_size += 1UL * this->_internal_feats_size();
  for (const auto& msg : this->feats_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string DisplayName = 1;
  if (this->displayname().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_displayname());
  }

  // string UID = 2;
  if (this->uid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_uid());
  }

  // .GameState.Player.Stats State = 8;
  if (this->has_state()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *state_);
  }

  // .GameState.Player.Stats MaxState = 9;
  if (this->has_maxstate()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *maxstate_);
  }

  // .GameState.Vec2iRef Position = 10;
  if (this->has_position()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *position_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Player::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameState.Player)
  GOOGLE_DCHECK_NE(&from, this);
  const Player* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Player>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameState.Player)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameState.Player)
    MergeFrom(*source);
  }
}

void Player::MergeFrom(const Player& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameState.Player)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  field_.MergeFrom(from.field_);
  hand_.MergeFrom(from.hand_);
  deck_.MergeFrom(from.deck_);
  discard_.MergeFrom(from.discard_);
  feats_.MergeFrom(from.feats_);
  if (from.displayname().size() > 0) {
    _internal_set_displayname(from._internal_displayname());
  }
  if (from.uid().size() > 0) {
    _internal_set_uid(from._internal_uid());
  }
  if (from.has_state()) {
    _internal_mutable_state()->::GameState::Player_Stats::MergeFrom(from._internal_state());
  }
  if (from.has_maxstate()) {
    _internal_mutable_maxstate()->::GameState::Player_Stats::MergeFrom(from._internal_maxstate());
  }
  if (from.has_position()) {
    _internal_mutable_position()->::GameState::Vec2iRef::MergeFrom(from._internal_position());
  }
}

void Player::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameState.Player)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Player::CopyFrom(const Player& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameState.Player)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Player::IsInitialized() const {
  return true;
}

void Player::InternalSwap(Player* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  field_.InternalSwap(&other->field_);
  hand_.InternalSwap(&other->hand_);
  deck_.InternalSwap(&other->deck_);
  discard_.InternalSwap(&other->discard_);
  feats_.InternalSwap(&other->feats_);
  displayname_.Swap(&other->displayname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  uid_.Swap(&other->uid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Player, position_)
      + sizeof(Player::position_)
      - PROTOBUF_FIELD_OFFSET(Player, state_)>(
          reinterpret_cast<char*>(&state_),
          reinterpret_cast<char*>(&other->state_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Player::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Tile::_Internal {
 public:
  static const ::GameState::Vec2i& position(const Tile* msg);
};

const ::GameState::Vec2i&
Tile::_Internal::position(const Tile* msg) {
  return *msg->position_;
}
Tile::Tile(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  players_(arena),
  cards_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:GameState.Tile)
}
Tile::Tile(const Tile& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      players_(from.players_),
      cards_(from.cards_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_position()) {
    position_ = new ::GameState::Vec2i(*from.position_);
  } else {
    position_ = nullptr;
  }
  terrain_ = from.terrain_;
  // @@protoc_insertion_point(copy_constructor:GameState.Tile)
}

void Tile::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Tile_GameState_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&position_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&terrain_) -
      reinterpret_cast<char*>(&position_)) + sizeof(terrain_));
}

Tile::~Tile() {
  // @@protoc_insertion_point(destructor:GameState.Tile)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Tile::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete position_;
}

void Tile::ArenaDtor(void* object) {
  Tile* _this = reinterpret_cast< Tile* >(object);
  (void)_this;
}
void Tile::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Tile::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Tile& Tile::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Tile_GameState_2eproto.base);
  return *internal_default_instance();
}


void Tile::Clear() {
// @@protoc_insertion_point(message_clear_start:GameState.Tile)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  players_.Clear();
  cards_.Clear();
  if (GetArena() == nullptr && position_ != nullptr) {
    delete position_;
  }
  position_ = nullptr;
  terrain_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Tile::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .GameState.Vec2i Position = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_position(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Types.TerrainType Terrain = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_terrain(static_cast<::Types::TerrainType>(val));
        } else goto handle_unusual;
        continue;
      // repeated .GameState.PlayerRef Players = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_players(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .GameState.CardRef Cards = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_cards(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Tile::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GameState.Tile)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .GameState.Vec2i Position = 1;
  if (this->has_position()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::position(this), target, stream);
  }

  // .Types.TerrainType Terrain = 2;
  if (this->terrain() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_terrain(), target);
  }

  // repeated .GameState.PlayerRef Players = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_players_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_players(i), target, stream);
  }

  // repeated .GameState.CardRef Cards = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_cards_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_cards(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameState.Tile)
  return target;
}

size_t Tile::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameState.Tile)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .GameState.PlayerRef Players = 3;
  total_size += 1UL * this->_internal_players_size();
  for (const auto& msg : this->players_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .GameState.CardRef Cards = 4;
  total_size += 1UL * this->_internal_cards_size();
  for (const auto& msg : this->cards_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .GameState.Vec2i Position = 1;
  if (this->has_position()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *position_);
  }

  // .Types.TerrainType Terrain = 2;
  if (this->terrain() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_terrain());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Tile::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameState.Tile)
  GOOGLE_DCHECK_NE(&from, this);
  const Tile* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Tile>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameState.Tile)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameState.Tile)
    MergeFrom(*source);
  }
}

void Tile::MergeFrom(const Tile& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameState.Tile)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  players_.MergeFrom(from.players_);
  cards_.MergeFrom(from.cards_);
  if (from.has_position()) {
    _internal_mutable_position()->::GameState::Vec2i::MergeFrom(from._internal_position());
  }
  if (from.terrain() != 0) {
    _internal_set_terrain(from._internal_terrain());
  }
}

void Tile::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameState.Tile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Tile::CopyFrom(const Tile& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameState.Tile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Tile::IsInitialized() const {
  return true;
}

void Tile::InternalSwap(Tile* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  players_.InternalSwap(&other->players_);
  cards_.InternalSwap(&other->cards_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Tile, terrain_)
      + sizeof(Tile::terrain_)
      - PROTOBUF_FIELD_OFFSET(Tile, position_)>(
          reinterpret_cast<char*>(&position_),
          reinterpret_cast<char*>(&other->position_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Tile::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Card::_Internal {
 public:
  static const ::GameState::PlayerRef& owner(const Card* msg);
  static const ::GameState::PlayerRef& controller(const Card* msg);
  static const ::GameState::IntegerRef& actioncost(const Card* msg);
  static const ::GameState::IntegerRef& powercost(const Card* msg);
  static const ::GameState::IntegerRef& range(const Card* msg);
  static const ::GameState::EntityRef& attached(const Card* msg);
  static const ::GameState::IntegerRef& affectedbyslow(const Card* msg);
  static const ::GameState::IntegerRef& affectedbysilence(const Card* msg);
  static const ::GameState::IntegerRef& affectedbydisarm(const Card* msg);
  static const ::Effects::CardEffect& omnipresenteffect(const Card* msg);
  static const ::Effects::CardEffect& passiveeffect(const Card* msg);
  static const ::Effects::CardEffect& feateffect(const Card* msg);
  static const ::Effects::CardEffect& playeffect(const Card* msg);
  static const ::Effects::CardEffect& resolveeffect(const Card* msg);
};

const ::GameState::PlayerRef&
Card::_Internal::owner(const Card* msg) {
  return *msg->owner_;
}
const ::GameState::PlayerRef&
Card::_Internal::controller(const Card* msg) {
  return *msg->controller_;
}
const ::GameState::IntegerRef&
Card::_Internal::actioncost(const Card* msg) {
  return *msg->actioncost_;
}
const ::GameState::IntegerRef&
Card::_Internal::powercost(const Card* msg) {
  return *msg->powercost_;
}
const ::GameState::IntegerRef&
Card::_Internal::range(const Card* msg) {
  return *msg->range_;
}
const ::GameState::EntityRef&
Card::_Internal::attached(const Card* msg) {
  return *msg->attached_;
}
const ::GameState::IntegerRef&
Card::_Internal::affectedbyslow(const Card* msg) {
  return *msg->affectedbyslow_;
}
const ::GameState::IntegerRef&
Card::_Internal::affectedbysilence(const Card* msg) {
  return *msg->affectedbysilence_;
}
const ::GameState::IntegerRef&
Card::_Internal::affectedbydisarm(const Card* msg) {
  return *msg->affectedbydisarm_;
}
const ::Effects::CardEffect&
Card::_Internal::omnipresenteffect(const Card* msg) {
  return *msg->omnipresenteffect_;
}
const ::Effects::CardEffect&
Card::_Internal::passiveeffect(const Card* msg) {
  return *msg->passiveeffect_;
}
const ::Effects::CardEffect&
Card::_Internal::feateffect(const Card* msg) {
  return *msg->feateffect_;
}
const ::Effects::CardEffect&
Card::_Internal::playeffect(const Card* msg) {
  return *msg->playeffect_;
}
const ::Effects::CardEffect&
Card::_Internal::resolveeffect(const Card* msg) {
  return *msg->resolveeffect_;
}
void Card::clear_omnipresenteffect() {
  if (GetArena() == nullptr && omnipresenteffect_ != nullptr) {
    delete omnipresenteffect_;
  }
  omnipresenteffect_ = nullptr;
}
void Card::clear_passiveeffect() {
  if (GetArena() == nullptr && passiveeffect_ != nullptr) {
    delete passiveeffect_;
  }
  passiveeffect_ = nullptr;
}
void Card::clear_feateffect() {
  if (GetArena() == nullptr && feateffect_ != nullptr) {
    delete feateffect_;
  }
  feateffect_ = nullptr;
}
void Card::clear_playeffect() {
  if (GetArena() == nullptr && playeffect_ != nullptr) {
    delete playeffect_;
  }
  playeffect_ = nullptr;
}
void Card::clear_resolveeffect() {
  if (GetArena() == nullptr && resolveeffect_ != nullptr) {
    delete resolveeffect_;
  }
  resolveeffect_ = nullptr;
}
Card::Card(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  colors_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:GameState.Card)
}
Card::Card(const Card& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      colors_(from.colors_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  archetype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_archetype().empty()) {
    archetype_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_archetype(), 
      GetArena());
  }
  if (from._internal_has_owner()) {
    owner_ = new ::GameState::PlayerRef(*from.owner_);
  } else {
    owner_ = nullptr;
  }
  if (from._internal_has_controller()) {
    controller_ = new ::GameState::PlayerRef(*from.controller_);
  } else {
    controller_ = nullptr;
  }
  if (from._internal_has_actioncost()) {
    actioncost_ = new ::GameState::IntegerRef(*from.actioncost_);
  } else {
    actioncost_ = nullptr;
  }
  if (from._internal_has_powercost()) {
    powercost_ = new ::GameState::IntegerRef(*from.powercost_);
  } else {
    powercost_ = nullptr;
  }
  if (from._internal_has_range()) {
    range_ = new ::GameState::IntegerRef(*from.range_);
  } else {
    range_ = nullptr;
  }
  if (from._internal_has_attached()) {
    attached_ = new ::GameState::EntityRef(*from.attached_);
  } else {
    attached_ = nullptr;
  }
  if (from._internal_has_affectedbyslow()) {
    affectedbyslow_ = new ::GameState::IntegerRef(*from.affectedbyslow_);
  } else {
    affectedbyslow_ = nullptr;
  }
  if (from._internal_has_affectedbysilence()) {
    affectedbysilence_ = new ::GameState::IntegerRef(*from.affectedbysilence_);
  } else {
    affectedbysilence_ = nullptr;
  }
  if (from._internal_has_affectedbydisarm()) {
    affectedbydisarm_ = new ::GameState::IntegerRef(*from.affectedbydisarm_);
  } else {
    affectedbydisarm_ = nullptr;
  }
  if (from._internal_has_omnipresenteffect()) {
    omnipresenteffect_ = new ::Effects::CardEffect(*from.omnipresenteffect_);
  } else {
    omnipresenteffect_ = nullptr;
  }
  if (from._internal_has_passiveeffect()) {
    passiveeffect_ = new ::Effects::CardEffect(*from.passiveeffect_);
  } else {
    passiveeffect_ = nullptr;
  }
  if (from._internal_has_feateffect()) {
    feateffect_ = new ::Effects::CardEffect(*from.feateffect_);
  } else {
    feateffect_ = nullptr;
  }
  if (from._internal_has_playeffect()) {
    playeffect_ = new ::Effects::CardEffect(*from.playeffect_);
  } else {
    playeffect_ = nullptr;
  }
  if (from._internal_has_resolveeffect()) {
    resolveeffect_ = new ::Effects::CardEffect(*from.resolveeffect_);
  } else {
    resolveeffect_ = nullptr;
  }
  ::memcpy(&ultimate_, &from.ultimate_,
    static_cast<size_t>(reinterpret_cast<char*>(&basicaction_) -
    reinterpret_cast<char*>(&ultimate_)) + sizeof(basicaction_));
  // @@protoc_insertion_point(copy_constructor:GameState.Card)
}

void Card::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Card_GameState_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  archetype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&owner_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&basicaction_) -
      reinterpret_cast<char*>(&owner_)) + sizeof(basicaction_));
}

Card::~Card() {
  // @@protoc_insertion_point(destructor:GameState.Card)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Card::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  archetype_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete owner_;
  if (this != internal_default_instance()) delete controller_;
  if (this != internal_default_instance()) delete actioncost_;
  if (this != internal_default_instance()) delete powercost_;
  if (this != internal_default_instance()) delete range_;
  if (this != internal_default_instance()) delete attached_;
  if (this != internal_default_instance()) delete affectedbyslow_;
  if (this != internal_default_instance()) delete affectedbysilence_;
  if (this != internal_default_instance()) delete affectedbydisarm_;
  if (this != internal_default_instance()) delete omnipresenteffect_;
  if (this != internal_default_instance()) delete passiveeffect_;
  if (this != internal_default_instance()) delete feateffect_;
  if (this != internal_default_instance()) delete playeffect_;
  if (this != internal_default_instance()) delete resolveeffect_;
}

void Card::ArenaDtor(void* object) {
  Card* _this = reinterpret_cast< Card* >(object);
  (void)_this;
}
void Card::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Card::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Card& Card::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Card_GameState_2eproto.base);
  return *internal_default_instance();
}


void Card::Clear() {
// @@protoc_insertion_point(message_clear_start:GameState.Card)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  colors_.Clear();
  name_.ClearToEmpty();
  archetype_.ClearToEmpty();
  if (GetArena() == nullptr && owner_ != nullptr) {
    delete owner_;
  }
  owner_ = nullptr;
  if (GetArena() == nullptr && controller_ != nullptr) {
    delete controller_;
  }
  controller_ = nullptr;
  if (GetArena() == nullptr && actioncost_ != nullptr) {
    delete actioncost_;
  }
  actioncost_ = nullptr;
  if (GetArena() == nullptr && powercost_ != nullptr) {
    delete powercost_;
  }
  powercost_ = nullptr;
  if (GetArena() == nullptr && range_ != nullptr) {
    delete range_;
  }
  range_ = nullptr;
  if (GetArena() == nullptr && attached_ != nullptr) {
    delete attached_;
  }
  attached_ = nullptr;
  if (GetArena() == nullptr && affectedbyslow_ != nullptr) {
    delete affectedbyslow_;
  }
  affectedbyslow_ = nullptr;
  if (GetArena() == nullptr && affectedbysilence_ != nullptr) {
    delete affectedbysilence_;
  }
  affectedbysilence_ = nullptr;
  if (GetArena() == nullptr && affectedbydisarm_ != nullptr) {
    delete affectedbydisarm_;
  }
  affectedbydisarm_ = nullptr;
  if (GetArena() == nullptr && omnipresenteffect_ != nullptr) {
    delete omnipresenteffect_;
  }
  omnipresenteffect_ = nullptr;
  if (GetArena() == nullptr && passiveeffect_ != nullptr) {
    delete passiveeffect_;
  }
  passiveeffect_ = nullptr;
  if (GetArena() == nullptr && feateffect_ != nullptr) {
    delete feateffect_;
  }
  feateffect_ = nullptr;
  if (GetArena() == nullptr && playeffect_ != nullptr) {
    delete playeffect_;
  }
  playeffect_ = nullptr;
  if (GetArena() == nullptr && resolveeffect_ != nullptr) {
    delete resolveeffect_;
  }
  resolveeffect_ = nullptr;
  ::memset(&ultimate_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&basicaction_) -
      reinterpret_cast<char*>(&ultimate_)) + sizeof(basicaction_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Card::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string Name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "GameState.Card.Name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string Archetype = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_archetype();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "GameState.Card.Archetype"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool Ultimate = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ultimate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool Feat = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          feat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool BasicAction = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          basicaction_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .GameState.Card.Color Colors = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser(_internal_mutable_colors(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_add_colors(static_cast<::GameState::Card_Color>(val));
        } else goto handle_unusual;
        continue;
      // .GameState.PlayerRef Owner = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_owner(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .GameState.PlayerRef Controller = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_controller(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .GameState.IntegerRef ActionCost = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_actioncost(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .GameState.IntegerRef PowerCost = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_powercost(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .GameState.IntegerRef Range = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_range(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .GameState.EntityRef Attached = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_attached(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .GameState.IntegerRef AffectedBySlow = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_affectedbyslow(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .GameState.IntegerRef AffectedBySilence = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_affectedbysilence(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .GameState.IntegerRef AffectedByDisarm = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_affectedbydisarm(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Effects.CardEffect OmniPresentEffect = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_omnipresenteffect(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Effects.CardEffect PassiveEffect = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_passiveeffect(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Effects.CardEffect FeatEffect = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_feateffect(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Effects.CardEffect PlayEffect = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          ptr = ctx->ParseMessage(_internal_mutable_playeffect(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Effects.CardEffect ResolveEffect = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_resolveeffect(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Card::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GameState.Card)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string Name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "GameState.Card.Name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // string Archetype = 2;
  if (this->archetype().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_archetype().data(), static_cast<int>(this->_internal_archetype().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "GameState.Card.Archetype");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_archetype(), target);
  }

  // bool Ultimate = 3;
  if (this->ultimate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_ultimate(), target);
  }

  // bool Feat = 4;
  if (this->feat() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_feat(), target);
  }

  // bool BasicAction = 5;
  if (this->basicaction() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_basicaction(), target);
  }

  // repeated .GameState.Card.Color Colors = 6;
  {
    int byte_size = _colors_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteEnumPacked(
          6, colors_, byte_size, target);
    }
  }

  // .GameState.PlayerRef Owner = 7;
  if (this->has_owner()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::owner(this), target, stream);
  }

  // .GameState.PlayerRef Controller = 8;
  if (this->has_controller()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::controller(this), target, stream);
  }

  // .GameState.IntegerRef ActionCost = 9;
  if (this->has_actioncost()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::actioncost(this), target, stream);
  }

  // .GameState.IntegerRef PowerCost = 10;
  if (this->has_powercost()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::powercost(this), target, stream);
  }

  // .GameState.IntegerRef Range = 11;
  if (this->has_range()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::range(this), target, stream);
  }

  // .GameState.EntityRef Attached = 12;
  if (this->has_attached()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::attached(this), target, stream);
  }

  // .GameState.IntegerRef AffectedBySlow = 13;
  if (this->has_affectedbyslow()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        13, _Internal::affectedbyslow(this), target, stream);
  }

  // .GameState.IntegerRef AffectedBySilence = 14;
  if (this->has_affectedbysilence()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        14, _Internal::affectedbysilence(this), target, stream);
  }

  // .GameState.IntegerRef AffectedByDisarm = 15;
  if (this->has_affectedbydisarm()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        15, _Internal::affectedbydisarm(this), target, stream);
  }

  // .Effects.CardEffect OmniPresentEffect = 16;
  if (this->has_omnipresenteffect()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        16, _Internal::omnipresenteffect(this), target, stream);
  }

  // .Effects.CardEffect PassiveEffect = 17;
  if (this->has_passiveeffect()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        17, _Internal::passiveeffect(this), target, stream);
  }

  // .Effects.CardEffect FeatEffect = 18;
  if (this->has_feateffect()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        18, _Internal::feateffect(this), target, stream);
  }

  // .Effects.CardEffect PlayEffect = 19;
  if (this->has_playeffect()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        19, _Internal::playeffect(this), target, stream);
  }

  // .Effects.CardEffect ResolveEffect = 20;
  if (this->has_resolveeffect()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        20, _Internal::resolveeffect(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameState.Card)
  return target;
}

size_t Card::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameState.Card)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .GameState.Card.Color Colors = 6;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_colors_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(
        this->_internal_colors(static_cast<int>(i)));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _colors_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string Name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string Archetype = 2;
  if (this->archetype().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_archetype());
  }

  // .GameState.PlayerRef Owner = 7;
  if (this->has_owner()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *owner_);
  }

  // .GameState.PlayerRef Controller = 8;
  if (this->has_controller()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *controller_);
  }

  // .GameState.IntegerRef ActionCost = 9;
  if (this->has_actioncost()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *actioncost_);
  }

  // .GameState.IntegerRef PowerCost = 10;
  if (this->has_powercost()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *powercost_);
  }

  // .GameState.IntegerRef Range = 11;
  if (this->has_range()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *range_);
  }

  // .GameState.EntityRef Attached = 12;
  if (this->has_attached()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *attached_);
  }

  // .GameState.IntegerRef AffectedBySlow = 13;
  if (this->has_affectedbyslow()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *affectedbyslow_);
  }

  // .GameState.IntegerRef AffectedBySilence = 14;
  if (this->has_affectedbysilence()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *affectedbysilence_);
  }

  // .GameState.IntegerRef AffectedByDisarm = 15;
  if (this->has_affectedbydisarm()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *affectedbydisarm_);
  }

  // .Effects.CardEffect OmniPresentEffect = 16;
  if (this->has_omnipresenteffect()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *omnipresenteffect_);
  }

  // .Effects.CardEffect PassiveEffect = 17;
  if (this->has_passiveeffect()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *passiveeffect_);
  }

  // .Effects.CardEffect FeatEffect = 18;
  if (this->has_feateffect()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *feateffect_);
  }

  // .Effects.CardEffect PlayEffect = 19;
  if (this->has_playeffect()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *playeffect_);
  }

  // .Effects.CardEffect ResolveEffect = 20;
  if (this->has_resolveeffect()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *resolveeffect_);
  }

  // bool Ultimate = 3;
  if (this->ultimate() != 0) {
    total_size += 1 + 1;
  }

  // bool Feat = 4;
  if (this->feat() != 0) {
    total_size += 1 + 1;
  }

  // bool BasicAction = 5;
  if (this->basicaction() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Card::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameState.Card)
  GOOGLE_DCHECK_NE(&from, this);
  const Card* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Card>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameState.Card)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameState.Card)
    MergeFrom(*source);
  }
}

void Card::MergeFrom(const Card& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameState.Card)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  colors_.MergeFrom(from.colors_);
  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.archetype().size() > 0) {
    _internal_set_archetype(from._internal_archetype());
  }
  if (from.has_owner()) {
    _internal_mutable_owner()->::GameState::PlayerRef::MergeFrom(from._internal_owner());
  }
  if (from.has_controller()) {
    _internal_mutable_controller()->::GameState::PlayerRef::MergeFrom(from._internal_controller());
  }
  if (from.has_actioncost()) {
    _internal_mutable_actioncost()->::GameState::IntegerRef::MergeFrom(from._internal_actioncost());
  }
  if (from.has_powercost()) {
    _internal_mutable_powercost()->::GameState::IntegerRef::MergeFrom(from._internal_powercost());
  }
  if (from.has_range()) {
    _internal_mutable_range()->::GameState::IntegerRef::MergeFrom(from._internal_range());
  }
  if (from.has_attached()) {
    _internal_mutable_attached()->::GameState::EntityRef::MergeFrom(from._internal_attached());
  }
  if (from.has_affectedbyslow()) {
    _internal_mutable_affectedbyslow()->::GameState::IntegerRef::MergeFrom(from._internal_affectedbyslow());
  }
  if (from.has_affectedbysilence()) {
    _internal_mutable_affectedbysilence()->::GameState::IntegerRef::MergeFrom(from._internal_affectedbysilence());
  }
  if (from.has_affectedbydisarm()) {
    _internal_mutable_affectedbydisarm()->::GameState::IntegerRef::MergeFrom(from._internal_affectedbydisarm());
  }
  if (from.has_omnipresenteffect()) {
    _internal_mutable_omnipresenteffect()->::Effects::CardEffect::MergeFrom(from._internal_omnipresenteffect());
  }
  if (from.has_passiveeffect()) {
    _internal_mutable_passiveeffect()->::Effects::CardEffect::MergeFrom(from._internal_passiveeffect());
  }
  if (from.has_feateffect()) {
    _internal_mutable_feateffect()->::Effects::CardEffect::MergeFrom(from._internal_feateffect());
  }
  if (from.has_playeffect()) {
    _internal_mutable_playeffect()->::Effects::CardEffect::MergeFrom(from._internal_playeffect());
  }
  if (from.has_resolveeffect()) {
    _internal_mutable_resolveeffect()->::Effects::CardEffect::MergeFrom(from._internal_resolveeffect());
  }
  if (from.ultimate() != 0) {
    _internal_set_ultimate(from._internal_ultimate());
  }
  if (from.feat() != 0) {
    _internal_set_feat(from._internal_feat());
  }
  if (from.basicaction() != 0) {
    _internal_set_basicaction(from._internal_basicaction());
  }
}

void Card::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameState.Card)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Card::CopyFrom(const Card& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameState.Card)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Card::IsInitialized() const {
  return true;
}

void Card::InternalSwap(Card* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  colors_.InternalSwap(&other->colors_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  archetype_.Swap(&other->archetype_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Card, basicaction_)
      + sizeof(Card::basicaction_)
      - PROTOBUF_FIELD_OFFSET(Card, owner_)>(
          reinterpret_cast<char*>(&owner_),
          reinterpret_cast<char*>(&other->owner_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Card::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Team::_Internal {
 public:
};

Team::Team(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  players_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:GameState.Team)
}
Team::Team(const Team& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      players_(from.players_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:GameState.Team)
}

void Team::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Team_GameState_2eproto.base);
}

Team::~Team() {
  // @@protoc_insertion_point(destructor:GameState.Team)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Team::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Team::ArenaDtor(void* object) {
  Team* _this = reinterpret_cast< Team* >(object);
  (void)_this;
}
void Team::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Team::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Team& Team::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Team_GameState_2eproto.base);
  return *internal_default_instance();
}


void Team::Clear() {
// @@protoc_insertion_point(message_clear_start:GameState.Team)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  players_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Team::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .GameState.PlayerRef Players = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_players(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Team::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GameState.Team)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .GameState.PlayerRef Players = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_players_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_players(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameState.Team)
  return target;
}

size_t Team::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameState.Team)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .GameState.PlayerRef Players = 1;
  total_size += 1UL * this->_internal_players_size();
  for (const auto& msg : this->players_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Team::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameState.Team)
  GOOGLE_DCHECK_NE(&from, this);
  const Team* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Team>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameState.Team)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameState.Team)
    MergeFrom(*source);
  }
}

void Team::MergeFrom(const Team& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameState.Team)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  players_.MergeFrom(from.players_);
}

void Team::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameState.Team)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Team::CopyFrom(const Team& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameState.Team)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Team::IsInitialized() const {
  return true;
}

void Team::InternalSwap(Team* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  players_.InternalSwap(&other->players_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Team::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SetMutation::_Internal {
 public:
  static const ::GameState::EntityRef& object(const SetMutation* msg);
  static const ::GameState::EntityValue& newvalue(const SetMutation* msg);
  static const ::GameState::EntityValue& oldvalue(const SetMutation* msg);
};

const ::GameState::EntityRef&
SetMutation::_Internal::object(const SetMutation* msg) {
  return *msg->object_;
}
const ::GameState::EntityValue&
SetMutation::_Internal::newvalue(const SetMutation* msg) {
  return *msg->newvalue_;
}
const ::GameState::EntityValue&
SetMutation::_Internal::oldvalue(const SetMutation* msg) {
  return *msg->oldvalue_;
}
SetMutation::SetMutation(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:GameState.SetMutation)
}
SetMutation::SetMutation(const SetMutation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_object()) {
    object_ = new ::GameState::EntityRef(*from.object_);
  } else {
    object_ = nullptr;
  }
  if (from._internal_has_newvalue()) {
    newvalue_ = new ::GameState::EntityValue(*from.newvalue_);
  } else {
    newvalue_ = nullptr;
  }
  if (from._internal_has_oldvalue()) {
    oldvalue_ = new ::GameState::EntityValue(*from.oldvalue_);
  } else {
    oldvalue_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:GameState.SetMutation)
}

void SetMutation::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SetMutation_GameState_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&object_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&oldvalue_) -
      reinterpret_cast<char*>(&object_)) + sizeof(oldvalue_));
}

SetMutation::~SetMutation() {
  // @@protoc_insertion_point(destructor:GameState.SetMutation)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SetMutation::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete object_;
  if (this != internal_default_instance()) delete newvalue_;
  if (this != internal_default_instance()) delete oldvalue_;
}

void SetMutation::ArenaDtor(void* object) {
  SetMutation* _this = reinterpret_cast< SetMutation* >(object);
  (void)_this;
}
void SetMutation::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SetMutation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SetMutation& SetMutation::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SetMutation_GameState_2eproto.base);
  return *internal_default_instance();
}


void SetMutation::Clear() {
// @@protoc_insertion_point(message_clear_start:GameState.SetMutation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && object_ != nullptr) {
    delete object_;
  }
  object_ = nullptr;
  if (GetArena() == nullptr && newvalue_ != nullptr) {
    delete newvalue_;
  }
  newvalue_ = nullptr;
  if (GetArena() == nullptr && oldvalue_ != nullptr) {
    delete oldvalue_;
  }
  oldvalue_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetMutation::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .GameState.EntityRef Object = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_object(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .GameState.EntityValue NewValue = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_newvalue(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .GameState.EntityValue OldValue = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_oldvalue(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SetMutation::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GameState.SetMutation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .GameState.EntityRef Object = 1;
  if (this->has_object()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::object(this), target, stream);
  }

  // .GameState.EntityValue NewValue = 2;
  if (this->has_newvalue()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::newvalue(this), target, stream);
  }

  // .GameState.EntityValue OldValue = 3;
  if (this->has_oldvalue()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::oldvalue(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameState.SetMutation)
  return target;
}

size_t SetMutation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameState.SetMutation)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .GameState.EntityRef Object = 1;
  if (this->has_object()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *object_);
  }

  // .GameState.EntityValue NewValue = 2;
  if (this->has_newvalue()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *newvalue_);
  }

  // .GameState.EntityValue OldValue = 3;
  if (this->has_oldvalue()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *oldvalue_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetMutation::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameState.SetMutation)
  GOOGLE_DCHECK_NE(&from, this);
  const SetMutation* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SetMutation>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameState.SetMutation)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameState.SetMutation)
    MergeFrom(*source);
  }
}

void SetMutation::MergeFrom(const SetMutation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameState.SetMutation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_object()) {
    _internal_mutable_object()->::GameState::EntityRef::MergeFrom(from._internal_object());
  }
  if (from.has_newvalue()) {
    _internal_mutable_newvalue()->::GameState::EntityValue::MergeFrom(from._internal_newvalue());
  }
  if (from.has_oldvalue()) {
    _internal_mutable_oldvalue()->::GameState::EntityValue::MergeFrom(from._internal_oldvalue());
  }
}

void SetMutation::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameState.SetMutation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetMutation::CopyFrom(const SetMutation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameState.SetMutation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetMutation::IsInitialized() const {
  return true;
}

void SetMutation::InternalSwap(SetMutation* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SetMutation, oldvalue_)
      + sizeof(SetMutation::oldvalue_)
      - PROTOBUF_FIELD_OFFSET(SetMutation, object_)>(
          reinterpret_cast<char*>(&object_),
          reinterpret_cast<char*>(&other->object_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SetMutation::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class RemoveMutation::_Internal {
 public:
  static const ::GameState::EntityRef& object(const RemoveMutation* msg);
  static const ::GameState::EntityValue& oldvalue(const RemoveMutation* msg);
};

const ::GameState::EntityRef&
RemoveMutation::_Internal::object(const RemoveMutation* msg) {
  return *msg->object_;
}
const ::GameState::EntityValue&
RemoveMutation::_Internal::oldvalue(const RemoveMutation* msg) {
  return *msg->oldvalue_;
}
RemoveMutation::RemoveMutation(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:GameState.RemoveMutation)
}
RemoveMutation::RemoveMutation(const RemoveMutation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_object()) {
    object_ = new ::GameState::EntityRef(*from.object_);
  } else {
    object_ = nullptr;
  }
  if (from._internal_has_oldvalue()) {
    oldvalue_ = new ::GameState::EntityValue(*from.oldvalue_);
  } else {
    oldvalue_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:GameState.RemoveMutation)
}

void RemoveMutation::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RemoveMutation_GameState_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&object_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&oldvalue_) -
      reinterpret_cast<char*>(&object_)) + sizeof(oldvalue_));
}

RemoveMutation::~RemoveMutation() {
  // @@protoc_insertion_point(destructor:GameState.RemoveMutation)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RemoveMutation::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete object_;
  if (this != internal_default_instance()) delete oldvalue_;
}

void RemoveMutation::ArenaDtor(void* object) {
  RemoveMutation* _this = reinterpret_cast< RemoveMutation* >(object);
  (void)_this;
}
void RemoveMutation::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RemoveMutation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RemoveMutation& RemoveMutation::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RemoveMutation_GameState_2eproto.base);
  return *internal_default_instance();
}


void RemoveMutation::Clear() {
// @@protoc_insertion_point(message_clear_start:GameState.RemoveMutation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && object_ != nullptr) {
    delete object_;
  }
  object_ = nullptr;
  if (GetArena() == nullptr && oldvalue_ != nullptr) {
    delete oldvalue_;
  }
  oldvalue_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RemoveMutation::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .GameState.EntityRef Object = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_object(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .GameState.EntityValue OldValue = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_oldvalue(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RemoveMutation::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GameState.RemoveMutation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .GameState.EntityRef Object = 1;
  if (this->has_object()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::object(this), target, stream);
  }

  // .GameState.EntityValue OldValue = 2;
  if (this->has_oldvalue()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::oldvalue(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameState.RemoveMutation)
  return target;
}

size_t RemoveMutation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameState.RemoveMutation)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .GameState.EntityRef Object = 1;
  if (this->has_object()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *object_);
  }

  // .GameState.EntityValue OldValue = 2;
  if (this->has_oldvalue()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *oldvalue_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RemoveMutation::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameState.RemoveMutation)
  GOOGLE_DCHECK_NE(&from, this);
  const RemoveMutation* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RemoveMutation>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameState.RemoveMutation)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameState.RemoveMutation)
    MergeFrom(*source);
  }
}

void RemoveMutation::MergeFrom(const RemoveMutation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameState.RemoveMutation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_object()) {
    _internal_mutable_object()->::GameState::EntityRef::MergeFrom(from._internal_object());
  }
  if (from.has_oldvalue()) {
    _internal_mutable_oldvalue()->::GameState::EntityValue::MergeFrom(from._internal_oldvalue());
  }
}

void RemoveMutation::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameState.RemoveMutation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RemoveMutation::CopyFrom(const RemoveMutation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameState.RemoveMutation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RemoveMutation::IsInitialized() const {
  return true;
}

void RemoveMutation::InternalSwap(RemoveMutation* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RemoveMutation, oldvalue_)
      + sizeof(RemoveMutation::oldvalue_)
      - PROTOBUF_FIELD_OFFSET(RemoveMutation, object_)>(
          reinterpret_cast<char*>(&object_),
          reinterpret_cast<char*>(&other->object_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RemoveMutation::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class InsertMutation::_Internal {
 public:
  static const ::GameState::EntityRef& object(const InsertMutation* msg);
  static const ::GameState::EntityValue& newvalue(const InsertMutation* msg);
};

const ::GameState::EntityRef&
InsertMutation::_Internal::object(const InsertMutation* msg) {
  return *msg->object_;
}
const ::GameState::EntityValue&
InsertMutation::_Internal::newvalue(const InsertMutation* msg) {
  return *msg->newvalue_;
}
InsertMutation::InsertMutation(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:GameState.InsertMutation)
}
InsertMutation::InsertMutation(const InsertMutation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_object()) {
    object_ = new ::GameState::EntityRef(*from.object_);
  } else {
    object_ = nullptr;
  }
  if (from._internal_has_newvalue()) {
    newvalue_ = new ::GameState::EntityValue(*from.newvalue_);
  } else {
    newvalue_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:GameState.InsertMutation)
}

void InsertMutation::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_InsertMutation_GameState_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&object_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&newvalue_) -
      reinterpret_cast<char*>(&object_)) + sizeof(newvalue_));
}

InsertMutation::~InsertMutation() {
  // @@protoc_insertion_point(destructor:GameState.InsertMutation)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void InsertMutation::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete object_;
  if (this != internal_default_instance()) delete newvalue_;
}

void InsertMutation::ArenaDtor(void* object) {
  InsertMutation* _this = reinterpret_cast< InsertMutation* >(object);
  (void)_this;
}
void InsertMutation::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void InsertMutation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const InsertMutation& InsertMutation::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_InsertMutation_GameState_2eproto.base);
  return *internal_default_instance();
}


void InsertMutation::Clear() {
// @@protoc_insertion_point(message_clear_start:GameState.InsertMutation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && object_ != nullptr) {
    delete object_;
  }
  object_ = nullptr;
  if (GetArena() == nullptr && newvalue_ != nullptr) {
    delete newvalue_;
  }
  newvalue_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InsertMutation::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .GameState.EntityRef Object = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_object(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .GameState.EntityValue NewValue = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_newvalue(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* InsertMutation::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GameState.InsertMutation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .GameState.EntityRef Object = 1;
  if (this->has_object()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::object(this), target, stream);
  }

  // .GameState.EntityValue NewValue = 2;
  if (this->has_newvalue()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::newvalue(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameState.InsertMutation)
  return target;
}

size_t InsertMutation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameState.InsertMutation)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .GameState.EntityRef Object = 1;
  if (this->has_object()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *object_);
  }

  // .GameState.EntityValue NewValue = 2;
  if (this->has_newvalue()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *newvalue_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InsertMutation::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameState.InsertMutation)
  GOOGLE_DCHECK_NE(&from, this);
  const InsertMutation* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<InsertMutation>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameState.InsertMutation)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameState.InsertMutation)
    MergeFrom(*source);
  }
}

void InsertMutation::MergeFrom(const InsertMutation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameState.InsertMutation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_object()) {
    _internal_mutable_object()->::GameState::EntityRef::MergeFrom(from._internal_object());
  }
  if (from.has_newvalue()) {
    _internal_mutable_newvalue()->::GameState::EntityValue::MergeFrom(from._internal_newvalue());
  }
}

void InsertMutation::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameState.InsertMutation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InsertMutation::CopyFrom(const InsertMutation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameState.InsertMutation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InsertMutation::IsInitialized() const {
  return true;
}

void InsertMutation::InternalSwap(InsertMutation* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(InsertMutation, newvalue_)
      + sizeof(InsertMutation::newvalue_)
      - PROTOBUF_FIELD_OFFSET(InsertMutation, object_)>(
          reinterpret_cast<char*>(&object_),
          reinterpret_cast<char*>(&other->object_));
}

::PROTOBUF_NAMESPACE_ID::Metadata InsertMutation::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Mutation::_Internal {
 public:
  static const ::GameState::SetMutation& set(const Mutation* msg);
  static const ::GameState::RemoveMutation& remove(const Mutation* msg);
  static const ::GameState::InsertMutation& insert(const Mutation* msg);
};

const ::GameState::SetMutation&
Mutation::_Internal::set(const Mutation* msg) {
  return *msg->mutation_.set_;
}
const ::GameState::RemoveMutation&
Mutation::_Internal::remove(const Mutation* msg) {
  return *msg->mutation_.remove_;
}
const ::GameState::InsertMutation&
Mutation::_Internal::insert(const Mutation* msg) {
  return *msg->mutation_.insert_;
}
void Mutation::set_allocated_set(::GameState::SetMutation* set) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_mutation();
  if (set) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(set);
    if (message_arena != submessage_arena) {
      set = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, set, submessage_arena);
    }
    set_has_set();
    mutation_.set_ = set;
  }
  // @@protoc_insertion_point(field_set_allocated:GameState.Mutation.Set)
}
void Mutation::set_allocated_remove(::GameState::RemoveMutation* remove) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_mutation();
  if (remove) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(remove);
    if (message_arena != submessage_arena) {
      remove = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, remove, submessage_arena);
    }
    set_has_remove();
    mutation_.remove_ = remove;
  }
  // @@protoc_insertion_point(field_set_allocated:GameState.Mutation.Remove)
}
void Mutation::set_allocated_insert(::GameState::InsertMutation* insert) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_mutation();
  if (insert) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(insert);
    if (message_arena != submessage_arena) {
      insert = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, insert, submessage_arena);
    }
    set_has_insert();
    mutation_.insert_ = insert;
  }
  // @@protoc_insertion_point(field_set_allocated:GameState.Mutation.Insert)
}
Mutation::Mutation(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:GameState.Mutation)
}
Mutation::Mutation(const Mutation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_mutation();
  switch (from.mutation_case()) {
    case kSet: {
      _internal_mutable_set()->::GameState::SetMutation::MergeFrom(from._internal_set());
      break;
    }
    case kRemove: {
      _internal_mutable_remove()->::GameState::RemoveMutation::MergeFrom(from._internal_remove());
      break;
    }
    case kInsert: {
      _internal_mutable_insert()->::GameState::InsertMutation::MergeFrom(from._internal_insert());
      break;
    }
    case MUTATION_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:GameState.Mutation)
}

void Mutation::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Mutation_GameState_2eproto.base);
  clear_has_mutation();
}

Mutation::~Mutation() {
  // @@protoc_insertion_point(destructor:GameState.Mutation)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Mutation::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_mutation()) {
    clear_mutation();
  }
}

void Mutation::ArenaDtor(void* object) {
  Mutation* _this = reinterpret_cast< Mutation* >(object);
  (void)_this;
}
void Mutation::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Mutation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Mutation& Mutation::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Mutation_GameState_2eproto.base);
  return *internal_default_instance();
}


void Mutation::clear_mutation() {
// @@protoc_insertion_point(one_of_clear_start:GameState.Mutation)
  switch (mutation_case()) {
    case kSet: {
      if (GetArena() == nullptr) {
        delete mutation_.set_;
      }
      break;
    }
    case kRemove: {
      if (GetArena() == nullptr) {
        delete mutation_.remove_;
      }
      break;
    }
    case kInsert: {
      if (GetArena() == nullptr) {
        delete mutation_.insert_;
      }
      break;
    }
    case MUTATION_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = MUTATION_NOT_SET;
}


void Mutation::Clear() {
// @@protoc_insertion_point(message_clear_start:GameState.Mutation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_mutation();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Mutation::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .GameState.SetMutation Set = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_set(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .GameState.RemoveMutation Remove = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_remove(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .GameState.InsertMutation Insert = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_insert(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Mutation::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GameState.Mutation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .GameState.SetMutation Set = 1;
  if (_internal_has_set()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::set(this), target, stream);
  }

  // .GameState.RemoveMutation Remove = 2;
  if (_internal_has_remove()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::remove(this), target, stream);
  }

  // .GameState.InsertMutation Insert = 3;
  if (_internal_has_insert()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::insert(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameState.Mutation)
  return target;
}

size_t Mutation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameState.Mutation)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (mutation_case()) {
    // .GameState.SetMutation Set = 1;
    case kSet: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *mutation_.set_);
      break;
    }
    // .GameState.RemoveMutation Remove = 2;
    case kRemove: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *mutation_.remove_);
      break;
    }
    // .GameState.InsertMutation Insert = 3;
    case kInsert: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *mutation_.insert_);
      break;
    }
    case MUTATION_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Mutation::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameState.Mutation)
  GOOGLE_DCHECK_NE(&from, this);
  const Mutation* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Mutation>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameState.Mutation)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameState.Mutation)
    MergeFrom(*source);
  }
}

void Mutation::MergeFrom(const Mutation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameState.Mutation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.mutation_case()) {
    case kSet: {
      _internal_mutable_set()->::GameState::SetMutation::MergeFrom(from._internal_set());
      break;
    }
    case kRemove: {
      _internal_mutable_remove()->::GameState::RemoveMutation::MergeFrom(from._internal_remove());
      break;
    }
    case kInsert: {
      _internal_mutable_insert()->::GameState::InsertMutation::MergeFrom(from._internal_insert());
      break;
    }
    case MUTATION_NOT_SET: {
      break;
    }
  }
}

void Mutation::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameState.Mutation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Mutation::CopyFrom(const Mutation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameState.Mutation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Mutation::IsInitialized() const {
  return true;
}

void Mutation::InternalSwap(Mutation* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(mutation_, other->mutation_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Mutation::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class GameState::_Internal {
 public:
  static const ::GameState::Integer& turnnumber(const GameState* msg);
};

const ::GameState::Integer&
GameState::_Internal::turnnumber(const GameState* msg) {
  return *msg->turnnumber_;
}
GameState::GameState(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  players_(arena),
  cards_(arena),
  tiles_(arena),
  teams_(arena),
  stack_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:GameState.GameState)
}
GameState::GameState(const GameState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      players_(from.players_),
      cards_(from.cards_),
      tiles_(from.tiles_),
      teams_(from.teams_),
      stack_(from.stack_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_turnnumber()) {
    turnnumber_ = new ::GameState::Integer(*from.turnnumber_);
  } else {
    turnnumber_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:GameState.GameState)
}

void GameState::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GameState_GameState_2eproto.base);
  turnnumber_ = nullptr;
}

GameState::~GameState() {
  // @@protoc_insertion_point(destructor:GameState.GameState)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GameState::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete turnnumber_;
}

void GameState::ArenaDtor(void* object) {
  GameState* _this = reinterpret_cast< GameState* >(object);
  (void)_this;
}
void GameState::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GameState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GameState& GameState::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GameState_GameState_2eproto.base);
  return *internal_default_instance();
}


void GameState::Clear() {
// @@protoc_insertion_point(message_clear_start:GameState.GameState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  players_.Clear();
  cards_.Clear();
  tiles_.Clear();
  teams_.Clear();
  stack_.Clear();
  if (GetArena() == nullptr && turnnumber_ != nullptr) {
    delete turnnumber_;
  }
  turnnumber_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GameState::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .GameState.Player Players = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_players(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .GameState.Card Cards = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_cards(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .GameState.Tile Tiles = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_tiles(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .GameState.Team Teams = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_teams(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // .GameState.Integer TurnNumber = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_turnnumber(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .GameState.Card Stack = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_stack(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GameState::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GameState.GameState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .GameState.Player Players = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_players_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_players(i), target, stream);
  }

  // repeated .GameState.Card Cards = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_cards_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_cards(i), target, stream);
  }

  // repeated .GameState.Tile Tiles = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_tiles_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_tiles(i), target, stream);
  }

  // repeated .GameState.Team Teams = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_teams_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_teams(i), target, stream);
  }

  // .GameState.Integer TurnNumber = 6;
  if (this->has_turnnumber()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::turnnumber(this), target, stream);
  }

  // repeated .GameState.Card Stack = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_stack_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, this->_internal_stack(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameState.GameState)
  return target;
}

size_t GameState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameState.GameState)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .GameState.Player Players = 1;
  total_size += 1UL * this->_internal_players_size();
  for (const auto& msg : this->players_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .GameState.Card Cards = 2;
  total_size += 1UL * this->_internal_cards_size();
  for (const auto& msg : this->cards_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .GameState.Tile Tiles = 3;
  total_size += 1UL * this->_internal_tiles_size();
  for (const auto& msg : this->tiles_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .GameState.Team Teams = 4;
  total_size += 1UL * this->_internal_teams_size();
  for (const auto& msg : this->teams_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .GameState.Card Stack = 7;
  total_size += 1UL * this->_internal_stack_size();
  for (const auto& msg : this->stack_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .GameState.Integer TurnNumber = 6;
  if (this->has_turnnumber()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *turnnumber_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameState::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameState.GameState)
  GOOGLE_DCHECK_NE(&from, this);
  const GameState* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GameState>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameState.GameState)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameState.GameState)
    MergeFrom(*source);
  }
}

void GameState::MergeFrom(const GameState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameState.GameState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  players_.MergeFrom(from.players_);
  cards_.MergeFrom(from.cards_);
  tiles_.MergeFrom(from.tiles_);
  teams_.MergeFrom(from.teams_);
  stack_.MergeFrom(from.stack_);
  if (from.has_turnnumber()) {
    _internal_mutable_turnnumber()->::GameState::Integer::MergeFrom(from._internal_turnnumber());
  }
}

void GameState::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameState.GameState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameState::CopyFrom(const GameState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameState.GameState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameState::IsInitialized() const {
  return true;
}

void GameState::InternalSwap(GameState* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  players_.InternalSwap(&other->players_);
  cards_.InternalSwap(&other->cards_);
  tiles_.InternalSwap(&other->tiles_);
  teams_.InternalSwap(&other->teams_);
  stack_.InternalSwap(&other->stack_);
  swap(turnnumber_, other->turnnumber_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GameState::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class GameInstance::_Internal {
 public:
  static const ::GameState::GameState& gamestate(const GameInstance* msg);
};

const ::GameState::GameState&
GameInstance::_Internal::gamestate(const GameInstance* msg) {
  return *msg->gamestate_;
}
GameInstance::GameInstance(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  history_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:GameState.GameInstance)
}
GameInstance::GameInstance(const GameInstance& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      history_(from.history_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_gamestate()) {
    gamestate_ = new ::GameState::GameState(*from.gamestate_);
  } else {
    gamestate_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:GameState.GameInstance)
}

void GameInstance::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GameInstance_GameState_2eproto.base);
  gamestate_ = nullptr;
}

GameInstance::~GameInstance() {
  // @@protoc_insertion_point(destructor:GameState.GameInstance)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GameInstance::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete gamestate_;
}

void GameInstance::ArenaDtor(void* object) {
  GameInstance* _this = reinterpret_cast< GameInstance* >(object);
  (void)_this;
}
void GameInstance::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GameInstance::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GameInstance& GameInstance::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GameInstance_GameState_2eproto.base);
  return *internal_default_instance();
}


void GameInstance::Clear() {
// @@protoc_insertion_point(message_clear_start:GameState.GameInstance)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  history_.Clear();
  if (GetArena() == nullptr && gamestate_ != nullptr) {
    delete gamestate_;
  }
  gamestate_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GameInstance::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .GameState.GameState GameState = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_gamestate(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .GameState.Mutation History = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_history(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GameInstance::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GameState.GameInstance)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .GameState.GameState GameState = 1;
  if (this->has_gamestate()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::gamestate(this), target, stream);
  }

  // repeated .GameState.Mutation History = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_history_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_history(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameState.GameInstance)
  return target;
}

size_t GameInstance::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameState.GameInstance)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .GameState.Mutation History = 2;
  total_size += 1UL * this->_internal_history_size();
  for (const auto& msg : this->history_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .GameState.GameState GameState = 1;
  if (this->has_gamestate()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *gamestate_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameInstance::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameState.GameInstance)
  GOOGLE_DCHECK_NE(&from, this);
  const GameInstance* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GameInstance>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameState.GameInstance)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameState.GameInstance)
    MergeFrom(*source);
  }
}

void GameInstance::MergeFrom(const GameInstance& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameState.GameInstance)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  history_.MergeFrom(from.history_);
  if (from.has_gamestate()) {
    _internal_mutable_gamestate()->::GameState::GameState::MergeFrom(from._internal_gamestate());
  }
}

void GameInstance::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameState.GameInstance)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameInstance::CopyFrom(const GameInstance& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameState.GameInstance)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameInstance::IsInitialized() const {
  return true;
}

void GameInstance::InternalSwap(GameInstance* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  history_.InternalSwap(&other->history_);
  swap(gamestate_, other->gamestate_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GameInstance::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace GameState
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::GameState::Path* Arena::CreateMaybeMessage< ::GameState::Path >(Arena* arena) {
  return Arena::CreateMessageInternal< ::GameState::Path >(arena);
}
template<> PROTOBUF_NOINLINE ::GameState::Integer* Arena::CreateMaybeMessage< ::GameState::Integer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::GameState::Integer >(arena);
}
template<> PROTOBUF_NOINLINE ::GameState::Vec2i* Arena::CreateMaybeMessage< ::GameState::Vec2i >(Arena* arena) {
  return Arena::CreateMessageInternal< ::GameState::Vec2i >(arena);
}
template<> PROTOBUF_NOINLINE ::GameState::PlayerRef* Arena::CreateMaybeMessage< ::GameState::PlayerRef >(Arena* arena) {
  return Arena::CreateMessageInternal< ::GameState::PlayerRef >(arena);
}
template<> PROTOBUF_NOINLINE ::GameState::CardRef* Arena::CreateMaybeMessage< ::GameState::CardRef >(Arena* arena) {
  return Arena::CreateMessageInternal< ::GameState::CardRef >(arena);
}
template<> PROTOBUF_NOINLINE ::GameState::TileRef* Arena::CreateMaybeMessage< ::GameState::TileRef >(Arena* arena) {
  return Arena::CreateMessageInternal< ::GameState::TileRef >(arena);
}
template<> PROTOBUF_NOINLINE ::GameState::IntegerRef* Arena::CreateMaybeMessage< ::GameState::IntegerRef >(Arena* arena) {
  return Arena::CreateMessageInternal< ::GameState::IntegerRef >(arena);
}
template<> PROTOBUF_NOINLINE ::GameState::Vec2iRef* Arena::CreateMaybeMessage< ::GameState::Vec2iRef >(Arena* arena) {
  return Arena::CreateMessageInternal< ::GameState::Vec2iRef >(arena);
}
template<> PROTOBUF_NOINLINE ::GameState::IntegerValue* Arena::CreateMaybeMessage< ::GameState::IntegerValue >(Arena* arena) {
  return Arena::CreateMessageInternal< ::GameState::IntegerValue >(arena);
}
template<> PROTOBUF_NOINLINE ::GameState::Vec2iValue* Arena::CreateMaybeMessage< ::GameState::Vec2iValue >(Arena* arena) {
  return Arena::CreateMessageInternal< ::GameState::Vec2iValue >(arena);
}
template<> PROTOBUF_NOINLINE ::GameState::EntityRef* Arena::CreateMaybeMessage< ::GameState::EntityRef >(Arena* arena) {
  return Arena::CreateMessageInternal< ::GameState::EntityRef >(arena);
}
template<> PROTOBUF_NOINLINE ::GameState::EntityValue* Arena::CreateMaybeMessage< ::GameState::EntityValue >(Arena* arena) {
  return Arena::CreateMessageInternal< ::GameState::EntityValue >(arena);
}
template<> PROTOBUF_NOINLINE ::GameState::Player_Stats* Arena::CreateMaybeMessage< ::GameState::Player_Stats >(Arena* arena) {
  return Arena::CreateMessageInternal< ::GameState::Player_Stats >(arena);
}
template<> PROTOBUF_NOINLINE ::GameState::Player* Arena::CreateMaybeMessage< ::GameState::Player >(Arena* arena) {
  return Arena::CreateMessageInternal< ::GameState::Player >(arena);
}
template<> PROTOBUF_NOINLINE ::GameState::Tile* Arena::CreateMaybeMessage< ::GameState::Tile >(Arena* arena) {
  return Arena::CreateMessageInternal< ::GameState::Tile >(arena);
}
template<> PROTOBUF_NOINLINE ::GameState::Card* Arena::CreateMaybeMessage< ::GameState::Card >(Arena* arena) {
  return Arena::CreateMessageInternal< ::GameState::Card >(arena);
}
template<> PROTOBUF_NOINLINE ::GameState::Team* Arena::CreateMaybeMessage< ::GameState::Team >(Arena* arena) {
  return Arena::CreateMessageInternal< ::GameState::Team >(arena);
}
template<> PROTOBUF_NOINLINE ::GameState::SetMutation* Arena::CreateMaybeMessage< ::GameState::SetMutation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::GameState::SetMutation >(arena);
}
template<> PROTOBUF_NOINLINE ::GameState::RemoveMutation* Arena::CreateMaybeMessage< ::GameState::RemoveMutation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::GameState::RemoveMutation >(arena);
}
template<> PROTOBUF_NOINLINE ::GameState::InsertMutation* Arena::CreateMaybeMessage< ::GameState::InsertMutation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::GameState::InsertMutation >(arena);
}
template<> PROTOBUF_NOINLINE ::GameState::Mutation* Arena::CreateMaybeMessage< ::GameState::Mutation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::GameState::Mutation >(arena);
}
template<> PROTOBUF_NOINLINE ::GameState::GameState* Arena::CreateMaybeMessage< ::GameState::GameState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::GameState::GameState >(arena);
}
template<> PROTOBUF_NOINLINE ::GameState::GameInstance* Arena::CreateMaybeMessage< ::GameState::GameInstance >(Arena* arena) {
  return Arena::CreateMessageInternal< ::GameState::GameInstance >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
