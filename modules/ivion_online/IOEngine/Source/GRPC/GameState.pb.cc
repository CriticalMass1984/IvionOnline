// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: GameState.proto

#include <GRPC/GameState.pb.h>

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_Effects_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CardEffect_Effects_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_GameState_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_Card_GameState_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_GameState_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CardMetaData_GameState_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_GameState_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_CardStats_GameState_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_GameState_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_GameState_GameState_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_GameState_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_InsertMutation_GameState_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_GameState_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_Mutation_GameState_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_GameState_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_Player_GameState_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_GameState_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_RemoveMutation_GameState_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_GameState_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SetMutation_GameState_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_GameState_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Team_GameState_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_GameState_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_Tile_GameState_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Types_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CardRef_Types_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Types_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_EntityRef_Types_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Types_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_EntityValue_Types_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Types_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Integer_Types_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Types_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Path_Types_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Types_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PlayerRef_Types_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Types_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Vec2i_Types_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Types_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Vec2iRef_Types_2eproto;
namespace GameState {
class PlayerDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Player> _instance;
} _Player_default_instance_;
class TileDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Tile> _instance;
} _Tile_default_instance_;
class CardMetaDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CardMetaData> _instance;
} _CardMetaData_default_instance_;
class CardStatsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CardStats> _instance;
} _CardStats_default_instance_;
class CardDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Card> _instance;
} _Card_default_instance_;
class TeamDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Team> _instance;
} _Team_default_instance_;
class SetMutationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SetMutation> _instance;
} _SetMutation_default_instance_;
class RemoveMutationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RemoveMutation> _instance;
} _RemoveMutation_default_instance_;
class InsertMutationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<InsertMutation> _instance;
} _InsertMutation_default_instance_;
class MutationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Mutation> _instance;
} _Mutation_default_instance_;
class GameStateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GameState> _instance;
} _GameState_default_instance_;
class GameInstanceDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GameInstance> _instance;
} _GameInstance_default_instance_;
}  // namespace GameState
static void InitDefaultsscc_info_Card_GameState_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::GameState::_Card_default_instance_;
    new (ptr) ::GameState::Card();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_Card_GameState_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, 0, InitDefaultsscc_info_Card_GameState_2eproto}, {
      &scc_info_CardMetaData_GameState_2eproto.base,
      &scc_info_PlayerRef_Types_2eproto.base,
      &scc_info_EntityRef_Types_2eproto.base,
      &scc_info_CardStats_GameState_2eproto.base,}};

static void InitDefaultsscc_info_CardMetaData_GameState_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::GameState::_CardMetaData_default_instance_;
    new (ptr) ::GameState::CardMetaData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CardMetaData_GameState_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CardMetaData_GameState_2eproto}, {}};

static void InitDefaultsscc_info_CardStats_GameState_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::GameState::_CardStats_default_instance_;
    new (ptr) ::GameState::CardStats();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_CardStats_GameState_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_CardStats_GameState_2eproto}, {
      &scc_info_Integer_Types_2eproto.base,
      &scc_info_CardEffect_Effects_2eproto.base,}};

static void InitDefaultsscc_info_GameInstance_GameState_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::GameState::_GameInstance_default_instance_;
    new (ptr) ::GameState::GameInstance();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_GameInstance_GameState_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_GameInstance_GameState_2eproto}, {
      &scc_info_GameState_GameState_2eproto.base,
      &scc_info_Mutation_GameState_2eproto.base,}};

static void InitDefaultsscc_info_GameState_GameState_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::GameState::_GameState_default_instance_;
    new (ptr) ::GameState::GameState();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_GameState_GameState_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 5, 0, InitDefaultsscc_info_GameState_GameState_2eproto}, {
      &scc_info_Player_GameState_2eproto.base,
      &scc_info_Card_GameState_2eproto.base,
      &scc_info_Tile_GameState_2eproto.base,
      &scc_info_Team_GameState_2eproto.base,
      &scc_info_Integer_Types_2eproto.base,}};

static void InitDefaultsscc_info_InsertMutation_GameState_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::GameState::_InsertMutation_default_instance_;
    new (ptr) ::GameState::InsertMutation();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_InsertMutation_GameState_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_InsertMutation_GameState_2eproto}, {
      &scc_info_Path_Types_2eproto.base,
      &scc_info_EntityValue_Types_2eproto.base,}};

static void InitDefaultsscc_info_Mutation_GameState_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::GameState::_Mutation_default_instance_;
    new (ptr) ::GameState::Mutation();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_Mutation_GameState_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_Mutation_GameState_2eproto}, {
      &scc_info_SetMutation_GameState_2eproto.base,
      &scc_info_RemoveMutation_GameState_2eproto.base,
      &scc_info_InsertMutation_GameState_2eproto.base,}};

static void InitDefaultsscc_info_Player_GameState_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::GameState::_Player_default_instance_;
    new (ptr) ::GameState::Player();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_Player_GameState_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_Player_GameState_2eproto}, {
      &scc_info_CardRef_Types_2eproto.base,
      &scc_info_Vec2iRef_Types_2eproto.base,
      &scc_info_Integer_Types_2eproto.base,}};

static void InitDefaultsscc_info_RemoveMutation_GameState_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::GameState::_RemoveMutation_default_instance_;
    new (ptr) ::GameState::RemoveMutation();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_RemoveMutation_GameState_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_RemoveMutation_GameState_2eproto}, {
      &scc_info_Path_Types_2eproto.base,
      &scc_info_EntityValue_Types_2eproto.base,}};

static void InitDefaultsscc_info_SetMutation_GameState_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::GameState::_SetMutation_default_instance_;
    new (ptr) ::GameState::SetMutation();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SetMutation_GameState_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_SetMutation_GameState_2eproto}, {
      &scc_info_Path_Types_2eproto.base,
      &scc_info_EntityValue_Types_2eproto.base,}};

static void InitDefaultsscc_info_Team_GameState_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::GameState::_Team_default_instance_;
    new (ptr) ::GameState::Team();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Team_GameState_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Team_GameState_2eproto}, {
      &scc_info_PlayerRef_Types_2eproto.base,}};

static void InitDefaultsscc_info_Tile_GameState_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::GameState::_Tile_default_instance_;
    new (ptr) ::GameState::Tile();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_Tile_GameState_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_Tile_GameState_2eproto}, {
      &scc_info_Vec2i_Types_2eproto.base,
      &scc_info_PlayerRef_Types_2eproto.base,
      &scc_info_CardRef_Types_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_GameState_2eproto[12];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_GameState_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_GameState_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_GameState_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::GameState::Player, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::GameState::Player, name_),
  PROTOBUF_FIELD_OFFSET(::GameState::Player, uid_),
  PROTOBUF_FIELD_OFFSET(::GameState::Player, field_),
  PROTOBUF_FIELD_OFFSET(::GameState::Player, hand_),
  PROTOBUF_FIELD_OFFSET(::GameState::Player, deck_),
  PROTOBUF_FIELD_OFFSET(::GameState::Player, discard_),
  PROTOBUF_FIELD_OFFSET(::GameState::Player, feats_),
  PROTOBUF_FIELD_OFFSET(::GameState::Player, position_),
  PROTOBUF_FIELD_OFFSET(::GameState::Player, health_),
  PROTOBUF_FIELD_OFFSET(::GameState::Player, actions_),
  PROTOBUF_FIELD_OFFSET(::GameState::Player, power_),
  PROTOBUF_FIELD_OFFSET(::GameState::Player, slow_),
  PROTOBUF_FIELD_OFFSET(::GameState::Player, silence_),
  PROTOBUF_FIELD_OFFSET(::GameState::Player, disarm_),
  PROTOBUF_FIELD_OFFSET(::GameState::Player, initiative_),
  PROTOBUF_FIELD_OFFSET(::GameState::Player, maxhealth_),
  PROTOBUF_FIELD_OFFSET(::GameState::Player, maxactions_),
  PROTOBUF_FIELD_OFFSET(::GameState::Player, maxpower_),
  PROTOBUF_FIELD_OFFSET(::GameState::Player, maxslow_),
  PROTOBUF_FIELD_OFFSET(::GameState::Player, maxsilence_),
  PROTOBUF_FIELD_OFFSET(::GameState::Player, maxdisarm_),
  PROTOBUF_FIELD_OFFSET(::GameState::Player, maxinitiative_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::GameState::Tile, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::GameState::Tile, position_),
  PROTOBUF_FIELD_OFFSET(::GameState::Tile, terrain_),
  PROTOBUF_FIELD_OFFSET(::GameState::Tile, players_),
  PROTOBUF_FIELD_OFFSET(::GameState::Tile, cards_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::GameState::CardMetaData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::GameState::CardMetaData, basename_),
  PROTOBUF_FIELD_OFFSET(::GameState::CardMetaData, archetype_),
  PROTOBUF_FIELD_OFFSET(::GameState::CardMetaData, ultimate_),
  PROTOBUF_FIELD_OFFSET(::GameState::CardMetaData, feat_),
  PROTOBUF_FIELD_OFFSET(::GameState::CardMetaData, basicaction_),
  PROTOBUF_FIELD_OFFSET(::GameState::CardMetaData, colors_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::GameState::CardStats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::GameState::CardStats, actioncost_),
  PROTOBUF_FIELD_OFFSET(::GameState::CardStats, powercost_),
  PROTOBUF_FIELD_OFFSET(::GameState::CardStats, range_),
  PROTOBUF_FIELD_OFFSET(::GameState::CardStats, affectedbyslow_),
  PROTOBUF_FIELD_OFFSET(::GameState::CardStats, affectedbysilence_),
  PROTOBUF_FIELD_OFFSET(::GameState::CardStats, affectedbydisarm_),
  PROTOBUF_FIELD_OFFSET(::GameState::CardStats, omnipresenteffect_),
  PROTOBUF_FIELD_OFFSET(::GameState::CardStats, passiveeffect_),
  PROTOBUF_FIELD_OFFSET(::GameState::CardStats, feateffect_),
  PROTOBUF_FIELD_OFFSET(::GameState::CardStats, playeffect_),
  PROTOBUF_FIELD_OFFSET(::GameState::CardStats, resolveeffect_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::GameState::Card, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::GameState::Card, name_),
  PROTOBUF_FIELD_OFFSET(::GameState::Card, metadata_),
  PROTOBUF_FIELD_OFFSET(::GameState::Card, owner_),
  PROTOBUF_FIELD_OFFSET(::GameState::Card, controller_),
  PROTOBUF_FIELD_OFFSET(::GameState::Card, attached_),
  PROTOBUF_FIELD_OFFSET(::GameState::Card, stats_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::GameState::Team, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::GameState::Team, players_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::GameState::SetMutation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::GameState::SetMutation, object_),
  PROTOBUF_FIELD_OFFSET(::GameState::SetMutation, newvalue_),
  PROTOBUF_FIELD_OFFSET(::GameState::SetMutation, oldvalue_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::GameState::RemoveMutation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::GameState::RemoveMutation, object_),
  PROTOBUF_FIELD_OFFSET(::GameState::RemoveMutation, oldvalue_),
  PROTOBUF_FIELD_OFFSET(::GameState::RemoveMutation, index_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::GameState::InsertMutation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::GameState::InsertMutation, object_),
  PROTOBUF_FIELD_OFFSET(::GameState::InsertMutation, newvalue_),
  PROTOBUF_FIELD_OFFSET(::GameState::InsertMutation, index_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::GameState::Mutation, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::GameState::Mutation, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::GameState::Mutation, mutation_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::GameState::GameState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::GameState::GameState, players_),
  PROTOBUF_FIELD_OFFSET(::GameState::GameState, cards_),
  PROTOBUF_FIELD_OFFSET(::GameState::GameState, tiles_),
  PROTOBUF_FIELD_OFFSET(::GameState::GameState, teams_),
  PROTOBUF_FIELD_OFFSET(::GameState::GameState, turnnumber_),
  PROTOBUF_FIELD_OFFSET(::GameState::GameState, stack_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::GameState::GameInstance, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::GameState::GameInstance, gamestate_),
  PROTOBUF_FIELD_OFFSET(::GameState::GameInstance, history_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::GameState::Player)},
  { 27, -1, sizeof(::GameState::Tile)},
  { 36, -1, sizeof(::GameState::CardMetaData)},
  { 47, -1, sizeof(::GameState::CardStats)},
  { 63, -1, sizeof(::GameState::Card)},
  { 74, -1, sizeof(::GameState::Team)},
  { 80, -1, sizeof(::GameState::SetMutation)},
  { 88, -1, sizeof(::GameState::RemoveMutation)},
  { 96, -1, sizeof(::GameState::InsertMutation)},
  { 104, -1, sizeof(::GameState::Mutation)},
  { 113, -1, sizeof(::GameState::GameState)},
  { 124, -1, sizeof(::GameState::GameInstance)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::GameState::_Player_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::GameState::_Tile_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::GameState::_CardMetaData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::GameState::_CardStats_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::GameState::_Card_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::GameState::_Team_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::GameState::_SetMutation_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::GameState::_RemoveMutation_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::GameState::_InsertMutation_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::GameState::_Mutation_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::GameState::_GameState_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::GameState::_GameInstance_default_instance_),
};

const char descriptor_table_protodef_GameState_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\017GameState.proto\022\tGameState\032\013Types.prot"
  "o\032\rEffects.proto\"\274\005\n\006Player\022\014\n\004Name\030\001 \001("
  "\t\022\013\n\003UID\030\002 \001(\t\022\035\n\005Field\030\003 \003(\0132\016.Types.Ca"
  "rdRef\022\034\n\004Hand\030\004 \003(\0132\016.Types.CardRef\022\034\n\004D"
  "eck\030\005 \003(\0132\016.Types.CardRef\022\037\n\007Discard\030\006 \003"
  "(\0132\016.Types.CardRef\022\035\n\005Feats\030\007 \003(\0132\016.Type"
  "s.CardRef\022!\n\010Position\030\010 \001(\0132\017.Types.Vec2"
  "iRef\022\036\n\006Health\030\t \001(\0132\016.Types.Integer\022\037\n\007"
  "Actions\030\n \001(\0132\016.Types.Integer\022\035\n\005Power\030\013"
  " \001(\0132\016.Types.Integer\022\034\n\004Slow\030\014 \001(\0132\016.Typ"
  "es.Integer\022\037\n\007Silence\030\r \001(\0132\016.Types.Inte"
  "ger\022\036\n\006Disarm\030\016 \001(\0132\016.Types.Integer\022\"\n\nI"
  "nitiative\030\017 \001(\0132\016.Types.Integer\022!\n\tMaxHe"
  "alth\030\020 \001(\0132\016.Types.Integer\022\"\n\nMaxActions"
  "\030\021 \001(\0132\016.Types.Integer\022 \n\010MaxPower\030\022 \001(\013"
  "2\016.Types.Integer\022\037\n\007MaxSlow\030\023 \001(\0132\016.Type"
  "s.Integer\022\"\n\nMaxSilence\030\024 \001(\0132\016.Types.In"
  "teger\022!\n\tMaxDisarm\030\025 \001(\0132\016.Types.Integer"
  "\022%\n\rMaxInitiative\030\026 \001(\0132\016.Types.Integer\""
  "\215\001\n\004Tile\022\036\n\010Position\030\001 \001(\0132\014.Types.Vec2i"
  "\022#\n\007Terrain\030\002 \001(\0162\022.Types.TerrainType\022!\n"
  "\007Players\030\003 \003(\0132\020.Types.PlayerRef\022\035\n\005Card"
  "s\030\004 \003(\0132\016.Types.CardRef\"\336\001\n\014CardMetaData"
  "\022\020\n\010BaseName\030\001 \001(\t\022\021\n\tArchetype\030\002 \001(\t\022\020\n"
  "\010Ultimate\030\003 \001(\010\022\014\n\004Feat\030\004 \001(\010\022\023\n\013BasicAc"
  "tion\030\005 \001(\010\022-\n\006Colors\030\006 \003(\0162\035.GameState.C"
  "ardMetaData.Color\"E\n\005Color\022\010\n\004GRAY\020\000\022\t\n\005"
  "BLACK\020\001\022\007\n\003RED\020\002\022\t\n\005GREEN\020\003\022\010\n\004BLUE\020\004\022\t\n"
  "\005WHITE\020\005\"\310\003\n\tCardStats\022\"\n\nActionCost\030\001 \001"
  "(\0132\016.Types.Integer\022!\n\tPowerCost\030\002 \001(\0132\016."
  "Types.Integer\022\035\n\005Range\030\003 \001(\0132\016.Types.Int"
  "eger\022&\n\016AffectedBySlow\030\004 \001(\0132\016.Types.Int"
  "eger\022)\n\021AffectedBySilence\030\005 \001(\0132\016.Types."
  "Integer\022(\n\020AffectedByDisarm\030\006 \001(\0132\016.Type"
  "s.Integer\022.\n\021OmniPresentEffect\030\007 \001(\0132\023.E"
  "ffects.CardEffect\022*\n\rPassiveEffect\030\010 \001(\013"
  "2\023.Effects.CardEffect\022\'\n\nFeatEffect\030\t \001("
  "\0132\023.Effects.CardEffect\022\'\n\nPlayEffect\030\n \001"
  "(\0132\023.Effects.CardEffect\022*\n\rResolveEffect"
  "\030\013 \001(\0132\023.Effects.CardEffect\"\317\001\n\004Card\022\014\n\004"
  "Name\030\001 \001(\t\022)\n\010MetaData\030\002 \001(\0132\027.GameState"
  ".CardMetaData\022\037\n\005Owner\030\003 \001(\0132\020.Types.Pla"
  "yerRef\022$\n\nController\030\004 \001(\0132\020.Types.Playe"
  "rRef\022\"\n\010Attached\030\005 \001(\0132\020.Types.EntityRef"
  "\022#\n\005Stats\030\006 \001(\0132\024.GameState.CardStats\")\n"
  "\004Team\022!\n\007Players\030\001 \003(\0132\020.Types.PlayerRef"
  "\"v\n\013SetMutation\022\033\n\006Object\030\001 \001(\0132\013.Types."
  "Path\022$\n\010NewValue\030\002 \001(\0132\022.Types.EntityVal"
  "ue\022$\n\010OldValue\030\003 \001(\0132\022.Types.EntityValue"
  "\"b\n\016RemoveMutation\022\033\n\006Object\030\001 \001(\0132\013.Typ"
  "es.Path\022$\n\010OldValue\030\002 \001(\0132\022.Types.Entity"
  "Value\022\r\n\005Index\030\003 \001(\005\"b\n\016InsertMutation\022\033"
  "\n\006Object\030\001 \001(\0132\013.Types.Path\022$\n\010NewValue\030"
  "\002 \001(\0132\022.Types.EntityValue\022\r\n\005Index\030\003 \001(\005"
  "\"\227\001\n\010Mutation\022%\n\003Set\030\001 \001(\0132\026.GameState.S"
  "etMutationH\000\022+\n\006Remove\030\002 \001(\0132\031.GameState"
  ".RemoveMutationH\000\022+\n\006Insert\030\003 \001(\0132\031.Game"
  "State.InsertMutationH\000B\n\n\010mutation\"\323\001\n\tG"
  "ameState\022\"\n\007Players\030\001 \003(\0132\021.GameState.Pl"
  "ayer\022\036\n\005Cards\030\002 \003(\0132\017.GameState.Card\022\036\n\005"
  "Tiles\030\003 \003(\0132\017.GameState.Tile\022\036\n\005Teams\030\004 "
  "\003(\0132\017.GameState.Team\022\"\n\nTurnNumber\030\006 \001(\013"
  "2\016.Types.Integer\022\036\n\005Stack\030\007 \003(\0132\017.GameSt"
  "ate.Card\"]\n\014GameInstance\022\'\n\tGameState\030\001 "
  "\001(\0132\024.GameState.GameState\022$\n\007History\030\002 \003"
  "(\0132\023.GameState.Mutationb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_GameState_2eproto_deps[2] = {
  &::descriptor_table_Effects_2eproto,
  &::descriptor_table_Types_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_GameState_2eproto_sccs[12] = {
  &scc_info_Card_GameState_2eproto.base,
  &scc_info_CardMetaData_GameState_2eproto.base,
  &scc_info_CardStats_GameState_2eproto.base,
  &scc_info_GameInstance_GameState_2eproto.base,
  &scc_info_GameState_GameState_2eproto.base,
  &scc_info_InsertMutation_GameState_2eproto.base,
  &scc_info_Mutation_GameState_2eproto.base,
  &scc_info_Player_GameState_2eproto.base,
  &scc_info_RemoveMutation_GameState_2eproto.base,
  &scc_info_SetMutation_GameState_2eproto.base,
  &scc_info_Team_GameState_2eproto.base,
  &scc_info_Tile_GameState_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_GameState_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_GameState_2eproto = {
  false, false, descriptor_table_protodef_GameState_2eproto, "GameState.proto", 2631,
  &descriptor_table_GameState_2eproto_once, descriptor_table_GameState_2eproto_sccs, descriptor_table_GameState_2eproto_deps, 12, 2,
  schemas, file_default_instances, TableStruct_GameState_2eproto::offsets,
  file_level_metadata_GameState_2eproto, 12, file_level_enum_descriptors_GameState_2eproto, file_level_service_descriptors_GameState_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_GameState_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_GameState_2eproto)), true);
namespace GameState {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CardMetaData_Color_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_GameState_2eproto);
  return file_level_enum_descriptors_GameState_2eproto[0];
}
bool CardMetaData_Color_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr CardMetaData_Color CardMetaData::GRAY;
constexpr CardMetaData_Color CardMetaData::BLACK;
constexpr CardMetaData_Color CardMetaData::RED;
constexpr CardMetaData_Color CardMetaData::GREEN;
constexpr CardMetaData_Color CardMetaData::BLUE;
constexpr CardMetaData_Color CardMetaData::WHITE;
constexpr CardMetaData_Color CardMetaData::Color_MIN;
constexpr CardMetaData_Color CardMetaData::Color_MAX;
constexpr int CardMetaData::Color_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

class Player::_Internal {
 public:
  static const ::Types::Vec2iRef& position(const Player* msg);
  static const ::Types::Integer& health(const Player* msg);
  static const ::Types::Integer& actions(const Player* msg);
  static const ::Types::Integer& power(const Player* msg);
  static const ::Types::Integer& slow(const Player* msg);
  static const ::Types::Integer& silence(const Player* msg);
  static const ::Types::Integer& disarm(const Player* msg);
  static const ::Types::Integer& initiative(const Player* msg);
  static const ::Types::Integer& maxhealth(const Player* msg);
  static const ::Types::Integer& maxactions(const Player* msg);
  static const ::Types::Integer& maxpower(const Player* msg);
  static const ::Types::Integer& maxslow(const Player* msg);
  static const ::Types::Integer& maxsilence(const Player* msg);
  static const ::Types::Integer& maxdisarm(const Player* msg);
  static const ::Types::Integer& maxinitiative(const Player* msg);
};

const ::Types::Vec2iRef&
Player::_Internal::position(const Player* msg) {
  return *msg->position_;
}
const ::Types::Integer&
Player::_Internal::health(const Player* msg) {
  return *msg->health_;
}
const ::Types::Integer&
Player::_Internal::actions(const Player* msg) {
  return *msg->actions_;
}
const ::Types::Integer&
Player::_Internal::power(const Player* msg) {
  return *msg->power_;
}
const ::Types::Integer&
Player::_Internal::slow(const Player* msg) {
  return *msg->slow_;
}
const ::Types::Integer&
Player::_Internal::silence(const Player* msg) {
  return *msg->silence_;
}
const ::Types::Integer&
Player::_Internal::disarm(const Player* msg) {
  return *msg->disarm_;
}
const ::Types::Integer&
Player::_Internal::initiative(const Player* msg) {
  return *msg->initiative_;
}
const ::Types::Integer&
Player::_Internal::maxhealth(const Player* msg) {
  return *msg->maxhealth_;
}
const ::Types::Integer&
Player::_Internal::maxactions(const Player* msg) {
  return *msg->maxactions_;
}
const ::Types::Integer&
Player::_Internal::maxpower(const Player* msg) {
  return *msg->maxpower_;
}
const ::Types::Integer&
Player::_Internal::maxslow(const Player* msg) {
  return *msg->maxslow_;
}
const ::Types::Integer&
Player::_Internal::maxsilence(const Player* msg) {
  return *msg->maxsilence_;
}
const ::Types::Integer&
Player::_Internal::maxdisarm(const Player* msg) {
  return *msg->maxdisarm_;
}
const ::Types::Integer&
Player::_Internal::maxinitiative(const Player* msg) {
  return *msg->maxinitiative_;
}
void Player::clear_field() {
  field_.Clear();
}
void Player::clear_hand() {
  hand_.Clear();
}
void Player::clear_deck() {
  deck_.Clear();
}
void Player::clear_discard() {
  discard_.Clear();
}
void Player::clear_feats() {
  feats_.Clear();
}
void Player::clear_position() {
  if (GetArena() == nullptr && position_ != nullptr) {
    delete position_;
  }
  position_ = nullptr;
}
void Player::clear_health() {
  if (GetArena() == nullptr && health_ != nullptr) {
    delete health_;
  }
  health_ = nullptr;
}
void Player::clear_actions() {
  if (GetArena() == nullptr && actions_ != nullptr) {
    delete actions_;
  }
  actions_ = nullptr;
}
void Player::clear_power() {
  if (GetArena() == nullptr && power_ != nullptr) {
    delete power_;
  }
  power_ = nullptr;
}
void Player::clear_slow() {
  if (GetArena() == nullptr && slow_ != nullptr) {
    delete slow_;
  }
  slow_ = nullptr;
}
void Player::clear_silence() {
  if (GetArena() == nullptr && silence_ != nullptr) {
    delete silence_;
  }
  silence_ = nullptr;
}
void Player::clear_disarm() {
  if (GetArena() == nullptr && disarm_ != nullptr) {
    delete disarm_;
  }
  disarm_ = nullptr;
}
void Player::clear_initiative() {
  if (GetArena() == nullptr && initiative_ != nullptr) {
    delete initiative_;
  }
  initiative_ = nullptr;
}
void Player::clear_maxhealth() {
  if (GetArena() == nullptr && maxhealth_ != nullptr) {
    delete maxhealth_;
  }
  maxhealth_ = nullptr;
}
void Player::clear_maxactions() {
  if (GetArena() == nullptr && maxactions_ != nullptr) {
    delete maxactions_;
  }
  maxactions_ = nullptr;
}
void Player::clear_maxpower() {
  if (GetArena() == nullptr && maxpower_ != nullptr) {
    delete maxpower_;
  }
  maxpower_ = nullptr;
}
void Player::clear_maxslow() {
  if (GetArena() == nullptr && maxslow_ != nullptr) {
    delete maxslow_;
  }
  maxslow_ = nullptr;
}
void Player::clear_maxsilence() {
  if (GetArena() == nullptr && maxsilence_ != nullptr) {
    delete maxsilence_;
  }
  maxsilence_ = nullptr;
}
void Player::clear_maxdisarm() {
  if (GetArena() == nullptr && maxdisarm_ != nullptr) {
    delete maxdisarm_;
  }
  maxdisarm_ = nullptr;
}
void Player::clear_maxinitiative() {
  if (GetArena() == nullptr && maxinitiative_ != nullptr) {
    delete maxinitiative_;
  }
  maxinitiative_ = nullptr;
}
Player::Player(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  field_(arena),
  hand_(arena),
  deck_(arena),
  discard_(arena),
  feats_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:GameState.Player)
}
Player::Player(const Player& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      field_(from.field_),
      hand_(from.hand_),
      deck_(from.deck_),
      discard_(from.discard_),
      feats_(from.feats_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  uid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_uid().empty()) {
    uid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_uid(), 
      GetArena());
  }
  if (from._internal_has_position()) {
    position_ = new ::Types::Vec2iRef(*from.position_);
  } else {
    position_ = nullptr;
  }
  if (from._internal_has_health()) {
    health_ = new ::Types::Integer(*from.health_);
  } else {
    health_ = nullptr;
  }
  if (from._internal_has_actions()) {
    actions_ = new ::Types::Integer(*from.actions_);
  } else {
    actions_ = nullptr;
  }
  if (from._internal_has_power()) {
    power_ = new ::Types::Integer(*from.power_);
  } else {
    power_ = nullptr;
  }
  if (from._internal_has_slow()) {
    slow_ = new ::Types::Integer(*from.slow_);
  } else {
    slow_ = nullptr;
  }
  if (from._internal_has_silence()) {
    silence_ = new ::Types::Integer(*from.silence_);
  } else {
    silence_ = nullptr;
  }
  if (from._internal_has_disarm()) {
    disarm_ = new ::Types::Integer(*from.disarm_);
  } else {
    disarm_ = nullptr;
  }
  if (from._internal_has_initiative()) {
    initiative_ = new ::Types::Integer(*from.initiative_);
  } else {
    initiative_ = nullptr;
  }
  if (from._internal_has_maxhealth()) {
    maxhealth_ = new ::Types::Integer(*from.maxhealth_);
  } else {
    maxhealth_ = nullptr;
  }
  if (from._internal_has_maxactions()) {
    maxactions_ = new ::Types::Integer(*from.maxactions_);
  } else {
    maxactions_ = nullptr;
  }
  if (from._internal_has_maxpower()) {
    maxpower_ = new ::Types::Integer(*from.maxpower_);
  } else {
    maxpower_ = nullptr;
  }
  if (from._internal_has_maxslow()) {
    maxslow_ = new ::Types::Integer(*from.maxslow_);
  } else {
    maxslow_ = nullptr;
  }
  if (from._internal_has_maxsilence()) {
    maxsilence_ = new ::Types::Integer(*from.maxsilence_);
  } else {
    maxsilence_ = nullptr;
  }
  if (from._internal_has_maxdisarm()) {
    maxdisarm_ = new ::Types::Integer(*from.maxdisarm_);
  } else {
    maxdisarm_ = nullptr;
  }
  if (from._internal_has_maxinitiative()) {
    maxinitiative_ = new ::Types::Integer(*from.maxinitiative_);
  } else {
    maxinitiative_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:GameState.Player)
}

void Player::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Player_GameState_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  uid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&position_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&maxinitiative_) -
      reinterpret_cast<char*>(&position_)) + sizeof(maxinitiative_));
}

Player::~Player() {
  // @@protoc_insertion_point(destructor:GameState.Player)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Player::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  uid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete position_;
  if (this != internal_default_instance()) delete health_;
  if (this != internal_default_instance()) delete actions_;
  if (this != internal_default_instance()) delete power_;
  if (this != internal_default_instance()) delete slow_;
  if (this != internal_default_instance()) delete silence_;
  if (this != internal_default_instance()) delete disarm_;
  if (this != internal_default_instance()) delete initiative_;
  if (this != internal_default_instance()) delete maxhealth_;
  if (this != internal_default_instance()) delete maxactions_;
  if (this != internal_default_instance()) delete maxpower_;
  if (this != internal_default_instance()) delete maxslow_;
  if (this != internal_default_instance()) delete maxsilence_;
  if (this != internal_default_instance()) delete maxdisarm_;
  if (this != internal_default_instance()) delete maxinitiative_;
}

void Player::ArenaDtor(void* object) {
  Player* _this = reinterpret_cast< Player* >(object);
  (void)_this;
}
void Player::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Player::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Player& Player::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Player_GameState_2eproto.base);
  return *internal_default_instance();
}


void Player::Clear() {
// @@protoc_insertion_point(message_clear_start:GameState.Player)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  field_.Clear();
  hand_.Clear();
  deck_.Clear();
  discard_.Clear();
  feats_.Clear();
  name_.ClearToEmpty();
  uid_.ClearToEmpty();
  if (GetArena() == nullptr && position_ != nullptr) {
    delete position_;
  }
  position_ = nullptr;
  if (GetArena() == nullptr && health_ != nullptr) {
    delete health_;
  }
  health_ = nullptr;
  if (GetArena() == nullptr && actions_ != nullptr) {
    delete actions_;
  }
  actions_ = nullptr;
  if (GetArena() == nullptr && power_ != nullptr) {
    delete power_;
  }
  power_ = nullptr;
  if (GetArena() == nullptr && slow_ != nullptr) {
    delete slow_;
  }
  slow_ = nullptr;
  if (GetArena() == nullptr && silence_ != nullptr) {
    delete silence_;
  }
  silence_ = nullptr;
  if (GetArena() == nullptr && disarm_ != nullptr) {
    delete disarm_;
  }
  disarm_ = nullptr;
  if (GetArena() == nullptr && initiative_ != nullptr) {
    delete initiative_;
  }
  initiative_ = nullptr;
  if (GetArena() == nullptr && maxhealth_ != nullptr) {
    delete maxhealth_;
  }
  maxhealth_ = nullptr;
  if (GetArena() == nullptr && maxactions_ != nullptr) {
    delete maxactions_;
  }
  maxactions_ = nullptr;
  if (GetArena() == nullptr && maxpower_ != nullptr) {
    delete maxpower_;
  }
  maxpower_ = nullptr;
  if (GetArena() == nullptr && maxslow_ != nullptr) {
    delete maxslow_;
  }
  maxslow_ = nullptr;
  if (GetArena() == nullptr && maxsilence_ != nullptr) {
    delete maxsilence_;
  }
  maxsilence_ = nullptr;
  if (GetArena() == nullptr && maxdisarm_ != nullptr) {
    delete maxdisarm_;
  }
  maxdisarm_ = nullptr;
  if (GetArena() == nullptr && maxinitiative_ != nullptr) {
    delete maxinitiative_;
  }
  maxinitiative_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Player::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string Name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "GameState.Player.Name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string UID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_uid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "GameState.Player.UID"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .Types.CardRef Field = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_field(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .Types.CardRef Hand = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_hand(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .Types.CardRef Deck = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_deck(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .Types.CardRef Discard = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_discard(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .Types.CardRef Feats = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_feats(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      // .Types.Vec2iRef Position = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_position(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Types.Integer Health = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_health(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Types.Integer Actions = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_actions(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Types.Integer Power = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_power(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Types.Integer Slow = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_slow(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Types.Integer Silence = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_silence(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Types.Integer Disarm = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_disarm(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Types.Integer Initiative = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_initiative(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Types.Integer MaxHealth = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_maxhealth(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Types.Integer MaxActions = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_maxactions(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Types.Integer MaxPower = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_maxpower(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Types.Integer MaxSlow = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          ptr = ctx->ParseMessage(_internal_mutable_maxslow(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Types.Integer MaxSilence = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_maxsilence(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Types.Integer MaxDisarm = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_maxdisarm(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Types.Integer MaxInitiative = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          ptr = ctx->ParseMessage(_internal_mutable_maxinitiative(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Player::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GameState.Player)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string Name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "GameState.Player.Name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // string UID = 2;
  if (this->uid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_uid().data(), static_cast<int>(this->_internal_uid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "GameState.Player.UID");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_uid(), target);
  }

  // repeated .Types.CardRef Field = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_field_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_field(i), target, stream);
  }

  // repeated .Types.CardRef Hand = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_hand_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_hand(i), target, stream);
  }

  // repeated .Types.CardRef Deck = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_deck_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_deck(i), target, stream);
  }

  // repeated .Types.CardRef Discard = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_discard_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_discard(i), target, stream);
  }

  // repeated .Types.CardRef Feats = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_feats_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, this->_internal_feats(i), target, stream);
  }

  // .Types.Vec2iRef Position = 8;
  if (this->has_position()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::position(this), target, stream);
  }

  // .Types.Integer Health = 9;
  if (this->has_health()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::health(this), target, stream);
  }

  // .Types.Integer Actions = 10;
  if (this->has_actions()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::actions(this), target, stream);
  }

  // .Types.Integer Power = 11;
  if (this->has_power()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::power(this), target, stream);
  }

  // .Types.Integer Slow = 12;
  if (this->has_slow()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::slow(this), target, stream);
  }

  // .Types.Integer Silence = 13;
  if (this->has_silence()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        13, _Internal::silence(this), target, stream);
  }

  // .Types.Integer Disarm = 14;
  if (this->has_disarm()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        14, _Internal::disarm(this), target, stream);
  }

  // .Types.Integer Initiative = 15;
  if (this->has_initiative()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        15, _Internal::initiative(this), target, stream);
  }

  // .Types.Integer MaxHealth = 16;
  if (this->has_maxhealth()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        16, _Internal::maxhealth(this), target, stream);
  }

  // .Types.Integer MaxActions = 17;
  if (this->has_maxactions()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        17, _Internal::maxactions(this), target, stream);
  }

  // .Types.Integer MaxPower = 18;
  if (this->has_maxpower()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        18, _Internal::maxpower(this), target, stream);
  }

  // .Types.Integer MaxSlow = 19;
  if (this->has_maxslow()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        19, _Internal::maxslow(this), target, stream);
  }

  // .Types.Integer MaxSilence = 20;
  if (this->has_maxsilence()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        20, _Internal::maxsilence(this), target, stream);
  }

  // .Types.Integer MaxDisarm = 21;
  if (this->has_maxdisarm()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        21, _Internal::maxdisarm(this), target, stream);
  }

  // .Types.Integer MaxInitiative = 22;
  if (this->has_maxinitiative()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        22, _Internal::maxinitiative(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameState.Player)
  return target;
}

size_t Player::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameState.Player)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Types.CardRef Field = 3;
  total_size += 1UL * this->_internal_field_size();
  for (const auto& msg : this->field_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .Types.CardRef Hand = 4;
  total_size += 1UL * this->_internal_hand_size();
  for (const auto& msg : this->hand_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .Types.CardRef Deck = 5;
  total_size += 1UL * this->_internal_deck_size();
  for (const auto& msg : this->deck_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .Types.CardRef Discard = 6;
  total_size += 1UL * this->_internal_discard_size();
  for (const auto& msg : this->discard_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .Types.CardRef Feats = 7;
  total_size += 1UL * this->_internal_feats_size();
  for (const auto& msg : this->feats_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string Name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string UID = 2;
  if (this->uid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_uid());
  }

  // .Types.Vec2iRef Position = 8;
  if (this->has_position()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *position_);
  }

  // .Types.Integer Health = 9;
  if (this->has_health()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *health_);
  }

  // .Types.Integer Actions = 10;
  if (this->has_actions()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *actions_);
  }

  // .Types.Integer Power = 11;
  if (this->has_power()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *power_);
  }

  // .Types.Integer Slow = 12;
  if (this->has_slow()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *slow_);
  }

  // .Types.Integer Silence = 13;
  if (this->has_silence()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *silence_);
  }

  // .Types.Integer Disarm = 14;
  if (this->has_disarm()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *disarm_);
  }

  // .Types.Integer Initiative = 15;
  if (this->has_initiative()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *initiative_);
  }

  // .Types.Integer MaxHealth = 16;
  if (this->has_maxhealth()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *maxhealth_);
  }

  // .Types.Integer MaxActions = 17;
  if (this->has_maxactions()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *maxactions_);
  }

  // .Types.Integer MaxPower = 18;
  if (this->has_maxpower()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *maxpower_);
  }

  // .Types.Integer MaxSlow = 19;
  if (this->has_maxslow()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *maxslow_);
  }

  // .Types.Integer MaxSilence = 20;
  if (this->has_maxsilence()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *maxsilence_);
  }

  // .Types.Integer MaxDisarm = 21;
  if (this->has_maxdisarm()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *maxdisarm_);
  }

  // .Types.Integer MaxInitiative = 22;
  if (this->has_maxinitiative()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *maxinitiative_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Player::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameState.Player)
  GOOGLE_DCHECK_NE(&from, this);
  const Player* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Player>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameState.Player)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameState.Player)
    MergeFrom(*source);
  }
}

void Player::MergeFrom(const Player& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameState.Player)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  field_.MergeFrom(from.field_);
  hand_.MergeFrom(from.hand_);
  deck_.MergeFrom(from.deck_);
  discard_.MergeFrom(from.discard_);
  feats_.MergeFrom(from.feats_);
  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.uid().size() > 0) {
    _internal_set_uid(from._internal_uid());
  }
  if (from.has_position()) {
    _internal_mutable_position()->::Types::Vec2iRef::MergeFrom(from._internal_position());
  }
  if (from.has_health()) {
    _internal_mutable_health()->::Types::Integer::MergeFrom(from._internal_health());
  }
  if (from.has_actions()) {
    _internal_mutable_actions()->::Types::Integer::MergeFrom(from._internal_actions());
  }
  if (from.has_power()) {
    _internal_mutable_power()->::Types::Integer::MergeFrom(from._internal_power());
  }
  if (from.has_slow()) {
    _internal_mutable_slow()->::Types::Integer::MergeFrom(from._internal_slow());
  }
  if (from.has_silence()) {
    _internal_mutable_silence()->::Types::Integer::MergeFrom(from._internal_silence());
  }
  if (from.has_disarm()) {
    _internal_mutable_disarm()->::Types::Integer::MergeFrom(from._internal_disarm());
  }
  if (from.has_initiative()) {
    _internal_mutable_initiative()->::Types::Integer::MergeFrom(from._internal_initiative());
  }
  if (from.has_maxhealth()) {
    _internal_mutable_maxhealth()->::Types::Integer::MergeFrom(from._internal_maxhealth());
  }
  if (from.has_maxactions()) {
    _internal_mutable_maxactions()->::Types::Integer::MergeFrom(from._internal_maxactions());
  }
  if (from.has_maxpower()) {
    _internal_mutable_maxpower()->::Types::Integer::MergeFrom(from._internal_maxpower());
  }
  if (from.has_maxslow()) {
    _internal_mutable_maxslow()->::Types::Integer::MergeFrom(from._internal_maxslow());
  }
  if (from.has_maxsilence()) {
    _internal_mutable_maxsilence()->::Types::Integer::MergeFrom(from._internal_maxsilence());
  }
  if (from.has_maxdisarm()) {
    _internal_mutable_maxdisarm()->::Types::Integer::MergeFrom(from._internal_maxdisarm());
  }
  if (from.has_maxinitiative()) {
    _internal_mutable_maxinitiative()->::Types::Integer::MergeFrom(from._internal_maxinitiative());
  }
}

void Player::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameState.Player)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Player::CopyFrom(const Player& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameState.Player)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Player::IsInitialized() const {
  return true;
}

void Player::InternalSwap(Player* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  field_.InternalSwap(&other->field_);
  hand_.InternalSwap(&other->hand_);
  deck_.InternalSwap(&other->deck_);
  discard_.InternalSwap(&other->discard_);
  feats_.InternalSwap(&other->feats_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  uid_.Swap(&other->uid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Player, maxinitiative_)
      + sizeof(Player::maxinitiative_)
      - PROTOBUF_FIELD_OFFSET(Player, position_)>(
          reinterpret_cast<char*>(&position_),
          reinterpret_cast<char*>(&other->position_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Player::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Tile::_Internal {
 public:
  static const ::Types::Vec2i& position(const Tile* msg);
};

const ::Types::Vec2i&
Tile::_Internal::position(const Tile* msg) {
  return *msg->position_;
}
void Tile::clear_position() {
  if (GetArena() == nullptr && position_ != nullptr) {
    delete position_;
  }
  position_ = nullptr;
}
void Tile::clear_players() {
  players_.Clear();
}
void Tile::clear_cards() {
  cards_.Clear();
}
Tile::Tile(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  players_(arena),
  cards_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:GameState.Tile)
}
Tile::Tile(const Tile& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      players_(from.players_),
      cards_(from.cards_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_position()) {
    position_ = new ::Types::Vec2i(*from.position_);
  } else {
    position_ = nullptr;
  }
  terrain_ = from.terrain_;
  // @@protoc_insertion_point(copy_constructor:GameState.Tile)
}

void Tile::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Tile_GameState_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&position_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&terrain_) -
      reinterpret_cast<char*>(&position_)) + sizeof(terrain_));
}

Tile::~Tile() {
  // @@protoc_insertion_point(destructor:GameState.Tile)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Tile::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete position_;
}

void Tile::ArenaDtor(void* object) {
  Tile* _this = reinterpret_cast< Tile* >(object);
  (void)_this;
}
void Tile::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Tile::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Tile& Tile::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Tile_GameState_2eproto.base);
  return *internal_default_instance();
}


void Tile::Clear() {
// @@protoc_insertion_point(message_clear_start:GameState.Tile)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  players_.Clear();
  cards_.Clear();
  if (GetArena() == nullptr && position_ != nullptr) {
    delete position_;
  }
  position_ = nullptr;
  terrain_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Tile::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .Types.Vec2i Position = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_position(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Types.TerrainType Terrain = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_terrain(static_cast<::Types::TerrainType>(val));
        } else goto handle_unusual;
        continue;
      // repeated .Types.PlayerRef Players = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_players(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .Types.CardRef Cards = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_cards(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Tile::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GameState.Tile)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Types.Vec2i Position = 1;
  if (this->has_position()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::position(this), target, stream);
  }

  // .Types.TerrainType Terrain = 2;
  if (this->terrain() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_terrain(), target);
  }

  // repeated .Types.PlayerRef Players = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_players_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_players(i), target, stream);
  }

  // repeated .Types.CardRef Cards = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_cards_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_cards(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameState.Tile)
  return target;
}

size_t Tile::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameState.Tile)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Types.PlayerRef Players = 3;
  total_size += 1UL * this->_internal_players_size();
  for (const auto& msg : this->players_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .Types.CardRef Cards = 4;
  total_size += 1UL * this->_internal_cards_size();
  for (const auto& msg : this->cards_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .Types.Vec2i Position = 1;
  if (this->has_position()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *position_);
  }

  // .Types.TerrainType Terrain = 2;
  if (this->terrain() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_terrain());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Tile::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameState.Tile)
  GOOGLE_DCHECK_NE(&from, this);
  const Tile* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Tile>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameState.Tile)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameState.Tile)
    MergeFrom(*source);
  }
}

void Tile::MergeFrom(const Tile& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameState.Tile)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  players_.MergeFrom(from.players_);
  cards_.MergeFrom(from.cards_);
  if (from.has_position()) {
    _internal_mutable_position()->::Types::Vec2i::MergeFrom(from._internal_position());
  }
  if (from.terrain() != 0) {
    _internal_set_terrain(from._internal_terrain());
  }
}

void Tile::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameState.Tile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Tile::CopyFrom(const Tile& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameState.Tile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Tile::IsInitialized() const {
  return true;
}

void Tile::InternalSwap(Tile* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  players_.InternalSwap(&other->players_);
  cards_.InternalSwap(&other->cards_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Tile, terrain_)
      + sizeof(Tile::terrain_)
      - PROTOBUF_FIELD_OFFSET(Tile, position_)>(
          reinterpret_cast<char*>(&position_),
          reinterpret_cast<char*>(&other->position_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Tile::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CardMetaData::_Internal {
 public:
};

CardMetaData::CardMetaData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  colors_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:GameState.CardMetaData)
}
CardMetaData::CardMetaData(const CardMetaData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      colors_(from.colors_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  basename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_basename().empty()) {
    basename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_basename(), 
      GetArena());
  }
  archetype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_archetype().empty()) {
    archetype_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_archetype(), 
      GetArena());
  }
  ::memcpy(&ultimate_, &from.ultimate_,
    static_cast<size_t>(reinterpret_cast<char*>(&basicaction_) -
    reinterpret_cast<char*>(&ultimate_)) + sizeof(basicaction_));
  // @@protoc_insertion_point(copy_constructor:GameState.CardMetaData)
}

void CardMetaData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CardMetaData_GameState_2eproto.base);
  basename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  archetype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&ultimate_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&basicaction_) -
      reinterpret_cast<char*>(&ultimate_)) + sizeof(basicaction_));
}

CardMetaData::~CardMetaData() {
  // @@protoc_insertion_point(destructor:GameState.CardMetaData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CardMetaData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  basename_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  archetype_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CardMetaData::ArenaDtor(void* object) {
  CardMetaData* _this = reinterpret_cast< CardMetaData* >(object);
  (void)_this;
}
void CardMetaData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CardMetaData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CardMetaData& CardMetaData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CardMetaData_GameState_2eproto.base);
  return *internal_default_instance();
}


void CardMetaData::Clear() {
// @@protoc_insertion_point(message_clear_start:GameState.CardMetaData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  colors_.Clear();
  basename_.ClearToEmpty();
  archetype_.ClearToEmpty();
  ::memset(&ultimate_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&basicaction_) -
      reinterpret_cast<char*>(&ultimate_)) + sizeof(basicaction_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CardMetaData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string BaseName = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_basename();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "GameState.CardMetaData.BaseName"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string Archetype = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_archetype();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "GameState.CardMetaData.Archetype"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool Ultimate = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ultimate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool Feat = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          feat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool BasicAction = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          basicaction_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .GameState.CardMetaData.Color Colors = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser(_internal_mutable_colors(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_add_colors(static_cast<::GameState::CardMetaData_Color>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CardMetaData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GameState.CardMetaData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string BaseName = 1;
  if (this->basename().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_basename().data(), static_cast<int>(this->_internal_basename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "GameState.CardMetaData.BaseName");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_basename(), target);
  }

  // string Archetype = 2;
  if (this->archetype().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_archetype().data(), static_cast<int>(this->_internal_archetype().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "GameState.CardMetaData.Archetype");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_archetype(), target);
  }

  // bool Ultimate = 3;
  if (this->ultimate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_ultimate(), target);
  }

  // bool Feat = 4;
  if (this->feat() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_feat(), target);
  }

  // bool BasicAction = 5;
  if (this->basicaction() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_basicaction(), target);
  }

  // repeated .GameState.CardMetaData.Color Colors = 6;
  {
    int byte_size = _colors_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteEnumPacked(
          6, colors_, byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameState.CardMetaData)
  return target;
}

size_t CardMetaData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameState.CardMetaData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .GameState.CardMetaData.Color Colors = 6;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_colors_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(
        this->_internal_colors(static_cast<int>(i)));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _colors_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string BaseName = 1;
  if (this->basename().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_basename());
  }

  // string Archetype = 2;
  if (this->archetype().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_archetype());
  }

  // bool Ultimate = 3;
  if (this->ultimate() != 0) {
    total_size += 1 + 1;
  }

  // bool Feat = 4;
  if (this->feat() != 0) {
    total_size += 1 + 1;
  }

  // bool BasicAction = 5;
  if (this->basicaction() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CardMetaData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameState.CardMetaData)
  GOOGLE_DCHECK_NE(&from, this);
  const CardMetaData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CardMetaData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameState.CardMetaData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameState.CardMetaData)
    MergeFrom(*source);
  }
}

void CardMetaData::MergeFrom(const CardMetaData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameState.CardMetaData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  colors_.MergeFrom(from.colors_);
  if (from.basename().size() > 0) {
    _internal_set_basename(from._internal_basename());
  }
  if (from.archetype().size() > 0) {
    _internal_set_archetype(from._internal_archetype());
  }
  if (from.ultimate() != 0) {
    _internal_set_ultimate(from._internal_ultimate());
  }
  if (from.feat() != 0) {
    _internal_set_feat(from._internal_feat());
  }
  if (from.basicaction() != 0) {
    _internal_set_basicaction(from._internal_basicaction());
  }
}

void CardMetaData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameState.CardMetaData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CardMetaData::CopyFrom(const CardMetaData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameState.CardMetaData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CardMetaData::IsInitialized() const {
  return true;
}

void CardMetaData::InternalSwap(CardMetaData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  colors_.InternalSwap(&other->colors_);
  basename_.Swap(&other->basename_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  archetype_.Swap(&other->archetype_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CardMetaData, basicaction_)
      + sizeof(CardMetaData::basicaction_)
      - PROTOBUF_FIELD_OFFSET(CardMetaData, ultimate_)>(
          reinterpret_cast<char*>(&ultimate_),
          reinterpret_cast<char*>(&other->ultimate_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CardMetaData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CardStats::_Internal {
 public:
  static const ::Types::Integer& actioncost(const CardStats* msg);
  static const ::Types::Integer& powercost(const CardStats* msg);
  static const ::Types::Integer& range(const CardStats* msg);
  static const ::Types::Integer& affectedbyslow(const CardStats* msg);
  static const ::Types::Integer& affectedbysilence(const CardStats* msg);
  static const ::Types::Integer& affectedbydisarm(const CardStats* msg);
  static const ::Effects::CardEffect& omnipresenteffect(const CardStats* msg);
  static const ::Effects::CardEffect& passiveeffect(const CardStats* msg);
  static const ::Effects::CardEffect& feateffect(const CardStats* msg);
  static const ::Effects::CardEffect& playeffect(const CardStats* msg);
  static const ::Effects::CardEffect& resolveeffect(const CardStats* msg);
};

const ::Types::Integer&
CardStats::_Internal::actioncost(const CardStats* msg) {
  return *msg->actioncost_;
}
const ::Types::Integer&
CardStats::_Internal::powercost(const CardStats* msg) {
  return *msg->powercost_;
}
const ::Types::Integer&
CardStats::_Internal::range(const CardStats* msg) {
  return *msg->range_;
}
const ::Types::Integer&
CardStats::_Internal::affectedbyslow(const CardStats* msg) {
  return *msg->affectedbyslow_;
}
const ::Types::Integer&
CardStats::_Internal::affectedbysilence(const CardStats* msg) {
  return *msg->affectedbysilence_;
}
const ::Types::Integer&
CardStats::_Internal::affectedbydisarm(const CardStats* msg) {
  return *msg->affectedbydisarm_;
}
const ::Effects::CardEffect&
CardStats::_Internal::omnipresenteffect(const CardStats* msg) {
  return *msg->omnipresenteffect_;
}
const ::Effects::CardEffect&
CardStats::_Internal::passiveeffect(const CardStats* msg) {
  return *msg->passiveeffect_;
}
const ::Effects::CardEffect&
CardStats::_Internal::feateffect(const CardStats* msg) {
  return *msg->feateffect_;
}
const ::Effects::CardEffect&
CardStats::_Internal::playeffect(const CardStats* msg) {
  return *msg->playeffect_;
}
const ::Effects::CardEffect&
CardStats::_Internal::resolveeffect(const CardStats* msg) {
  return *msg->resolveeffect_;
}
void CardStats::clear_actioncost() {
  if (GetArena() == nullptr && actioncost_ != nullptr) {
    delete actioncost_;
  }
  actioncost_ = nullptr;
}
void CardStats::clear_powercost() {
  if (GetArena() == nullptr && powercost_ != nullptr) {
    delete powercost_;
  }
  powercost_ = nullptr;
}
void CardStats::clear_range() {
  if (GetArena() == nullptr && range_ != nullptr) {
    delete range_;
  }
  range_ = nullptr;
}
void CardStats::clear_affectedbyslow() {
  if (GetArena() == nullptr && affectedbyslow_ != nullptr) {
    delete affectedbyslow_;
  }
  affectedbyslow_ = nullptr;
}
void CardStats::clear_affectedbysilence() {
  if (GetArena() == nullptr && affectedbysilence_ != nullptr) {
    delete affectedbysilence_;
  }
  affectedbysilence_ = nullptr;
}
void CardStats::clear_affectedbydisarm() {
  if (GetArena() == nullptr && affectedbydisarm_ != nullptr) {
    delete affectedbydisarm_;
  }
  affectedbydisarm_ = nullptr;
}
void CardStats::clear_omnipresenteffect() {
  if (GetArena() == nullptr && omnipresenteffect_ != nullptr) {
    delete omnipresenteffect_;
  }
  omnipresenteffect_ = nullptr;
}
void CardStats::clear_passiveeffect() {
  if (GetArena() == nullptr && passiveeffect_ != nullptr) {
    delete passiveeffect_;
  }
  passiveeffect_ = nullptr;
}
void CardStats::clear_feateffect() {
  if (GetArena() == nullptr && feateffect_ != nullptr) {
    delete feateffect_;
  }
  feateffect_ = nullptr;
}
void CardStats::clear_playeffect() {
  if (GetArena() == nullptr && playeffect_ != nullptr) {
    delete playeffect_;
  }
  playeffect_ = nullptr;
}
void CardStats::clear_resolveeffect() {
  if (GetArena() == nullptr && resolveeffect_ != nullptr) {
    delete resolveeffect_;
  }
  resolveeffect_ = nullptr;
}
CardStats::CardStats(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:GameState.CardStats)
}
CardStats::CardStats(const CardStats& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_actioncost()) {
    actioncost_ = new ::Types::Integer(*from.actioncost_);
  } else {
    actioncost_ = nullptr;
  }
  if (from._internal_has_powercost()) {
    powercost_ = new ::Types::Integer(*from.powercost_);
  } else {
    powercost_ = nullptr;
  }
  if (from._internal_has_range()) {
    range_ = new ::Types::Integer(*from.range_);
  } else {
    range_ = nullptr;
  }
  if (from._internal_has_affectedbyslow()) {
    affectedbyslow_ = new ::Types::Integer(*from.affectedbyslow_);
  } else {
    affectedbyslow_ = nullptr;
  }
  if (from._internal_has_affectedbysilence()) {
    affectedbysilence_ = new ::Types::Integer(*from.affectedbysilence_);
  } else {
    affectedbysilence_ = nullptr;
  }
  if (from._internal_has_affectedbydisarm()) {
    affectedbydisarm_ = new ::Types::Integer(*from.affectedbydisarm_);
  } else {
    affectedbydisarm_ = nullptr;
  }
  if (from._internal_has_omnipresenteffect()) {
    omnipresenteffect_ = new ::Effects::CardEffect(*from.omnipresenteffect_);
  } else {
    omnipresenteffect_ = nullptr;
  }
  if (from._internal_has_passiveeffect()) {
    passiveeffect_ = new ::Effects::CardEffect(*from.passiveeffect_);
  } else {
    passiveeffect_ = nullptr;
  }
  if (from._internal_has_feateffect()) {
    feateffect_ = new ::Effects::CardEffect(*from.feateffect_);
  } else {
    feateffect_ = nullptr;
  }
  if (from._internal_has_playeffect()) {
    playeffect_ = new ::Effects::CardEffect(*from.playeffect_);
  } else {
    playeffect_ = nullptr;
  }
  if (from._internal_has_resolveeffect()) {
    resolveeffect_ = new ::Effects::CardEffect(*from.resolveeffect_);
  } else {
    resolveeffect_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:GameState.CardStats)
}

void CardStats::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CardStats_GameState_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&actioncost_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&resolveeffect_) -
      reinterpret_cast<char*>(&actioncost_)) + sizeof(resolveeffect_));
}

CardStats::~CardStats() {
  // @@protoc_insertion_point(destructor:GameState.CardStats)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CardStats::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete actioncost_;
  if (this != internal_default_instance()) delete powercost_;
  if (this != internal_default_instance()) delete range_;
  if (this != internal_default_instance()) delete affectedbyslow_;
  if (this != internal_default_instance()) delete affectedbysilence_;
  if (this != internal_default_instance()) delete affectedbydisarm_;
  if (this != internal_default_instance()) delete omnipresenteffect_;
  if (this != internal_default_instance()) delete passiveeffect_;
  if (this != internal_default_instance()) delete feateffect_;
  if (this != internal_default_instance()) delete playeffect_;
  if (this != internal_default_instance()) delete resolveeffect_;
}

void CardStats::ArenaDtor(void* object) {
  CardStats* _this = reinterpret_cast< CardStats* >(object);
  (void)_this;
}
void CardStats::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CardStats::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CardStats& CardStats::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CardStats_GameState_2eproto.base);
  return *internal_default_instance();
}


void CardStats::Clear() {
// @@protoc_insertion_point(message_clear_start:GameState.CardStats)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && actioncost_ != nullptr) {
    delete actioncost_;
  }
  actioncost_ = nullptr;
  if (GetArena() == nullptr && powercost_ != nullptr) {
    delete powercost_;
  }
  powercost_ = nullptr;
  if (GetArena() == nullptr && range_ != nullptr) {
    delete range_;
  }
  range_ = nullptr;
  if (GetArena() == nullptr && affectedbyslow_ != nullptr) {
    delete affectedbyslow_;
  }
  affectedbyslow_ = nullptr;
  if (GetArena() == nullptr && affectedbysilence_ != nullptr) {
    delete affectedbysilence_;
  }
  affectedbysilence_ = nullptr;
  if (GetArena() == nullptr && affectedbydisarm_ != nullptr) {
    delete affectedbydisarm_;
  }
  affectedbydisarm_ = nullptr;
  if (GetArena() == nullptr && omnipresenteffect_ != nullptr) {
    delete omnipresenteffect_;
  }
  omnipresenteffect_ = nullptr;
  if (GetArena() == nullptr && passiveeffect_ != nullptr) {
    delete passiveeffect_;
  }
  passiveeffect_ = nullptr;
  if (GetArena() == nullptr && feateffect_ != nullptr) {
    delete feateffect_;
  }
  feateffect_ = nullptr;
  if (GetArena() == nullptr && playeffect_ != nullptr) {
    delete playeffect_;
  }
  playeffect_ = nullptr;
  if (GetArena() == nullptr && resolveeffect_ != nullptr) {
    delete resolveeffect_;
  }
  resolveeffect_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CardStats::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .Types.Integer ActionCost = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_actioncost(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Types.Integer PowerCost = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_powercost(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Types.Integer Range = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_range(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Types.Integer AffectedBySlow = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_affectedbyslow(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Types.Integer AffectedBySilence = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_affectedbysilence(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Types.Integer AffectedByDisarm = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_affectedbydisarm(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Effects.CardEffect OmniPresentEffect = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_omnipresenteffect(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Effects.CardEffect PassiveEffect = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_passiveeffect(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Effects.CardEffect FeatEffect = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_feateffect(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Effects.CardEffect PlayEffect = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_playeffect(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Effects.CardEffect ResolveEffect = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_resolveeffect(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CardStats::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GameState.CardStats)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Types.Integer ActionCost = 1;
  if (this->has_actioncost()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::actioncost(this), target, stream);
  }

  // .Types.Integer PowerCost = 2;
  if (this->has_powercost()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::powercost(this), target, stream);
  }

  // .Types.Integer Range = 3;
  if (this->has_range()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::range(this), target, stream);
  }

  // .Types.Integer AffectedBySlow = 4;
  if (this->has_affectedbyslow()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::affectedbyslow(this), target, stream);
  }

  // .Types.Integer AffectedBySilence = 5;
  if (this->has_affectedbysilence()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::affectedbysilence(this), target, stream);
  }

  // .Types.Integer AffectedByDisarm = 6;
  if (this->has_affectedbydisarm()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::affectedbydisarm(this), target, stream);
  }

  // .Effects.CardEffect OmniPresentEffect = 7;
  if (this->has_omnipresenteffect()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::omnipresenteffect(this), target, stream);
  }

  // .Effects.CardEffect PassiveEffect = 8;
  if (this->has_passiveeffect()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::passiveeffect(this), target, stream);
  }

  // .Effects.CardEffect FeatEffect = 9;
  if (this->has_feateffect()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::feateffect(this), target, stream);
  }

  // .Effects.CardEffect PlayEffect = 10;
  if (this->has_playeffect()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::playeffect(this), target, stream);
  }

  // .Effects.CardEffect ResolveEffect = 11;
  if (this->has_resolveeffect()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::resolveeffect(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameState.CardStats)
  return target;
}

size_t CardStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameState.CardStats)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Types.Integer ActionCost = 1;
  if (this->has_actioncost()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *actioncost_);
  }

  // .Types.Integer PowerCost = 2;
  if (this->has_powercost()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *powercost_);
  }

  // .Types.Integer Range = 3;
  if (this->has_range()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *range_);
  }

  // .Types.Integer AffectedBySlow = 4;
  if (this->has_affectedbyslow()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *affectedbyslow_);
  }

  // .Types.Integer AffectedBySilence = 5;
  if (this->has_affectedbysilence()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *affectedbysilence_);
  }

  // .Types.Integer AffectedByDisarm = 6;
  if (this->has_affectedbydisarm()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *affectedbydisarm_);
  }

  // .Effects.CardEffect OmniPresentEffect = 7;
  if (this->has_omnipresenteffect()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *omnipresenteffect_);
  }

  // .Effects.CardEffect PassiveEffect = 8;
  if (this->has_passiveeffect()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *passiveeffect_);
  }

  // .Effects.CardEffect FeatEffect = 9;
  if (this->has_feateffect()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *feateffect_);
  }

  // .Effects.CardEffect PlayEffect = 10;
  if (this->has_playeffect()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *playeffect_);
  }

  // .Effects.CardEffect ResolveEffect = 11;
  if (this->has_resolveeffect()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *resolveeffect_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CardStats::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameState.CardStats)
  GOOGLE_DCHECK_NE(&from, this);
  const CardStats* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CardStats>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameState.CardStats)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameState.CardStats)
    MergeFrom(*source);
  }
}

void CardStats::MergeFrom(const CardStats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameState.CardStats)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_actioncost()) {
    _internal_mutable_actioncost()->::Types::Integer::MergeFrom(from._internal_actioncost());
  }
  if (from.has_powercost()) {
    _internal_mutable_powercost()->::Types::Integer::MergeFrom(from._internal_powercost());
  }
  if (from.has_range()) {
    _internal_mutable_range()->::Types::Integer::MergeFrom(from._internal_range());
  }
  if (from.has_affectedbyslow()) {
    _internal_mutable_affectedbyslow()->::Types::Integer::MergeFrom(from._internal_affectedbyslow());
  }
  if (from.has_affectedbysilence()) {
    _internal_mutable_affectedbysilence()->::Types::Integer::MergeFrom(from._internal_affectedbysilence());
  }
  if (from.has_affectedbydisarm()) {
    _internal_mutable_affectedbydisarm()->::Types::Integer::MergeFrom(from._internal_affectedbydisarm());
  }
  if (from.has_omnipresenteffect()) {
    _internal_mutable_omnipresenteffect()->::Effects::CardEffect::MergeFrom(from._internal_omnipresenteffect());
  }
  if (from.has_passiveeffect()) {
    _internal_mutable_passiveeffect()->::Effects::CardEffect::MergeFrom(from._internal_passiveeffect());
  }
  if (from.has_feateffect()) {
    _internal_mutable_feateffect()->::Effects::CardEffect::MergeFrom(from._internal_feateffect());
  }
  if (from.has_playeffect()) {
    _internal_mutable_playeffect()->::Effects::CardEffect::MergeFrom(from._internal_playeffect());
  }
  if (from.has_resolveeffect()) {
    _internal_mutable_resolveeffect()->::Effects::CardEffect::MergeFrom(from._internal_resolveeffect());
  }
}

void CardStats::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameState.CardStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CardStats::CopyFrom(const CardStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameState.CardStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CardStats::IsInitialized() const {
  return true;
}

void CardStats::InternalSwap(CardStats* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CardStats, resolveeffect_)
      + sizeof(CardStats::resolveeffect_)
      - PROTOBUF_FIELD_OFFSET(CardStats, actioncost_)>(
          reinterpret_cast<char*>(&actioncost_),
          reinterpret_cast<char*>(&other->actioncost_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CardStats::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Card::_Internal {
 public:
  static const ::GameState::CardMetaData& metadata(const Card* msg);
  static const ::Types::PlayerRef& owner(const Card* msg);
  static const ::Types::PlayerRef& controller(const Card* msg);
  static const ::Types::EntityRef& attached(const Card* msg);
  static const ::GameState::CardStats& stats(const Card* msg);
};

const ::GameState::CardMetaData&
Card::_Internal::metadata(const Card* msg) {
  return *msg->metadata_;
}
const ::Types::PlayerRef&
Card::_Internal::owner(const Card* msg) {
  return *msg->owner_;
}
const ::Types::PlayerRef&
Card::_Internal::controller(const Card* msg) {
  return *msg->controller_;
}
const ::Types::EntityRef&
Card::_Internal::attached(const Card* msg) {
  return *msg->attached_;
}
const ::GameState::CardStats&
Card::_Internal::stats(const Card* msg) {
  return *msg->stats_;
}
void Card::clear_owner() {
  if (GetArena() == nullptr && owner_ != nullptr) {
    delete owner_;
  }
  owner_ = nullptr;
}
void Card::clear_controller() {
  if (GetArena() == nullptr && controller_ != nullptr) {
    delete controller_;
  }
  controller_ = nullptr;
}
void Card::clear_attached() {
  if (GetArena() == nullptr && attached_ != nullptr) {
    delete attached_;
  }
  attached_ = nullptr;
}
Card::Card(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:GameState.Card)
}
Card::Card(const Card& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  if (from._internal_has_metadata()) {
    metadata_ = new ::GameState::CardMetaData(*from.metadata_);
  } else {
    metadata_ = nullptr;
  }
  if (from._internal_has_owner()) {
    owner_ = new ::Types::PlayerRef(*from.owner_);
  } else {
    owner_ = nullptr;
  }
  if (from._internal_has_controller()) {
    controller_ = new ::Types::PlayerRef(*from.controller_);
  } else {
    controller_ = nullptr;
  }
  if (from._internal_has_attached()) {
    attached_ = new ::Types::EntityRef(*from.attached_);
  } else {
    attached_ = nullptr;
  }
  if (from._internal_has_stats()) {
    stats_ = new ::GameState::CardStats(*from.stats_);
  } else {
    stats_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:GameState.Card)
}

void Card::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Card_GameState_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&metadata_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&stats_) -
      reinterpret_cast<char*>(&metadata_)) + sizeof(stats_));
}

Card::~Card() {
  // @@protoc_insertion_point(destructor:GameState.Card)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Card::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete metadata_;
  if (this != internal_default_instance()) delete owner_;
  if (this != internal_default_instance()) delete controller_;
  if (this != internal_default_instance()) delete attached_;
  if (this != internal_default_instance()) delete stats_;
}

void Card::ArenaDtor(void* object) {
  Card* _this = reinterpret_cast< Card* >(object);
  (void)_this;
}
void Card::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Card::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Card& Card::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Card_GameState_2eproto.base);
  return *internal_default_instance();
}


void Card::Clear() {
// @@protoc_insertion_point(message_clear_start:GameState.Card)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  if (GetArena() == nullptr && metadata_ != nullptr) {
    delete metadata_;
  }
  metadata_ = nullptr;
  if (GetArena() == nullptr && owner_ != nullptr) {
    delete owner_;
  }
  owner_ = nullptr;
  if (GetArena() == nullptr && controller_ != nullptr) {
    delete controller_;
  }
  controller_ = nullptr;
  if (GetArena() == nullptr && attached_ != nullptr) {
    delete attached_;
  }
  attached_ = nullptr;
  if (GetArena() == nullptr && stats_ != nullptr) {
    delete stats_;
  }
  stats_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Card::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string Name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "GameState.Card.Name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .GameState.CardMetaData MetaData = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_metadata(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Types.PlayerRef Owner = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_owner(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Types.PlayerRef Controller = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_controller(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Types.EntityRef Attached = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_attached(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .GameState.CardStats Stats = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_stats(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Card::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GameState.Card)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string Name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "GameState.Card.Name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // .GameState.CardMetaData MetaData = 2;
  if (this->has_metadata()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::metadata(this), target, stream);
  }

  // .Types.PlayerRef Owner = 3;
  if (this->has_owner()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::owner(this), target, stream);
  }

  // .Types.PlayerRef Controller = 4;
  if (this->has_controller()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::controller(this), target, stream);
  }

  // .Types.EntityRef Attached = 5;
  if (this->has_attached()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::attached(this), target, stream);
  }

  // .GameState.CardStats Stats = 6;
  if (this->has_stats()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::stats(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameState.Card)
  return target;
}

size_t Card::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameState.Card)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string Name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .GameState.CardMetaData MetaData = 2;
  if (this->has_metadata()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *metadata_);
  }

  // .Types.PlayerRef Owner = 3;
  if (this->has_owner()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *owner_);
  }

  // .Types.PlayerRef Controller = 4;
  if (this->has_controller()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *controller_);
  }

  // .Types.EntityRef Attached = 5;
  if (this->has_attached()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *attached_);
  }

  // .GameState.CardStats Stats = 6;
  if (this->has_stats()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *stats_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Card::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameState.Card)
  GOOGLE_DCHECK_NE(&from, this);
  const Card* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Card>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameState.Card)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameState.Card)
    MergeFrom(*source);
  }
}

void Card::MergeFrom(const Card& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameState.Card)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.has_metadata()) {
    _internal_mutable_metadata()->::GameState::CardMetaData::MergeFrom(from._internal_metadata());
  }
  if (from.has_owner()) {
    _internal_mutable_owner()->::Types::PlayerRef::MergeFrom(from._internal_owner());
  }
  if (from.has_controller()) {
    _internal_mutable_controller()->::Types::PlayerRef::MergeFrom(from._internal_controller());
  }
  if (from.has_attached()) {
    _internal_mutable_attached()->::Types::EntityRef::MergeFrom(from._internal_attached());
  }
  if (from.has_stats()) {
    _internal_mutable_stats()->::GameState::CardStats::MergeFrom(from._internal_stats());
  }
}

void Card::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameState.Card)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Card::CopyFrom(const Card& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameState.Card)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Card::IsInitialized() const {
  return true;
}

void Card::InternalSwap(Card* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Card, stats_)
      + sizeof(Card::stats_)
      - PROTOBUF_FIELD_OFFSET(Card, metadata_)>(
          reinterpret_cast<char*>(&metadata_),
          reinterpret_cast<char*>(&other->metadata_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Card::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Team::_Internal {
 public:
};

void Team::clear_players() {
  players_.Clear();
}
Team::Team(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  players_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:GameState.Team)
}
Team::Team(const Team& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      players_(from.players_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:GameState.Team)
}

void Team::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Team_GameState_2eproto.base);
}

Team::~Team() {
  // @@protoc_insertion_point(destructor:GameState.Team)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Team::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Team::ArenaDtor(void* object) {
  Team* _this = reinterpret_cast< Team* >(object);
  (void)_this;
}
void Team::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Team::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Team& Team::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Team_GameState_2eproto.base);
  return *internal_default_instance();
}


void Team::Clear() {
// @@protoc_insertion_point(message_clear_start:GameState.Team)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  players_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Team::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .Types.PlayerRef Players = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_players(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Team::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GameState.Team)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Types.PlayerRef Players = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_players_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_players(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameState.Team)
  return target;
}

size_t Team::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameState.Team)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Types.PlayerRef Players = 1;
  total_size += 1UL * this->_internal_players_size();
  for (const auto& msg : this->players_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Team::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameState.Team)
  GOOGLE_DCHECK_NE(&from, this);
  const Team* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Team>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameState.Team)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameState.Team)
    MergeFrom(*source);
  }
}

void Team::MergeFrom(const Team& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameState.Team)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  players_.MergeFrom(from.players_);
}

void Team::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameState.Team)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Team::CopyFrom(const Team& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameState.Team)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Team::IsInitialized() const {
  return true;
}

void Team::InternalSwap(Team* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  players_.InternalSwap(&other->players_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Team::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SetMutation::_Internal {
 public:
  static const ::Types::Path& object(const SetMutation* msg);
  static const ::Types::EntityValue& newvalue(const SetMutation* msg);
  static const ::Types::EntityValue& oldvalue(const SetMutation* msg);
};

const ::Types::Path&
SetMutation::_Internal::object(const SetMutation* msg) {
  return *msg->object_;
}
const ::Types::EntityValue&
SetMutation::_Internal::newvalue(const SetMutation* msg) {
  return *msg->newvalue_;
}
const ::Types::EntityValue&
SetMutation::_Internal::oldvalue(const SetMutation* msg) {
  return *msg->oldvalue_;
}
void SetMutation::clear_object() {
  if (GetArena() == nullptr && object_ != nullptr) {
    delete object_;
  }
  object_ = nullptr;
}
void SetMutation::clear_newvalue() {
  if (GetArena() == nullptr && newvalue_ != nullptr) {
    delete newvalue_;
  }
  newvalue_ = nullptr;
}
void SetMutation::clear_oldvalue() {
  if (GetArena() == nullptr && oldvalue_ != nullptr) {
    delete oldvalue_;
  }
  oldvalue_ = nullptr;
}
SetMutation::SetMutation(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:GameState.SetMutation)
}
SetMutation::SetMutation(const SetMutation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_object()) {
    object_ = new ::Types::Path(*from.object_);
  } else {
    object_ = nullptr;
  }
  if (from._internal_has_newvalue()) {
    newvalue_ = new ::Types::EntityValue(*from.newvalue_);
  } else {
    newvalue_ = nullptr;
  }
  if (from._internal_has_oldvalue()) {
    oldvalue_ = new ::Types::EntityValue(*from.oldvalue_);
  } else {
    oldvalue_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:GameState.SetMutation)
}

void SetMutation::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SetMutation_GameState_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&object_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&oldvalue_) -
      reinterpret_cast<char*>(&object_)) + sizeof(oldvalue_));
}

SetMutation::~SetMutation() {
  // @@protoc_insertion_point(destructor:GameState.SetMutation)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SetMutation::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete object_;
  if (this != internal_default_instance()) delete newvalue_;
  if (this != internal_default_instance()) delete oldvalue_;
}

void SetMutation::ArenaDtor(void* object) {
  SetMutation* _this = reinterpret_cast< SetMutation* >(object);
  (void)_this;
}
void SetMutation::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SetMutation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SetMutation& SetMutation::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SetMutation_GameState_2eproto.base);
  return *internal_default_instance();
}


void SetMutation::Clear() {
// @@protoc_insertion_point(message_clear_start:GameState.SetMutation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && object_ != nullptr) {
    delete object_;
  }
  object_ = nullptr;
  if (GetArena() == nullptr && newvalue_ != nullptr) {
    delete newvalue_;
  }
  newvalue_ = nullptr;
  if (GetArena() == nullptr && oldvalue_ != nullptr) {
    delete oldvalue_;
  }
  oldvalue_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetMutation::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .Types.Path Object = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_object(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Types.EntityValue NewValue = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_newvalue(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Types.EntityValue OldValue = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_oldvalue(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SetMutation::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GameState.SetMutation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Types.Path Object = 1;
  if (this->has_object()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::object(this), target, stream);
  }

  // .Types.EntityValue NewValue = 2;
  if (this->has_newvalue()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::newvalue(this), target, stream);
  }

  // .Types.EntityValue OldValue = 3;
  if (this->has_oldvalue()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::oldvalue(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameState.SetMutation)
  return target;
}

size_t SetMutation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameState.SetMutation)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Types.Path Object = 1;
  if (this->has_object()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *object_);
  }

  // .Types.EntityValue NewValue = 2;
  if (this->has_newvalue()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *newvalue_);
  }

  // .Types.EntityValue OldValue = 3;
  if (this->has_oldvalue()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *oldvalue_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetMutation::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameState.SetMutation)
  GOOGLE_DCHECK_NE(&from, this);
  const SetMutation* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SetMutation>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameState.SetMutation)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameState.SetMutation)
    MergeFrom(*source);
  }
}

void SetMutation::MergeFrom(const SetMutation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameState.SetMutation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_object()) {
    _internal_mutable_object()->::Types::Path::MergeFrom(from._internal_object());
  }
  if (from.has_newvalue()) {
    _internal_mutable_newvalue()->::Types::EntityValue::MergeFrom(from._internal_newvalue());
  }
  if (from.has_oldvalue()) {
    _internal_mutable_oldvalue()->::Types::EntityValue::MergeFrom(from._internal_oldvalue());
  }
}

void SetMutation::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameState.SetMutation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetMutation::CopyFrom(const SetMutation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameState.SetMutation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetMutation::IsInitialized() const {
  return true;
}

void SetMutation::InternalSwap(SetMutation* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SetMutation, oldvalue_)
      + sizeof(SetMutation::oldvalue_)
      - PROTOBUF_FIELD_OFFSET(SetMutation, object_)>(
          reinterpret_cast<char*>(&object_),
          reinterpret_cast<char*>(&other->object_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SetMutation::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class RemoveMutation::_Internal {
 public:
  static const ::Types::Path& object(const RemoveMutation* msg);
  static const ::Types::EntityValue& oldvalue(const RemoveMutation* msg);
};

const ::Types::Path&
RemoveMutation::_Internal::object(const RemoveMutation* msg) {
  return *msg->object_;
}
const ::Types::EntityValue&
RemoveMutation::_Internal::oldvalue(const RemoveMutation* msg) {
  return *msg->oldvalue_;
}
void RemoveMutation::clear_object() {
  if (GetArena() == nullptr && object_ != nullptr) {
    delete object_;
  }
  object_ = nullptr;
}
void RemoveMutation::clear_oldvalue() {
  if (GetArena() == nullptr && oldvalue_ != nullptr) {
    delete oldvalue_;
  }
  oldvalue_ = nullptr;
}
RemoveMutation::RemoveMutation(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:GameState.RemoveMutation)
}
RemoveMutation::RemoveMutation(const RemoveMutation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_object()) {
    object_ = new ::Types::Path(*from.object_);
  } else {
    object_ = nullptr;
  }
  if (from._internal_has_oldvalue()) {
    oldvalue_ = new ::Types::EntityValue(*from.oldvalue_);
  } else {
    oldvalue_ = nullptr;
  }
  index_ = from.index_;
  // @@protoc_insertion_point(copy_constructor:GameState.RemoveMutation)
}

void RemoveMutation::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RemoveMutation_GameState_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&object_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&index_) -
      reinterpret_cast<char*>(&object_)) + sizeof(index_));
}

RemoveMutation::~RemoveMutation() {
  // @@protoc_insertion_point(destructor:GameState.RemoveMutation)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RemoveMutation::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete object_;
  if (this != internal_default_instance()) delete oldvalue_;
}

void RemoveMutation::ArenaDtor(void* object) {
  RemoveMutation* _this = reinterpret_cast< RemoveMutation* >(object);
  (void)_this;
}
void RemoveMutation::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RemoveMutation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RemoveMutation& RemoveMutation::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RemoveMutation_GameState_2eproto.base);
  return *internal_default_instance();
}


void RemoveMutation::Clear() {
// @@protoc_insertion_point(message_clear_start:GameState.RemoveMutation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && object_ != nullptr) {
    delete object_;
  }
  object_ = nullptr;
  if (GetArena() == nullptr && oldvalue_ != nullptr) {
    delete oldvalue_;
  }
  oldvalue_ = nullptr;
  index_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RemoveMutation::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .Types.Path Object = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_object(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Types.EntityValue OldValue = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_oldvalue(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 Index = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RemoveMutation::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GameState.RemoveMutation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Types.Path Object = 1;
  if (this->has_object()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::object(this), target, stream);
  }

  // .Types.EntityValue OldValue = 2;
  if (this->has_oldvalue()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::oldvalue(this), target, stream);
  }

  // int32 Index = 3;
  if (this->index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_index(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameState.RemoveMutation)
  return target;
}

size_t RemoveMutation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameState.RemoveMutation)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Types.Path Object = 1;
  if (this->has_object()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *object_);
  }

  // .Types.EntityValue OldValue = 2;
  if (this->has_oldvalue()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *oldvalue_);
  }

  // int32 Index = 3;
  if (this->index() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_index());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RemoveMutation::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameState.RemoveMutation)
  GOOGLE_DCHECK_NE(&from, this);
  const RemoveMutation* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RemoveMutation>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameState.RemoveMutation)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameState.RemoveMutation)
    MergeFrom(*source);
  }
}

void RemoveMutation::MergeFrom(const RemoveMutation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameState.RemoveMutation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_object()) {
    _internal_mutable_object()->::Types::Path::MergeFrom(from._internal_object());
  }
  if (from.has_oldvalue()) {
    _internal_mutable_oldvalue()->::Types::EntityValue::MergeFrom(from._internal_oldvalue());
  }
  if (from.index() != 0) {
    _internal_set_index(from._internal_index());
  }
}

void RemoveMutation::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameState.RemoveMutation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RemoveMutation::CopyFrom(const RemoveMutation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameState.RemoveMutation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RemoveMutation::IsInitialized() const {
  return true;
}

void RemoveMutation::InternalSwap(RemoveMutation* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RemoveMutation, index_)
      + sizeof(RemoveMutation::index_)
      - PROTOBUF_FIELD_OFFSET(RemoveMutation, object_)>(
          reinterpret_cast<char*>(&object_),
          reinterpret_cast<char*>(&other->object_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RemoveMutation::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class InsertMutation::_Internal {
 public:
  static const ::Types::Path& object(const InsertMutation* msg);
  static const ::Types::EntityValue& newvalue(const InsertMutation* msg);
};

const ::Types::Path&
InsertMutation::_Internal::object(const InsertMutation* msg) {
  return *msg->object_;
}
const ::Types::EntityValue&
InsertMutation::_Internal::newvalue(const InsertMutation* msg) {
  return *msg->newvalue_;
}
void InsertMutation::clear_object() {
  if (GetArena() == nullptr && object_ != nullptr) {
    delete object_;
  }
  object_ = nullptr;
}
void InsertMutation::clear_newvalue() {
  if (GetArena() == nullptr && newvalue_ != nullptr) {
    delete newvalue_;
  }
  newvalue_ = nullptr;
}
InsertMutation::InsertMutation(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:GameState.InsertMutation)
}
InsertMutation::InsertMutation(const InsertMutation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_object()) {
    object_ = new ::Types::Path(*from.object_);
  } else {
    object_ = nullptr;
  }
  if (from._internal_has_newvalue()) {
    newvalue_ = new ::Types::EntityValue(*from.newvalue_);
  } else {
    newvalue_ = nullptr;
  }
  index_ = from.index_;
  // @@protoc_insertion_point(copy_constructor:GameState.InsertMutation)
}

void InsertMutation::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_InsertMutation_GameState_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&object_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&index_) -
      reinterpret_cast<char*>(&object_)) + sizeof(index_));
}

InsertMutation::~InsertMutation() {
  // @@protoc_insertion_point(destructor:GameState.InsertMutation)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void InsertMutation::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete object_;
  if (this != internal_default_instance()) delete newvalue_;
}

void InsertMutation::ArenaDtor(void* object) {
  InsertMutation* _this = reinterpret_cast< InsertMutation* >(object);
  (void)_this;
}
void InsertMutation::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void InsertMutation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const InsertMutation& InsertMutation::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_InsertMutation_GameState_2eproto.base);
  return *internal_default_instance();
}


void InsertMutation::Clear() {
// @@protoc_insertion_point(message_clear_start:GameState.InsertMutation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && object_ != nullptr) {
    delete object_;
  }
  object_ = nullptr;
  if (GetArena() == nullptr && newvalue_ != nullptr) {
    delete newvalue_;
  }
  newvalue_ = nullptr;
  index_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InsertMutation::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .Types.Path Object = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_object(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Types.EntityValue NewValue = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_newvalue(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 Index = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* InsertMutation::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GameState.InsertMutation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Types.Path Object = 1;
  if (this->has_object()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::object(this), target, stream);
  }

  // .Types.EntityValue NewValue = 2;
  if (this->has_newvalue()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::newvalue(this), target, stream);
  }

  // int32 Index = 3;
  if (this->index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_index(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameState.InsertMutation)
  return target;
}

size_t InsertMutation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameState.InsertMutation)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Types.Path Object = 1;
  if (this->has_object()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *object_);
  }

  // .Types.EntityValue NewValue = 2;
  if (this->has_newvalue()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *newvalue_);
  }

  // int32 Index = 3;
  if (this->index() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_index());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InsertMutation::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameState.InsertMutation)
  GOOGLE_DCHECK_NE(&from, this);
  const InsertMutation* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<InsertMutation>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameState.InsertMutation)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameState.InsertMutation)
    MergeFrom(*source);
  }
}

void InsertMutation::MergeFrom(const InsertMutation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameState.InsertMutation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_object()) {
    _internal_mutable_object()->::Types::Path::MergeFrom(from._internal_object());
  }
  if (from.has_newvalue()) {
    _internal_mutable_newvalue()->::Types::EntityValue::MergeFrom(from._internal_newvalue());
  }
  if (from.index() != 0) {
    _internal_set_index(from._internal_index());
  }
}

void InsertMutation::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameState.InsertMutation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InsertMutation::CopyFrom(const InsertMutation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameState.InsertMutation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InsertMutation::IsInitialized() const {
  return true;
}

void InsertMutation::InternalSwap(InsertMutation* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(InsertMutation, index_)
      + sizeof(InsertMutation::index_)
      - PROTOBUF_FIELD_OFFSET(InsertMutation, object_)>(
          reinterpret_cast<char*>(&object_),
          reinterpret_cast<char*>(&other->object_));
}

::PROTOBUF_NAMESPACE_ID::Metadata InsertMutation::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Mutation::_Internal {
 public:
  static const ::GameState::SetMutation& set(const Mutation* msg);
  static const ::GameState::RemoveMutation& remove(const Mutation* msg);
  static const ::GameState::InsertMutation& insert(const Mutation* msg);
};

const ::GameState::SetMutation&
Mutation::_Internal::set(const Mutation* msg) {
  return *msg->mutation_.set_;
}
const ::GameState::RemoveMutation&
Mutation::_Internal::remove(const Mutation* msg) {
  return *msg->mutation_.remove_;
}
const ::GameState::InsertMutation&
Mutation::_Internal::insert(const Mutation* msg) {
  return *msg->mutation_.insert_;
}
void Mutation::set_allocated_set(::GameState::SetMutation* set) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_mutation();
  if (set) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(set);
    if (message_arena != submessage_arena) {
      set = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, set, submessage_arena);
    }
    set_has_set();
    mutation_.set_ = set;
  }
  // @@protoc_insertion_point(field_set_allocated:GameState.Mutation.Set)
}
void Mutation::set_allocated_remove(::GameState::RemoveMutation* remove) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_mutation();
  if (remove) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(remove);
    if (message_arena != submessage_arena) {
      remove = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, remove, submessage_arena);
    }
    set_has_remove();
    mutation_.remove_ = remove;
  }
  // @@protoc_insertion_point(field_set_allocated:GameState.Mutation.Remove)
}
void Mutation::set_allocated_insert(::GameState::InsertMutation* insert) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_mutation();
  if (insert) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(insert);
    if (message_arena != submessage_arena) {
      insert = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, insert, submessage_arena);
    }
    set_has_insert();
    mutation_.insert_ = insert;
  }
  // @@protoc_insertion_point(field_set_allocated:GameState.Mutation.Insert)
}
Mutation::Mutation(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:GameState.Mutation)
}
Mutation::Mutation(const Mutation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_mutation();
  switch (from.mutation_case()) {
    case kSet: {
      _internal_mutable_set()->::GameState::SetMutation::MergeFrom(from._internal_set());
      break;
    }
    case kRemove: {
      _internal_mutable_remove()->::GameState::RemoveMutation::MergeFrom(from._internal_remove());
      break;
    }
    case kInsert: {
      _internal_mutable_insert()->::GameState::InsertMutation::MergeFrom(from._internal_insert());
      break;
    }
    case MUTATION_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:GameState.Mutation)
}

void Mutation::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Mutation_GameState_2eproto.base);
  clear_has_mutation();
}

Mutation::~Mutation() {
  // @@protoc_insertion_point(destructor:GameState.Mutation)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Mutation::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_mutation()) {
    clear_mutation();
  }
}

void Mutation::ArenaDtor(void* object) {
  Mutation* _this = reinterpret_cast< Mutation* >(object);
  (void)_this;
}
void Mutation::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Mutation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Mutation& Mutation::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Mutation_GameState_2eproto.base);
  return *internal_default_instance();
}


void Mutation::clear_mutation() {
// @@protoc_insertion_point(one_of_clear_start:GameState.Mutation)
  switch (mutation_case()) {
    case kSet: {
      if (GetArena() == nullptr) {
        delete mutation_.set_;
      }
      break;
    }
    case kRemove: {
      if (GetArena() == nullptr) {
        delete mutation_.remove_;
      }
      break;
    }
    case kInsert: {
      if (GetArena() == nullptr) {
        delete mutation_.insert_;
      }
      break;
    }
    case MUTATION_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = MUTATION_NOT_SET;
}


void Mutation::Clear() {
// @@protoc_insertion_point(message_clear_start:GameState.Mutation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_mutation();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Mutation::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .GameState.SetMutation Set = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_set(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .GameState.RemoveMutation Remove = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_remove(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .GameState.InsertMutation Insert = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_insert(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Mutation::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GameState.Mutation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .GameState.SetMutation Set = 1;
  if (_internal_has_set()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::set(this), target, stream);
  }

  // .GameState.RemoveMutation Remove = 2;
  if (_internal_has_remove()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::remove(this), target, stream);
  }

  // .GameState.InsertMutation Insert = 3;
  if (_internal_has_insert()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::insert(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameState.Mutation)
  return target;
}

size_t Mutation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameState.Mutation)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (mutation_case()) {
    // .GameState.SetMutation Set = 1;
    case kSet: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *mutation_.set_);
      break;
    }
    // .GameState.RemoveMutation Remove = 2;
    case kRemove: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *mutation_.remove_);
      break;
    }
    // .GameState.InsertMutation Insert = 3;
    case kInsert: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *mutation_.insert_);
      break;
    }
    case MUTATION_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Mutation::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameState.Mutation)
  GOOGLE_DCHECK_NE(&from, this);
  const Mutation* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Mutation>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameState.Mutation)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameState.Mutation)
    MergeFrom(*source);
  }
}

void Mutation::MergeFrom(const Mutation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameState.Mutation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.mutation_case()) {
    case kSet: {
      _internal_mutable_set()->::GameState::SetMutation::MergeFrom(from._internal_set());
      break;
    }
    case kRemove: {
      _internal_mutable_remove()->::GameState::RemoveMutation::MergeFrom(from._internal_remove());
      break;
    }
    case kInsert: {
      _internal_mutable_insert()->::GameState::InsertMutation::MergeFrom(from._internal_insert());
      break;
    }
    case MUTATION_NOT_SET: {
      break;
    }
  }
}

void Mutation::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameState.Mutation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Mutation::CopyFrom(const Mutation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameState.Mutation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Mutation::IsInitialized() const {
  return true;
}

void Mutation::InternalSwap(Mutation* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(mutation_, other->mutation_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Mutation::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class GameState::_Internal {
 public:
  static const ::Types::Integer& turnnumber(const GameState* msg);
};

const ::Types::Integer&
GameState::_Internal::turnnumber(const GameState* msg) {
  return *msg->turnnumber_;
}
void GameState::clear_turnnumber() {
  if (GetArena() == nullptr && turnnumber_ != nullptr) {
    delete turnnumber_;
  }
  turnnumber_ = nullptr;
}
GameState::GameState(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  players_(arena),
  cards_(arena),
  tiles_(arena),
  teams_(arena),
  stack_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:GameState.GameState)
}
GameState::GameState(const GameState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      players_(from.players_),
      cards_(from.cards_),
      tiles_(from.tiles_),
      teams_(from.teams_),
      stack_(from.stack_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_turnnumber()) {
    turnnumber_ = new ::Types::Integer(*from.turnnumber_);
  } else {
    turnnumber_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:GameState.GameState)
}

void GameState::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GameState_GameState_2eproto.base);
  turnnumber_ = nullptr;
}

GameState::~GameState() {
  // @@protoc_insertion_point(destructor:GameState.GameState)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GameState::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete turnnumber_;
}

void GameState::ArenaDtor(void* object) {
  GameState* _this = reinterpret_cast< GameState* >(object);
  (void)_this;
}
void GameState::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GameState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GameState& GameState::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GameState_GameState_2eproto.base);
  return *internal_default_instance();
}


void GameState::Clear() {
// @@protoc_insertion_point(message_clear_start:GameState.GameState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  players_.Clear();
  cards_.Clear();
  tiles_.Clear();
  teams_.Clear();
  stack_.Clear();
  if (GetArena() == nullptr && turnnumber_ != nullptr) {
    delete turnnumber_;
  }
  turnnumber_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GameState::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .GameState.Player Players = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_players(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .GameState.Card Cards = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_cards(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .GameState.Tile Tiles = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_tiles(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .GameState.Team Teams = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_teams(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // .Types.Integer TurnNumber = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_turnnumber(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .GameState.Card Stack = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_stack(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GameState::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GameState.GameState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .GameState.Player Players = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_players_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_players(i), target, stream);
  }

  // repeated .GameState.Card Cards = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_cards_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_cards(i), target, stream);
  }

  // repeated .GameState.Tile Tiles = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_tiles_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_tiles(i), target, stream);
  }

  // repeated .GameState.Team Teams = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_teams_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_teams(i), target, stream);
  }

  // .Types.Integer TurnNumber = 6;
  if (this->has_turnnumber()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::turnnumber(this), target, stream);
  }

  // repeated .GameState.Card Stack = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_stack_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, this->_internal_stack(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameState.GameState)
  return target;
}

size_t GameState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameState.GameState)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .GameState.Player Players = 1;
  total_size += 1UL * this->_internal_players_size();
  for (const auto& msg : this->players_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .GameState.Card Cards = 2;
  total_size += 1UL * this->_internal_cards_size();
  for (const auto& msg : this->cards_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .GameState.Tile Tiles = 3;
  total_size += 1UL * this->_internal_tiles_size();
  for (const auto& msg : this->tiles_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .GameState.Team Teams = 4;
  total_size += 1UL * this->_internal_teams_size();
  for (const auto& msg : this->teams_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .GameState.Card Stack = 7;
  total_size += 1UL * this->_internal_stack_size();
  for (const auto& msg : this->stack_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .Types.Integer TurnNumber = 6;
  if (this->has_turnnumber()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *turnnumber_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameState::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameState.GameState)
  GOOGLE_DCHECK_NE(&from, this);
  const GameState* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GameState>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameState.GameState)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameState.GameState)
    MergeFrom(*source);
  }
}

void GameState::MergeFrom(const GameState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameState.GameState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  players_.MergeFrom(from.players_);
  cards_.MergeFrom(from.cards_);
  tiles_.MergeFrom(from.tiles_);
  teams_.MergeFrom(from.teams_);
  stack_.MergeFrom(from.stack_);
  if (from.has_turnnumber()) {
    _internal_mutable_turnnumber()->::Types::Integer::MergeFrom(from._internal_turnnumber());
  }
}

void GameState::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameState.GameState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameState::CopyFrom(const GameState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameState.GameState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameState::IsInitialized() const {
  return true;
}

void GameState::InternalSwap(GameState* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  players_.InternalSwap(&other->players_);
  cards_.InternalSwap(&other->cards_);
  tiles_.InternalSwap(&other->tiles_);
  teams_.InternalSwap(&other->teams_);
  stack_.InternalSwap(&other->stack_);
  swap(turnnumber_, other->turnnumber_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GameState::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class GameInstance::_Internal {
 public:
  static const ::GameState::GameState& gamestate(const GameInstance* msg);
};

const ::GameState::GameState&
GameInstance::_Internal::gamestate(const GameInstance* msg) {
  return *msg->gamestate_;
}
GameInstance::GameInstance(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  history_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:GameState.GameInstance)
}
GameInstance::GameInstance(const GameInstance& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      history_(from.history_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_gamestate()) {
    gamestate_ = new ::GameState::GameState(*from.gamestate_);
  } else {
    gamestate_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:GameState.GameInstance)
}

void GameInstance::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GameInstance_GameState_2eproto.base);
  gamestate_ = nullptr;
}

GameInstance::~GameInstance() {
  // @@protoc_insertion_point(destructor:GameState.GameInstance)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GameInstance::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete gamestate_;
}

void GameInstance::ArenaDtor(void* object) {
  GameInstance* _this = reinterpret_cast< GameInstance* >(object);
  (void)_this;
}
void GameInstance::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GameInstance::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GameInstance& GameInstance::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GameInstance_GameState_2eproto.base);
  return *internal_default_instance();
}


void GameInstance::Clear() {
// @@protoc_insertion_point(message_clear_start:GameState.GameInstance)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  history_.Clear();
  if (GetArena() == nullptr && gamestate_ != nullptr) {
    delete gamestate_;
  }
  gamestate_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GameInstance::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .GameState.GameState GameState = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_gamestate(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .GameState.Mutation History = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_history(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GameInstance::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GameState.GameInstance)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .GameState.GameState GameState = 1;
  if (this->has_gamestate()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::gamestate(this), target, stream);
  }

  // repeated .GameState.Mutation History = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_history_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_history(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameState.GameInstance)
  return target;
}

size_t GameInstance::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameState.GameInstance)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .GameState.Mutation History = 2;
  total_size += 1UL * this->_internal_history_size();
  for (const auto& msg : this->history_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .GameState.GameState GameState = 1;
  if (this->has_gamestate()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *gamestate_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameInstance::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameState.GameInstance)
  GOOGLE_DCHECK_NE(&from, this);
  const GameInstance* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GameInstance>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameState.GameInstance)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameState.GameInstance)
    MergeFrom(*source);
  }
}

void GameInstance::MergeFrom(const GameInstance& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameState.GameInstance)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  history_.MergeFrom(from.history_);
  if (from.has_gamestate()) {
    _internal_mutable_gamestate()->::GameState::GameState::MergeFrom(from._internal_gamestate());
  }
}

void GameInstance::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameState.GameInstance)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameInstance::CopyFrom(const GameInstance& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameState.GameInstance)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameInstance::IsInitialized() const {
  return true;
}

void GameInstance::InternalSwap(GameInstance* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  history_.InternalSwap(&other->history_);
  swap(gamestate_, other->gamestate_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GameInstance::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace GameState
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::GameState::Player* Arena::CreateMaybeMessage< ::GameState::Player >(Arena* arena) {
  return Arena::CreateMessageInternal< ::GameState::Player >(arena);
}
template<> PROTOBUF_NOINLINE ::GameState::Tile* Arena::CreateMaybeMessage< ::GameState::Tile >(Arena* arena) {
  return Arena::CreateMessageInternal< ::GameState::Tile >(arena);
}
template<> PROTOBUF_NOINLINE ::GameState::CardMetaData* Arena::CreateMaybeMessage< ::GameState::CardMetaData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::GameState::CardMetaData >(arena);
}
template<> PROTOBUF_NOINLINE ::GameState::CardStats* Arena::CreateMaybeMessage< ::GameState::CardStats >(Arena* arena) {
  return Arena::CreateMessageInternal< ::GameState::CardStats >(arena);
}
template<> PROTOBUF_NOINLINE ::GameState::Card* Arena::CreateMaybeMessage< ::GameState::Card >(Arena* arena) {
  return Arena::CreateMessageInternal< ::GameState::Card >(arena);
}
template<> PROTOBUF_NOINLINE ::GameState::Team* Arena::CreateMaybeMessage< ::GameState::Team >(Arena* arena) {
  return Arena::CreateMessageInternal< ::GameState::Team >(arena);
}
template<> PROTOBUF_NOINLINE ::GameState::SetMutation* Arena::CreateMaybeMessage< ::GameState::SetMutation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::GameState::SetMutation >(arena);
}
template<> PROTOBUF_NOINLINE ::GameState::RemoveMutation* Arena::CreateMaybeMessage< ::GameState::RemoveMutation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::GameState::RemoveMutation >(arena);
}
template<> PROTOBUF_NOINLINE ::GameState::InsertMutation* Arena::CreateMaybeMessage< ::GameState::InsertMutation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::GameState::InsertMutation >(arena);
}
template<> PROTOBUF_NOINLINE ::GameState::Mutation* Arena::CreateMaybeMessage< ::GameState::Mutation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::GameState::Mutation >(arena);
}
template<> PROTOBUF_NOINLINE ::GameState::GameState* Arena::CreateMaybeMessage< ::GameState::GameState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::GameState::GameState >(arena);
}
template<> PROTOBUF_NOINLINE ::GameState::GameInstance* Arena::CreateMaybeMessage< ::GameState::GameInstance >(Arena* arena) {
  return Arena::CreateMessageInternal< ::GameState::GameInstance >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
