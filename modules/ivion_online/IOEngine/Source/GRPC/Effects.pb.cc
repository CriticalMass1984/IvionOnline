// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Effects.proto

#include <GRPC/Effects.pb.h>

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_Effects_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CardList_Effects_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Effects_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_Effect_Effects_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Effects_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Filter_Distance_Effects_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Effects_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Get_Effects_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Effects_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Move_Effects_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Effects_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PlayerList_Effects_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Effects_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Select_Effects_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Effects_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<6> scc_info_StackVar_Effects_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Effects_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_StackVarRef_Effects_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Effects_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TileList_Effects_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Types_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_IntegerValue_Types_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Types_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Path_Types_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Types_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Vec2iValue_Types_2eproto;
namespace Effects {
class PlayerListDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PlayerList> _instance;
} _PlayerList_default_instance_;
class CardListDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CardList> _instance;
} _CardList_default_instance_;
class TileListDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TileList> _instance;
} _TileList_default_instance_;
class StackVarDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StackVar> _instance;
} _StackVar_default_instance_;
class StackVarRefDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StackVarRef> _instance;
} _StackVarRef_default_instance_;
class ConstantDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Constant> _instance;
} _Constant_default_instance_;
class GetDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Get> _instance;
} _Get_default_instance_;
class Filter_DistanceDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Filter_Distance> _instance;
} _Filter_Distance_default_instance_;
class SelectDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Select> _instance;
} _Select_default_instance_;
class MoveDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Move> _instance;
} _Move_default_instance_;
class EffectDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Effect> _instance;
} _Effect_default_instance_;
class CardEffectDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CardEffect> _instance;
} _CardEffect_default_instance_;
}  // namespace Effects
static void InitDefaultsscc_info_CardEffect_Effects_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Effects::_CardEffect_default_instance_;
    new (ptr) ::Effects::CardEffect();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CardEffect_Effects_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_CardEffect_Effects_2eproto}, {
      &scc_info_Effect_Effects_2eproto.base,}};

static void InitDefaultsscc_info_CardList_Effects_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Effects::_CardList_default_instance_;
    new (ptr) ::Effects::CardList();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CardList_Effects_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_CardList_Effects_2eproto}, {
      &scc_info_Path_Types_2eproto.base,}};

static void InitDefaultsscc_info_Constant_Effects_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Effects::_Constant_default_instance_;
    new (ptr) ::Effects::Constant();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Constant_Effects_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Constant_Effects_2eproto}, {
      &scc_info_StackVar_Effects_2eproto.base,}};

static void InitDefaultsscc_info_Effect_Effects_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Effects::_Effect_default_instance_;
    new (ptr) ::Effects::Effect();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_Effect_Effects_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, 0, InitDefaultsscc_info_Effect_Effects_2eproto}, {
      &scc_info_Get_Effects_2eproto.base,
      &scc_info_Filter_Distance_Effects_2eproto.base,
      &scc_info_Select_Effects_2eproto.base,
      &scc_info_Move_Effects_2eproto.base,}};

static void InitDefaultsscc_info_Filter_Distance_Effects_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Effects::_Filter_Distance_default_instance_;
    new (ptr) ::Effects::Filter_Distance();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Filter_Distance_Effects_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Filter_Distance_Effects_2eproto}, {
      &scc_info_StackVarRef_Effects_2eproto.base,}};

static void InitDefaultsscc_info_Get_Effects_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Effects::_Get_default_instance_;
    new (ptr) ::Effects::Get();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Get_Effects_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_Get_Effects_2eproto}, {
      &scc_info_StackVar_Effects_2eproto.base,
      &scc_info_Path_Types_2eproto.base,}};

static void InitDefaultsscc_info_Move_Effects_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Effects::_Move_default_instance_;
    new (ptr) ::Effects::Move();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Move_Effects_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Move_Effects_2eproto}, {
      &scc_info_StackVarRef_Effects_2eproto.base,}};

static void InitDefaultsscc_info_PlayerList_Effects_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Effects::_PlayerList_default_instance_;
    new (ptr) ::Effects::PlayerList();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PlayerList_Effects_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PlayerList_Effects_2eproto}, {
      &scc_info_Path_Types_2eproto.base,}};

static void InitDefaultsscc_info_Select_Effects_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Effects::_Select_default_instance_;
    new (ptr) ::Effects::Select();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Select_Effects_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Select_Effects_2eproto}, {
      &scc_info_StackVarRef_Effects_2eproto.base,}};

static void InitDefaultsscc_info_StackVar_Effects_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Effects::_StackVar_default_instance_;
    new (ptr) ::Effects::StackVar();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<6> scc_info_StackVar_Effects_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 6, 0, InitDefaultsscc_info_StackVar_Effects_2eproto}, {
      &scc_info_PlayerList_Effects_2eproto.base,
      &scc_info_CardList_Effects_2eproto.base,
      &scc_info_TileList_Effects_2eproto.base,
      &scc_info_Path_Types_2eproto.base,
      &scc_info_IntegerValue_Types_2eproto.base,
      &scc_info_Vec2iValue_Types_2eproto.base,}};

static void InitDefaultsscc_info_StackVarRef_Effects_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Effects::_StackVarRef_default_instance_;
    new (ptr) ::Effects::StackVarRef();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_StackVarRef_Effects_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_StackVarRef_Effects_2eproto}, {
      &scc_info_Path_Types_2eproto.base,}};

static void InitDefaultsscc_info_TileList_Effects_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Effects::_TileList_default_instance_;
    new (ptr) ::Effects::TileList();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TileList_Effects_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_TileList_Effects_2eproto}, {
      &scc_info_Path_Types_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_Effects_2eproto[12];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_Effects_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_Effects_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_Effects_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Effects::PlayerList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Effects::PlayerList, players_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Effects::CardList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Effects::CardList, cards_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Effects::TileList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Effects::TileList, tiles_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Effects::StackVar, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::Effects::StackVar, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::Effects::StackVar, entity_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Effects::StackVarRef, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Effects::StackVarRef, path_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Effects::Constant, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Effects::Constant, result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Effects::Get, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Effects::Get, result_),
  PROTOBUF_FIELD_OFFSET(::Effects::Get, source_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Effects::Filter_Distance, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Effects::Filter_Distance, source_),
  PROTOBUF_FIELD_OFFSET(::Effects::Filter_Distance, from_),
  PROTOBUF_FIELD_OFFSET(::Effects::Filter_Distance, distance_),
  PROTOBUF_FIELD_OFFSET(::Effects::Filter_Distance, comparison_),
  PROTOBUF_FIELD_OFFSET(::Effects::Filter_Distance, logicalunion_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Effects::Select, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Effects::Select, source_),
  PROTOBUF_FIELD_OFFSET(::Effects::Select, number_),
  PROTOBUF_FIELD_OFFSET(::Effects::Select, upto_),
  PROTOBUF_FIELD_OFFSET(::Effects::Select, targets_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Effects::Move, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Effects::Move, destination_),
  PROTOBUF_FIELD_OFFSET(::Effects::Move, player_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Effects::Effect, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::Effects::Effect, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::Effects::Effect, effect_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Effects::CardEffect, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Effects::CardEffect, effects_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::Effects::PlayerList)},
  { 6, -1, sizeof(::Effects::CardList)},
  { 12, -1, sizeof(::Effects::TileList)},
  { 18, -1, sizeof(::Effects::StackVar)},
  { 31, -1, sizeof(::Effects::StackVarRef)},
  { 37, -1, sizeof(::Effects::Constant)},
  { 43, -1, sizeof(::Effects::Get)},
  { 50, -1, sizeof(::Effects::Filter_Distance)},
  { 60, -1, sizeof(::Effects::Select)},
  { 69, -1, sizeof(::Effects::Move)},
  { 76, -1, sizeof(::Effects::Effect)},
  { 86, -1, sizeof(::Effects::CardEffect)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Effects::_PlayerList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Effects::_CardList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Effects::_TileList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Effects::_StackVar_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Effects::_StackVarRef_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Effects::_Constant_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Effects::_Get_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Effects::_Filter_Distance_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Effects::_Select_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Effects::_Move_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Effects::_Effect_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Effects::_CardEffect_default_instance_),
};

const char descriptor_table_protodef_Effects_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\rEffects.proto\022\007Effects\032\013Types.proto\"*\n"
  "\nPlayerList\022\034\n\007Players\030\001 \003(\0132\013.Types.Pat"
  "h\"&\n\010CardList\022\032\n\005Cards\030\001 \003(\0132\013.Types.Pat"
  "h\"&\n\010TileList\022\032\n\005Tiles\030\001 \003(\0132\013.Types.Pat"
  "h\"\224\002\n\010StackVar\022&\n\007Players\030\001 \001(\0132\023.Effect"
  "s.PlayerListH\000\022\"\n\005Cards\030\002 \001(\0132\021.Effects."
  "CardListH\000\022\"\n\005Tiles\030\003 \001(\0132\021.Effects.Tile"
  "ListH\000\022!\n\nIntegerRef\030\004 \001(\0132\013.Types.PathH"
  "\000\022\037\n\010Vec2iRef\030\005 \001(\0132\013.Types.PathH\000\022&\n\007In"
  "teger\030\006 \001(\0132\023.Types.IntegerValueH\000\022\"\n\005Ve"
  "c2i\030\007 \001(\0132\021.Types.Vec2iValueH\000B\010\n\006entity"
  "\"(\n\013StackVarRef\022\031\n\004Path\030\001 \001(\0132\013.Types.Pa"
  "th\"-\n\010Constant\022!\n\006Result\030\001 \001(\0132\021.Effects"
  ".StackVar\"E\n\003Get\022!\n\006Result\030\001 \001(\0132\021.Effec"
  "ts.StackVar\022\033\n\006Source\030\002 \001(\0132\013.Types.Path"
  "\"\220\004\n\017Filter_Distance\022$\n\006Source\030\001 \001(\0132\024.E"
  "ffects.StackVarRef\022\"\n\004From\030\002 \001(\0132\024.Effec"
  "ts.StackVarRef\022&\n\010Distance\030\003 \001(\0132\024.Effec"
  "ts.StackVarRef\0225\n\nComparison\030\004 \001(\0162!.Eff"
  "ects.Filter_Distance.CompType\0228\n\014Logical"
  "Union\030\005 \001(\0162\".Effects.Filter_Distance.Gr"
  "oupType\"\251\001\n\010CompType\022\022\n\016COMP_TYPE_NONE\020\000"
  "\022\023\n\017COMP_TYPE_EQUAL\020\001\022\027\n\023COMP_TYPE_LESS_"
  "THAN\020\002\022\035\n\031COMP_TYPE_LESS_THAN_EQUAL\020\003\022\032\n"
  "\026COMP_TYPE_GREATER_THAN\020\004\022 \n\034COMP_TYPE_G"
  "REATER_THAN_EQUAL\020\005\"n\n\tGroupType\022\023\n\017GROU"
  "P_TYPE_NONE\020\000\022\022\n\016GROUP_TYPE_ALL\020\001\022\033\n\027GRO"
  "UP_TYPE_AT_LEAST_ONE\020\002\022\033\n\027GROUP_TYPE_AT_"
  "MOST_NONE\020\003\"s\n\006Select\022$\n\006Source\030\001 \001(\0132\024."
  "Effects.StackVarRef\022$\n\006Number\030\002 \001(\0132\024.Ef"
  "fects.StackVarRef\022\014\n\004UpTo\030\003 \001(\010\022\017\n\007Targe"
  "ts\030\004 \001(\010\"W\n\004Move\022)\n\013Destination\030\001 \001(\0132\024."
  "Effects.StackVarRef\022$\n\006Player\030\002 \001(\0132\024.Ef"
  "fects.StackVarRef\"\246\001\n\006Effect\022\033\n\003Get\030\001 \001("
  "\0132\014.Effects.GetH\000\0223\n\017Filter_Distance\030\002 \001"
  "(\0132\030.Effects.Filter_DistanceH\000\022!\n\006Select"
  "\030\003 \001(\0132\017.Effects.SelectH\000\022\035\n\004Move\030\004 \001(\0132"
  "\r.Effects.MoveH\000B\010\n\006effect\".\n\nCardEffect"
  "\022 \n\007Effects\030\001 \003(\0132\017.Effects.Effectb\006prot"
  "o3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_Effects_2eproto_deps[1] = {
  &::descriptor_table_Types_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_Effects_2eproto_sccs[12] = {
  &scc_info_CardEffect_Effects_2eproto.base,
  &scc_info_CardList_Effects_2eproto.base,
  &scc_info_Constant_Effects_2eproto.base,
  &scc_info_Effect_Effects_2eproto.base,
  &scc_info_Filter_Distance_Effects_2eproto.base,
  &scc_info_Get_Effects_2eproto.base,
  &scc_info_Move_Effects_2eproto.base,
  &scc_info_PlayerList_Effects_2eproto.base,
  &scc_info_Select_Effects_2eproto.base,
  &scc_info_StackVar_Effects_2eproto.base,
  &scc_info_StackVarRef_Effects_2eproto.base,
  &scc_info_TileList_Effects_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_Effects_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Effects_2eproto = {
  false, false, descriptor_table_protodef_Effects_2eproto, "Effects.proto", 1562,
  &descriptor_table_Effects_2eproto_once, descriptor_table_Effects_2eproto_sccs, descriptor_table_Effects_2eproto_deps, 12, 1,
  schemas, file_default_instances, TableStruct_Effects_2eproto::offsets,
  file_level_metadata_Effects_2eproto, 12, file_level_enum_descriptors_Effects_2eproto, file_level_service_descriptors_Effects_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_Effects_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_Effects_2eproto)), true);
namespace Effects {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Filter_Distance_CompType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Effects_2eproto);
  return file_level_enum_descriptors_Effects_2eproto[0];
}
bool Filter_Distance_CompType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Filter_Distance_CompType Filter_Distance::COMP_TYPE_NONE;
constexpr Filter_Distance_CompType Filter_Distance::COMP_TYPE_EQUAL;
constexpr Filter_Distance_CompType Filter_Distance::COMP_TYPE_LESS_THAN;
constexpr Filter_Distance_CompType Filter_Distance::COMP_TYPE_LESS_THAN_EQUAL;
constexpr Filter_Distance_CompType Filter_Distance::COMP_TYPE_GREATER_THAN;
constexpr Filter_Distance_CompType Filter_Distance::COMP_TYPE_GREATER_THAN_EQUAL;
constexpr Filter_Distance_CompType Filter_Distance::CompType_MIN;
constexpr Filter_Distance_CompType Filter_Distance::CompType_MAX;
constexpr int Filter_Distance::CompType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Filter_Distance_GroupType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Effects_2eproto);
  return file_level_enum_descriptors_Effects_2eproto[1];
}
bool Filter_Distance_GroupType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Filter_Distance_GroupType Filter_Distance::GROUP_TYPE_NONE;
constexpr Filter_Distance_GroupType Filter_Distance::GROUP_TYPE_ALL;
constexpr Filter_Distance_GroupType Filter_Distance::GROUP_TYPE_AT_LEAST_ONE;
constexpr Filter_Distance_GroupType Filter_Distance::GROUP_TYPE_AT_MOST_NONE;
constexpr Filter_Distance_GroupType Filter_Distance::GroupType_MIN;
constexpr Filter_Distance_GroupType Filter_Distance::GroupType_MAX;
constexpr int Filter_Distance::GroupType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

class PlayerList::_Internal {
 public:
};

void PlayerList::clear_players() {
  players_.Clear();
}
PlayerList::PlayerList(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  players_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Effects.PlayerList)
}
PlayerList::PlayerList(const PlayerList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      players_(from.players_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Effects.PlayerList)
}

void PlayerList::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PlayerList_Effects_2eproto.base);
}

PlayerList::~PlayerList() {
  // @@protoc_insertion_point(destructor:Effects.PlayerList)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PlayerList::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PlayerList::ArenaDtor(void* object) {
  PlayerList* _this = reinterpret_cast< PlayerList* >(object);
  (void)_this;
}
void PlayerList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PlayerList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PlayerList& PlayerList::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PlayerList_Effects_2eproto.base);
  return *internal_default_instance();
}


void PlayerList::Clear() {
// @@protoc_insertion_point(message_clear_start:Effects.PlayerList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  players_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PlayerList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .Types.Path Players = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_players(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PlayerList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Effects.PlayerList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Types.Path Players = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_players_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_players(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Effects.PlayerList)
  return target;
}

size_t PlayerList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Effects.PlayerList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Types.Path Players = 1;
  total_size += 1UL * this->_internal_players_size();
  for (const auto& msg : this->players_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PlayerList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Effects.PlayerList)
  GOOGLE_DCHECK_NE(&from, this);
  const PlayerList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PlayerList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Effects.PlayerList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Effects.PlayerList)
    MergeFrom(*source);
  }
}

void PlayerList::MergeFrom(const PlayerList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Effects.PlayerList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  players_.MergeFrom(from.players_);
}

void PlayerList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Effects.PlayerList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerList::CopyFrom(const PlayerList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Effects.PlayerList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerList::IsInitialized() const {
  return true;
}

void PlayerList::InternalSwap(PlayerList* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  players_.InternalSwap(&other->players_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PlayerList::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CardList::_Internal {
 public:
};

void CardList::clear_cards() {
  cards_.Clear();
}
CardList::CardList(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  cards_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Effects.CardList)
}
CardList::CardList(const CardList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      cards_(from.cards_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Effects.CardList)
}

void CardList::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CardList_Effects_2eproto.base);
}

CardList::~CardList() {
  // @@protoc_insertion_point(destructor:Effects.CardList)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CardList::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CardList::ArenaDtor(void* object) {
  CardList* _this = reinterpret_cast< CardList* >(object);
  (void)_this;
}
void CardList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CardList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CardList& CardList::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CardList_Effects_2eproto.base);
  return *internal_default_instance();
}


void CardList::Clear() {
// @@protoc_insertion_point(message_clear_start:Effects.CardList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cards_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CardList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .Types.Path Cards = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_cards(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CardList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Effects.CardList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Types.Path Cards = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_cards_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_cards(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Effects.CardList)
  return target;
}

size_t CardList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Effects.CardList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Types.Path Cards = 1;
  total_size += 1UL * this->_internal_cards_size();
  for (const auto& msg : this->cards_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CardList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Effects.CardList)
  GOOGLE_DCHECK_NE(&from, this);
  const CardList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CardList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Effects.CardList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Effects.CardList)
    MergeFrom(*source);
  }
}

void CardList::MergeFrom(const CardList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Effects.CardList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cards_.MergeFrom(from.cards_);
}

void CardList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Effects.CardList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CardList::CopyFrom(const CardList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Effects.CardList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CardList::IsInitialized() const {
  return true;
}

void CardList::InternalSwap(CardList* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  cards_.InternalSwap(&other->cards_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CardList::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class TileList::_Internal {
 public:
};

void TileList::clear_tiles() {
  tiles_.Clear();
}
TileList::TileList(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  tiles_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Effects.TileList)
}
TileList::TileList(const TileList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      tiles_(from.tiles_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Effects.TileList)
}

void TileList::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TileList_Effects_2eproto.base);
}

TileList::~TileList() {
  // @@protoc_insertion_point(destructor:Effects.TileList)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TileList::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void TileList::ArenaDtor(void* object) {
  TileList* _this = reinterpret_cast< TileList* >(object);
  (void)_this;
}
void TileList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TileList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TileList& TileList::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TileList_Effects_2eproto.base);
  return *internal_default_instance();
}


void TileList::Clear() {
// @@protoc_insertion_point(message_clear_start:Effects.TileList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tiles_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TileList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .Types.Path Tiles = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_tiles(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TileList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Effects.TileList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Types.Path Tiles = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_tiles_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_tiles(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Effects.TileList)
  return target;
}

size_t TileList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Effects.TileList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Types.Path Tiles = 1;
  total_size += 1UL * this->_internal_tiles_size();
  for (const auto& msg : this->tiles_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TileList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Effects.TileList)
  GOOGLE_DCHECK_NE(&from, this);
  const TileList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TileList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Effects.TileList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Effects.TileList)
    MergeFrom(*source);
  }
}

void TileList::MergeFrom(const TileList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Effects.TileList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tiles_.MergeFrom(from.tiles_);
}

void TileList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Effects.TileList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TileList::CopyFrom(const TileList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Effects.TileList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TileList::IsInitialized() const {
  return true;
}

void TileList::InternalSwap(TileList* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  tiles_.InternalSwap(&other->tiles_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TileList::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class StackVar::_Internal {
 public:
  static const ::Effects::PlayerList& players(const StackVar* msg);
  static const ::Effects::CardList& cards(const StackVar* msg);
  static const ::Effects::TileList& tiles(const StackVar* msg);
  static const ::Types::Path& integerref(const StackVar* msg);
  static const ::Types::Path& vec2iref(const StackVar* msg);
  static const ::Types::IntegerValue& integer(const StackVar* msg);
  static const ::Types::Vec2iValue& vec2i(const StackVar* msg);
};

const ::Effects::PlayerList&
StackVar::_Internal::players(const StackVar* msg) {
  return *msg->entity_.players_;
}
const ::Effects::CardList&
StackVar::_Internal::cards(const StackVar* msg) {
  return *msg->entity_.cards_;
}
const ::Effects::TileList&
StackVar::_Internal::tiles(const StackVar* msg) {
  return *msg->entity_.tiles_;
}
const ::Types::Path&
StackVar::_Internal::integerref(const StackVar* msg) {
  return *msg->entity_.integerref_;
}
const ::Types::Path&
StackVar::_Internal::vec2iref(const StackVar* msg) {
  return *msg->entity_.vec2iref_;
}
const ::Types::IntegerValue&
StackVar::_Internal::integer(const StackVar* msg) {
  return *msg->entity_.integer_;
}
const ::Types::Vec2iValue&
StackVar::_Internal::vec2i(const StackVar* msg) {
  return *msg->entity_.vec2i_;
}
void StackVar::set_allocated_players(::Effects::PlayerList* players) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_entity();
  if (players) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(players);
    if (message_arena != submessage_arena) {
      players = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, players, submessage_arena);
    }
    set_has_players();
    entity_.players_ = players;
  }
  // @@protoc_insertion_point(field_set_allocated:Effects.StackVar.Players)
}
void StackVar::set_allocated_cards(::Effects::CardList* cards) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_entity();
  if (cards) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(cards);
    if (message_arena != submessage_arena) {
      cards = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cards, submessage_arena);
    }
    set_has_cards();
    entity_.cards_ = cards;
  }
  // @@protoc_insertion_point(field_set_allocated:Effects.StackVar.Cards)
}
void StackVar::set_allocated_tiles(::Effects::TileList* tiles) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_entity();
  if (tiles) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(tiles);
    if (message_arena != submessage_arena) {
      tiles = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tiles, submessage_arena);
    }
    set_has_tiles();
    entity_.tiles_ = tiles;
  }
  // @@protoc_insertion_point(field_set_allocated:Effects.StackVar.Tiles)
}
void StackVar::set_allocated_integerref(::Types::Path* integerref) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_entity();
  if (integerref) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(integerref)->GetArena();
    if (message_arena != submessage_arena) {
      integerref = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, integerref, submessage_arena);
    }
    set_has_integerref();
    entity_.integerref_ = integerref;
  }
  // @@protoc_insertion_point(field_set_allocated:Effects.StackVar.IntegerRef)
}
void StackVar::clear_integerref() {
  if (_internal_has_integerref()) {
    if (GetArena() == nullptr) {
      delete entity_.integerref_;
    }
    clear_has_entity();
  }
}
void StackVar::set_allocated_vec2iref(::Types::Path* vec2iref) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_entity();
  if (vec2iref) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(vec2iref)->GetArena();
    if (message_arena != submessage_arena) {
      vec2iref = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, vec2iref, submessage_arena);
    }
    set_has_vec2iref();
    entity_.vec2iref_ = vec2iref;
  }
  // @@protoc_insertion_point(field_set_allocated:Effects.StackVar.Vec2iRef)
}
void StackVar::clear_vec2iref() {
  if (_internal_has_vec2iref()) {
    if (GetArena() == nullptr) {
      delete entity_.vec2iref_;
    }
    clear_has_entity();
  }
}
void StackVar::set_allocated_integer(::Types::IntegerValue* integer) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_entity();
  if (integer) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(integer)->GetArena();
    if (message_arena != submessage_arena) {
      integer = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, integer, submessage_arena);
    }
    set_has_integer();
    entity_.integer_ = integer;
  }
  // @@protoc_insertion_point(field_set_allocated:Effects.StackVar.Integer)
}
void StackVar::clear_integer() {
  if (_internal_has_integer()) {
    if (GetArena() == nullptr) {
      delete entity_.integer_;
    }
    clear_has_entity();
  }
}
void StackVar::set_allocated_vec2i(::Types::Vec2iValue* vec2i) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_entity();
  if (vec2i) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(vec2i)->GetArena();
    if (message_arena != submessage_arena) {
      vec2i = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, vec2i, submessage_arena);
    }
    set_has_vec2i();
    entity_.vec2i_ = vec2i;
  }
  // @@protoc_insertion_point(field_set_allocated:Effects.StackVar.Vec2i)
}
void StackVar::clear_vec2i() {
  if (_internal_has_vec2i()) {
    if (GetArena() == nullptr) {
      delete entity_.vec2i_;
    }
    clear_has_entity();
  }
}
StackVar::StackVar(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Effects.StackVar)
}
StackVar::StackVar(const StackVar& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_entity();
  switch (from.entity_case()) {
    case kPlayers: {
      _internal_mutable_players()->::Effects::PlayerList::MergeFrom(from._internal_players());
      break;
    }
    case kCards: {
      _internal_mutable_cards()->::Effects::CardList::MergeFrom(from._internal_cards());
      break;
    }
    case kTiles: {
      _internal_mutable_tiles()->::Effects::TileList::MergeFrom(from._internal_tiles());
      break;
    }
    case kIntegerRef: {
      _internal_mutable_integerref()->::Types::Path::MergeFrom(from._internal_integerref());
      break;
    }
    case kVec2IRef: {
      _internal_mutable_vec2iref()->::Types::Path::MergeFrom(from._internal_vec2iref());
      break;
    }
    case kInteger: {
      _internal_mutable_integer()->::Types::IntegerValue::MergeFrom(from._internal_integer());
      break;
    }
    case kVec2I: {
      _internal_mutable_vec2i()->::Types::Vec2iValue::MergeFrom(from._internal_vec2i());
      break;
    }
    case ENTITY_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:Effects.StackVar)
}

void StackVar::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_StackVar_Effects_2eproto.base);
  clear_has_entity();
}

StackVar::~StackVar() {
  // @@protoc_insertion_point(destructor:Effects.StackVar)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void StackVar::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_entity()) {
    clear_entity();
  }
}

void StackVar::ArenaDtor(void* object) {
  StackVar* _this = reinterpret_cast< StackVar* >(object);
  (void)_this;
}
void StackVar::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StackVar::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StackVar& StackVar::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StackVar_Effects_2eproto.base);
  return *internal_default_instance();
}


void StackVar::clear_entity() {
// @@protoc_insertion_point(one_of_clear_start:Effects.StackVar)
  switch (entity_case()) {
    case kPlayers: {
      if (GetArena() == nullptr) {
        delete entity_.players_;
      }
      break;
    }
    case kCards: {
      if (GetArena() == nullptr) {
        delete entity_.cards_;
      }
      break;
    }
    case kTiles: {
      if (GetArena() == nullptr) {
        delete entity_.tiles_;
      }
      break;
    }
    case kIntegerRef: {
      if (GetArena() == nullptr) {
        delete entity_.integerref_;
      }
      break;
    }
    case kVec2IRef: {
      if (GetArena() == nullptr) {
        delete entity_.vec2iref_;
      }
      break;
    }
    case kInteger: {
      if (GetArena() == nullptr) {
        delete entity_.integer_;
      }
      break;
    }
    case kVec2I: {
      if (GetArena() == nullptr) {
        delete entity_.vec2i_;
      }
      break;
    }
    case ENTITY_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = ENTITY_NOT_SET;
}


void StackVar::Clear() {
// @@protoc_insertion_point(message_clear_start:Effects.StackVar)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_entity();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StackVar::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .Effects.PlayerList Players = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_players(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Effects.CardList Cards = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_cards(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Effects.TileList Tiles = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_tiles(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Types.Path IntegerRef = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_integerref(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Types.Path Vec2iRef = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_vec2iref(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Types.IntegerValue Integer = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_integer(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Types.Vec2iValue Vec2i = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_vec2i(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StackVar::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Effects.StackVar)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Effects.PlayerList Players = 1;
  if (_internal_has_players()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::players(this), target, stream);
  }

  // .Effects.CardList Cards = 2;
  if (_internal_has_cards()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::cards(this), target, stream);
  }

  // .Effects.TileList Tiles = 3;
  if (_internal_has_tiles()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::tiles(this), target, stream);
  }

  // .Types.Path IntegerRef = 4;
  if (_internal_has_integerref()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::integerref(this), target, stream);
  }

  // .Types.Path Vec2iRef = 5;
  if (_internal_has_vec2iref()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::vec2iref(this), target, stream);
  }

  // .Types.IntegerValue Integer = 6;
  if (_internal_has_integer()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::integer(this), target, stream);
  }

  // .Types.Vec2iValue Vec2i = 7;
  if (_internal_has_vec2i()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::vec2i(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Effects.StackVar)
  return target;
}

size_t StackVar::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Effects.StackVar)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (entity_case()) {
    // .Effects.PlayerList Players = 1;
    case kPlayers: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *entity_.players_);
      break;
    }
    // .Effects.CardList Cards = 2;
    case kCards: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *entity_.cards_);
      break;
    }
    // .Effects.TileList Tiles = 3;
    case kTiles: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *entity_.tiles_);
      break;
    }
    // .Types.Path IntegerRef = 4;
    case kIntegerRef: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *entity_.integerref_);
      break;
    }
    // .Types.Path Vec2iRef = 5;
    case kVec2IRef: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *entity_.vec2iref_);
      break;
    }
    // .Types.IntegerValue Integer = 6;
    case kInteger: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *entity_.integer_);
      break;
    }
    // .Types.Vec2iValue Vec2i = 7;
    case kVec2I: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *entity_.vec2i_);
      break;
    }
    case ENTITY_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StackVar::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Effects.StackVar)
  GOOGLE_DCHECK_NE(&from, this);
  const StackVar* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StackVar>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Effects.StackVar)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Effects.StackVar)
    MergeFrom(*source);
  }
}

void StackVar::MergeFrom(const StackVar& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Effects.StackVar)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.entity_case()) {
    case kPlayers: {
      _internal_mutable_players()->::Effects::PlayerList::MergeFrom(from._internal_players());
      break;
    }
    case kCards: {
      _internal_mutable_cards()->::Effects::CardList::MergeFrom(from._internal_cards());
      break;
    }
    case kTiles: {
      _internal_mutable_tiles()->::Effects::TileList::MergeFrom(from._internal_tiles());
      break;
    }
    case kIntegerRef: {
      _internal_mutable_integerref()->::Types::Path::MergeFrom(from._internal_integerref());
      break;
    }
    case kVec2IRef: {
      _internal_mutable_vec2iref()->::Types::Path::MergeFrom(from._internal_vec2iref());
      break;
    }
    case kInteger: {
      _internal_mutable_integer()->::Types::IntegerValue::MergeFrom(from._internal_integer());
      break;
    }
    case kVec2I: {
      _internal_mutable_vec2i()->::Types::Vec2iValue::MergeFrom(from._internal_vec2i());
      break;
    }
    case ENTITY_NOT_SET: {
      break;
    }
  }
}

void StackVar::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Effects.StackVar)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StackVar::CopyFrom(const StackVar& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Effects.StackVar)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StackVar::IsInitialized() const {
  return true;
}

void StackVar::InternalSwap(StackVar* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(entity_, other->entity_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata StackVar::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class StackVarRef::_Internal {
 public:
  static const ::Types::Path& path(const StackVarRef* msg);
};

const ::Types::Path&
StackVarRef::_Internal::path(const StackVarRef* msg) {
  return *msg->path_;
}
void StackVarRef::clear_path() {
  if (GetArena() == nullptr && path_ != nullptr) {
    delete path_;
  }
  path_ = nullptr;
}
StackVarRef::StackVarRef(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Effects.StackVarRef)
}
StackVarRef::StackVarRef(const StackVarRef& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_path()) {
    path_ = new ::Types::Path(*from.path_);
  } else {
    path_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:Effects.StackVarRef)
}

void StackVarRef::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_StackVarRef_Effects_2eproto.base);
  path_ = nullptr;
}

StackVarRef::~StackVarRef() {
  // @@protoc_insertion_point(destructor:Effects.StackVarRef)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void StackVarRef::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete path_;
}

void StackVarRef::ArenaDtor(void* object) {
  StackVarRef* _this = reinterpret_cast< StackVarRef* >(object);
  (void)_this;
}
void StackVarRef::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StackVarRef::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StackVarRef& StackVarRef::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StackVarRef_Effects_2eproto.base);
  return *internal_default_instance();
}


void StackVarRef::Clear() {
// @@protoc_insertion_point(message_clear_start:Effects.StackVarRef)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && path_ != nullptr) {
    delete path_;
  }
  path_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StackVarRef::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .Types.Path Path = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_path(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StackVarRef::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Effects.StackVarRef)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Types.Path Path = 1;
  if (this->has_path()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::path(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Effects.StackVarRef)
  return target;
}

size_t StackVarRef::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Effects.StackVarRef)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Types.Path Path = 1;
  if (this->has_path()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *path_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StackVarRef::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Effects.StackVarRef)
  GOOGLE_DCHECK_NE(&from, this);
  const StackVarRef* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StackVarRef>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Effects.StackVarRef)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Effects.StackVarRef)
    MergeFrom(*source);
  }
}

void StackVarRef::MergeFrom(const StackVarRef& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Effects.StackVarRef)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_path()) {
    _internal_mutable_path()->::Types::Path::MergeFrom(from._internal_path());
  }
}

void StackVarRef::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Effects.StackVarRef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StackVarRef::CopyFrom(const StackVarRef& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Effects.StackVarRef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StackVarRef::IsInitialized() const {
  return true;
}

void StackVarRef::InternalSwap(StackVarRef* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(path_, other->path_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StackVarRef::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Constant::_Internal {
 public:
  static const ::Effects::StackVar& result(const Constant* msg);
};

const ::Effects::StackVar&
Constant::_Internal::result(const Constant* msg) {
  return *msg->result_;
}
Constant::Constant(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Effects.Constant)
}
Constant::Constant(const Constant& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_result()) {
    result_ = new ::Effects::StackVar(*from.result_);
  } else {
    result_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:Effects.Constant)
}

void Constant::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Constant_Effects_2eproto.base);
  result_ = nullptr;
}

Constant::~Constant() {
  // @@protoc_insertion_point(destructor:Effects.Constant)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Constant::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete result_;
}

void Constant::ArenaDtor(void* object) {
  Constant* _this = reinterpret_cast< Constant* >(object);
  (void)_this;
}
void Constant::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Constant::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Constant& Constant::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Constant_Effects_2eproto.base);
  return *internal_default_instance();
}


void Constant::Clear() {
// @@protoc_insertion_point(message_clear_start:Effects.Constant)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Constant::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .Effects.StackVar Result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_result(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Constant::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Effects.Constant)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Effects.StackVar Result = 1;
  if (this->has_result()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::result(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Effects.Constant)
  return target;
}

size_t Constant::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Effects.Constant)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Effects.StackVar Result = 1;
  if (this->has_result()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *result_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Constant::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Effects.Constant)
  GOOGLE_DCHECK_NE(&from, this);
  const Constant* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Constant>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Effects.Constant)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Effects.Constant)
    MergeFrom(*source);
  }
}

void Constant::MergeFrom(const Constant& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Effects.Constant)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_result()) {
    _internal_mutable_result()->::Effects::StackVar::MergeFrom(from._internal_result());
  }
}

void Constant::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Effects.Constant)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Constant::CopyFrom(const Constant& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Effects.Constant)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Constant::IsInitialized() const {
  return true;
}

void Constant::InternalSwap(Constant* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(result_, other->result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Constant::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Get::_Internal {
 public:
  static const ::Effects::StackVar& result(const Get* msg);
  static const ::Types::Path& source(const Get* msg);
};

const ::Effects::StackVar&
Get::_Internal::result(const Get* msg) {
  return *msg->result_;
}
const ::Types::Path&
Get::_Internal::source(const Get* msg) {
  return *msg->source_;
}
void Get::clear_source() {
  if (GetArena() == nullptr && source_ != nullptr) {
    delete source_;
  }
  source_ = nullptr;
}
Get::Get(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Effects.Get)
}
Get::Get(const Get& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_result()) {
    result_ = new ::Effects::StackVar(*from.result_);
  } else {
    result_ = nullptr;
  }
  if (from._internal_has_source()) {
    source_ = new ::Types::Path(*from.source_);
  } else {
    source_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:Effects.Get)
}

void Get::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Get_Effects_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&result_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&source_) -
      reinterpret_cast<char*>(&result_)) + sizeof(source_));
}

Get::~Get() {
  // @@protoc_insertion_point(destructor:Effects.Get)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Get::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete result_;
  if (this != internal_default_instance()) delete source_;
}

void Get::ArenaDtor(void* object) {
  Get* _this = reinterpret_cast< Get* >(object);
  (void)_this;
}
void Get::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Get::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Get& Get::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Get_Effects_2eproto.base);
  return *internal_default_instance();
}


void Get::Clear() {
// @@protoc_insertion_point(message_clear_start:Effects.Get)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
  if (GetArena() == nullptr && source_ != nullptr) {
    delete source_;
  }
  source_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Get::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .Effects.StackVar Result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_result(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Types.Path Source = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_source(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Get::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Effects.Get)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Effects.StackVar Result = 1;
  if (this->has_result()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::result(this), target, stream);
  }

  // .Types.Path Source = 2;
  if (this->has_source()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::source(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Effects.Get)
  return target;
}

size_t Get::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Effects.Get)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Effects.StackVar Result = 1;
  if (this->has_result()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *result_);
  }

  // .Types.Path Source = 2;
  if (this->has_source()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *source_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Get::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Effects.Get)
  GOOGLE_DCHECK_NE(&from, this);
  const Get* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Get>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Effects.Get)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Effects.Get)
    MergeFrom(*source);
  }
}

void Get::MergeFrom(const Get& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Effects.Get)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_result()) {
    _internal_mutable_result()->::Effects::StackVar::MergeFrom(from._internal_result());
  }
  if (from.has_source()) {
    _internal_mutable_source()->::Types::Path::MergeFrom(from._internal_source());
  }
}

void Get::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Effects.Get)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Get::CopyFrom(const Get& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Effects.Get)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Get::IsInitialized() const {
  return true;
}

void Get::InternalSwap(Get* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Get, source_)
      + sizeof(Get::source_)
      - PROTOBUF_FIELD_OFFSET(Get, result_)>(
          reinterpret_cast<char*>(&result_),
          reinterpret_cast<char*>(&other->result_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Get::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Filter_Distance::_Internal {
 public:
  static const ::Effects::StackVarRef& source(const Filter_Distance* msg);
  static const ::Effects::StackVarRef& from(const Filter_Distance* msg);
  static const ::Effects::StackVarRef& distance(const Filter_Distance* msg);
};

const ::Effects::StackVarRef&
Filter_Distance::_Internal::source(const Filter_Distance* msg) {
  return *msg->source_;
}
const ::Effects::StackVarRef&
Filter_Distance::_Internal::from(const Filter_Distance* msg) {
  return *msg->from_;
}
const ::Effects::StackVarRef&
Filter_Distance::_Internal::distance(const Filter_Distance* msg) {
  return *msg->distance_;
}
Filter_Distance::Filter_Distance(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Effects.Filter_Distance)
}
Filter_Distance::Filter_Distance(const Filter_Distance& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_source()) {
    source_ = new ::Effects::StackVarRef(*from.source_);
  } else {
    source_ = nullptr;
  }
  if (from._internal_has_from()) {
    from_ = new ::Effects::StackVarRef(*from.from_);
  } else {
    from_ = nullptr;
  }
  if (from._internal_has_distance()) {
    distance_ = new ::Effects::StackVarRef(*from.distance_);
  } else {
    distance_ = nullptr;
  }
  ::memcpy(&comparison_, &from.comparison_,
    static_cast<size_t>(reinterpret_cast<char*>(&logicalunion_) -
    reinterpret_cast<char*>(&comparison_)) + sizeof(logicalunion_));
  // @@protoc_insertion_point(copy_constructor:Effects.Filter_Distance)
}

void Filter_Distance::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Filter_Distance_Effects_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&source_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&logicalunion_) -
      reinterpret_cast<char*>(&source_)) + sizeof(logicalunion_));
}

Filter_Distance::~Filter_Distance() {
  // @@protoc_insertion_point(destructor:Effects.Filter_Distance)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Filter_Distance::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete source_;
  if (this != internal_default_instance()) delete from_;
  if (this != internal_default_instance()) delete distance_;
}

void Filter_Distance::ArenaDtor(void* object) {
  Filter_Distance* _this = reinterpret_cast< Filter_Distance* >(object);
  (void)_this;
}
void Filter_Distance::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Filter_Distance::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Filter_Distance& Filter_Distance::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Filter_Distance_Effects_2eproto.base);
  return *internal_default_instance();
}


void Filter_Distance::Clear() {
// @@protoc_insertion_point(message_clear_start:Effects.Filter_Distance)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && source_ != nullptr) {
    delete source_;
  }
  source_ = nullptr;
  if (GetArena() == nullptr && from_ != nullptr) {
    delete from_;
  }
  from_ = nullptr;
  if (GetArena() == nullptr && distance_ != nullptr) {
    delete distance_;
  }
  distance_ = nullptr;
  ::memset(&comparison_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&logicalunion_) -
      reinterpret_cast<char*>(&comparison_)) + sizeof(logicalunion_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Filter_Distance::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .Effects.StackVarRef Source = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_source(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Effects.StackVarRef From = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_from(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Effects.StackVarRef Distance = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_distance(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Effects.Filter_Distance.CompType Comparison = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_comparison(static_cast<::Effects::Filter_Distance_CompType>(val));
        } else goto handle_unusual;
        continue;
      // .Effects.Filter_Distance.GroupType LogicalUnion = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_logicalunion(static_cast<::Effects::Filter_Distance_GroupType>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Filter_Distance::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Effects.Filter_Distance)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Effects.StackVarRef Source = 1;
  if (this->has_source()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::source(this), target, stream);
  }

  // .Effects.StackVarRef From = 2;
  if (this->has_from()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::from(this), target, stream);
  }

  // .Effects.StackVarRef Distance = 3;
  if (this->has_distance()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::distance(this), target, stream);
  }

  // .Effects.Filter_Distance.CompType Comparison = 4;
  if (this->comparison() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_comparison(), target);
  }

  // .Effects.Filter_Distance.GroupType LogicalUnion = 5;
  if (this->logicalunion() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->_internal_logicalunion(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Effects.Filter_Distance)
  return target;
}

size_t Filter_Distance::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Effects.Filter_Distance)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Effects.StackVarRef Source = 1;
  if (this->has_source()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *source_);
  }

  // .Effects.StackVarRef From = 2;
  if (this->has_from()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *from_);
  }

  // .Effects.StackVarRef Distance = 3;
  if (this->has_distance()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *distance_);
  }

  // .Effects.Filter_Distance.CompType Comparison = 4;
  if (this->comparison() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_comparison());
  }

  // .Effects.Filter_Distance.GroupType LogicalUnion = 5;
  if (this->logicalunion() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_logicalunion());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Filter_Distance::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Effects.Filter_Distance)
  GOOGLE_DCHECK_NE(&from, this);
  const Filter_Distance* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Filter_Distance>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Effects.Filter_Distance)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Effects.Filter_Distance)
    MergeFrom(*source);
  }
}

void Filter_Distance::MergeFrom(const Filter_Distance& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Effects.Filter_Distance)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_source()) {
    _internal_mutable_source()->::Effects::StackVarRef::MergeFrom(from._internal_source());
  }
  if (from.has_from()) {
    _internal_mutable_from()->::Effects::StackVarRef::MergeFrom(from._internal_from());
  }
  if (from.has_distance()) {
    _internal_mutable_distance()->::Effects::StackVarRef::MergeFrom(from._internal_distance());
  }
  if (from.comparison() != 0) {
    _internal_set_comparison(from._internal_comparison());
  }
  if (from.logicalunion() != 0) {
    _internal_set_logicalunion(from._internal_logicalunion());
  }
}

void Filter_Distance::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Effects.Filter_Distance)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Filter_Distance::CopyFrom(const Filter_Distance& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Effects.Filter_Distance)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Filter_Distance::IsInitialized() const {
  return true;
}

void Filter_Distance::InternalSwap(Filter_Distance* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Filter_Distance, logicalunion_)
      + sizeof(Filter_Distance::logicalunion_)
      - PROTOBUF_FIELD_OFFSET(Filter_Distance, source_)>(
          reinterpret_cast<char*>(&source_),
          reinterpret_cast<char*>(&other->source_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Filter_Distance::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Select::_Internal {
 public:
  static const ::Effects::StackVarRef& source(const Select* msg);
  static const ::Effects::StackVarRef& number(const Select* msg);
};

const ::Effects::StackVarRef&
Select::_Internal::source(const Select* msg) {
  return *msg->source_;
}
const ::Effects::StackVarRef&
Select::_Internal::number(const Select* msg) {
  return *msg->number_;
}
Select::Select(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Effects.Select)
}
Select::Select(const Select& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_source()) {
    source_ = new ::Effects::StackVarRef(*from.source_);
  } else {
    source_ = nullptr;
  }
  if (from._internal_has_number()) {
    number_ = new ::Effects::StackVarRef(*from.number_);
  } else {
    number_ = nullptr;
  }
  ::memcpy(&upto_, &from.upto_,
    static_cast<size_t>(reinterpret_cast<char*>(&targets_) -
    reinterpret_cast<char*>(&upto_)) + sizeof(targets_));
  // @@protoc_insertion_point(copy_constructor:Effects.Select)
}

void Select::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Select_Effects_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&source_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&targets_) -
      reinterpret_cast<char*>(&source_)) + sizeof(targets_));
}

Select::~Select() {
  // @@protoc_insertion_point(destructor:Effects.Select)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Select::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete source_;
  if (this != internal_default_instance()) delete number_;
}

void Select::ArenaDtor(void* object) {
  Select* _this = reinterpret_cast< Select* >(object);
  (void)_this;
}
void Select::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Select::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Select& Select::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Select_Effects_2eproto.base);
  return *internal_default_instance();
}


void Select::Clear() {
// @@protoc_insertion_point(message_clear_start:Effects.Select)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && source_ != nullptr) {
    delete source_;
  }
  source_ = nullptr;
  if (GetArena() == nullptr && number_ != nullptr) {
    delete number_;
  }
  number_ = nullptr;
  ::memset(&upto_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&targets_) -
      reinterpret_cast<char*>(&upto_)) + sizeof(targets_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Select::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .Effects.StackVarRef Source = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_source(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Effects.StackVarRef Number = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_number(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool UpTo = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          upto_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool Targets = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          targets_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Select::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Effects.Select)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Effects.StackVarRef Source = 1;
  if (this->has_source()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::source(this), target, stream);
  }

  // .Effects.StackVarRef Number = 2;
  if (this->has_number()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::number(this), target, stream);
  }

  // bool UpTo = 3;
  if (this->upto() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_upto(), target);
  }

  // bool Targets = 4;
  if (this->targets() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_targets(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Effects.Select)
  return target;
}

size_t Select::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Effects.Select)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Effects.StackVarRef Source = 1;
  if (this->has_source()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *source_);
  }

  // .Effects.StackVarRef Number = 2;
  if (this->has_number()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *number_);
  }

  // bool UpTo = 3;
  if (this->upto() != 0) {
    total_size += 1 + 1;
  }

  // bool Targets = 4;
  if (this->targets() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Select::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Effects.Select)
  GOOGLE_DCHECK_NE(&from, this);
  const Select* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Select>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Effects.Select)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Effects.Select)
    MergeFrom(*source);
  }
}

void Select::MergeFrom(const Select& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Effects.Select)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_source()) {
    _internal_mutable_source()->::Effects::StackVarRef::MergeFrom(from._internal_source());
  }
  if (from.has_number()) {
    _internal_mutable_number()->::Effects::StackVarRef::MergeFrom(from._internal_number());
  }
  if (from.upto() != 0) {
    _internal_set_upto(from._internal_upto());
  }
  if (from.targets() != 0) {
    _internal_set_targets(from._internal_targets());
  }
}

void Select::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Effects.Select)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Select::CopyFrom(const Select& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Effects.Select)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Select::IsInitialized() const {
  return true;
}

void Select::InternalSwap(Select* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Select, targets_)
      + sizeof(Select::targets_)
      - PROTOBUF_FIELD_OFFSET(Select, source_)>(
          reinterpret_cast<char*>(&source_),
          reinterpret_cast<char*>(&other->source_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Select::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Move::_Internal {
 public:
  static const ::Effects::StackVarRef& destination(const Move* msg);
  static const ::Effects::StackVarRef& player(const Move* msg);
};

const ::Effects::StackVarRef&
Move::_Internal::destination(const Move* msg) {
  return *msg->destination_;
}
const ::Effects::StackVarRef&
Move::_Internal::player(const Move* msg) {
  return *msg->player_;
}
Move::Move(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Effects.Move)
}
Move::Move(const Move& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_destination()) {
    destination_ = new ::Effects::StackVarRef(*from.destination_);
  } else {
    destination_ = nullptr;
  }
  if (from._internal_has_player()) {
    player_ = new ::Effects::StackVarRef(*from.player_);
  } else {
    player_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:Effects.Move)
}

void Move::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Move_Effects_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&destination_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&player_) -
      reinterpret_cast<char*>(&destination_)) + sizeof(player_));
}

Move::~Move() {
  // @@protoc_insertion_point(destructor:Effects.Move)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Move::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete destination_;
  if (this != internal_default_instance()) delete player_;
}

void Move::ArenaDtor(void* object) {
  Move* _this = reinterpret_cast< Move* >(object);
  (void)_this;
}
void Move::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Move::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Move& Move::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Move_Effects_2eproto.base);
  return *internal_default_instance();
}


void Move::Clear() {
// @@protoc_insertion_point(message_clear_start:Effects.Move)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && destination_ != nullptr) {
    delete destination_;
  }
  destination_ = nullptr;
  if (GetArena() == nullptr && player_ != nullptr) {
    delete player_;
  }
  player_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Move::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .Effects.StackVarRef Destination = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_destination(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Effects.StackVarRef Player = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_player(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Move::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Effects.Move)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Effects.StackVarRef Destination = 1;
  if (this->has_destination()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::destination(this), target, stream);
  }

  // .Effects.StackVarRef Player = 2;
  if (this->has_player()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::player(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Effects.Move)
  return target;
}

size_t Move::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Effects.Move)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Effects.StackVarRef Destination = 1;
  if (this->has_destination()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *destination_);
  }

  // .Effects.StackVarRef Player = 2;
  if (this->has_player()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *player_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Move::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Effects.Move)
  GOOGLE_DCHECK_NE(&from, this);
  const Move* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Move>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Effects.Move)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Effects.Move)
    MergeFrom(*source);
  }
}

void Move::MergeFrom(const Move& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Effects.Move)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_destination()) {
    _internal_mutable_destination()->::Effects::StackVarRef::MergeFrom(from._internal_destination());
  }
  if (from.has_player()) {
    _internal_mutable_player()->::Effects::StackVarRef::MergeFrom(from._internal_player());
  }
}

void Move::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Effects.Move)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Move::CopyFrom(const Move& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Effects.Move)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Move::IsInitialized() const {
  return true;
}

void Move::InternalSwap(Move* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Move, player_)
      + sizeof(Move::player_)
      - PROTOBUF_FIELD_OFFSET(Move, destination_)>(
          reinterpret_cast<char*>(&destination_),
          reinterpret_cast<char*>(&other->destination_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Move::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Effect::_Internal {
 public:
  static const ::Effects::Get& get(const Effect* msg);
  static const ::Effects::Filter_Distance& filter_distance(const Effect* msg);
  static const ::Effects::Select& select(const Effect* msg);
  static const ::Effects::Move& move(const Effect* msg);
};

const ::Effects::Get&
Effect::_Internal::get(const Effect* msg) {
  return *msg->effect_.get_;
}
const ::Effects::Filter_Distance&
Effect::_Internal::filter_distance(const Effect* msg) {
  return *msg->effect_.filter_distance_;
}
const ::Effects::Select&
Effect::_Internal::select(const Effect* msg) {
  return *msg->effect_.select_;
}
const ::Effects::Move&
Effect::_Internal::move(const Effect* msg) {
  return *msg->effect_.move_;
}
void Effect::set_allocated_get(::Effects::Get* get) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_effect();
  if (get) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(get);
    if (message_arena != submessage_arena) {
      get = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, get, submessage_arena);
    }
    set_has_get();
    effect_.get_ = get;
  }
  // @@protoc_insertion_point(field_set_allocated:Effects.Effect.Get)
}
void Effect::set_allocated_filter_distance(::Effects::Filter_Distance* filter_distance) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_effect();
  if (filter_distance) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(filter_distance);
    if (message_arena != submessage_arena) {
      filter_distance = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, filter_distance, submessage_arena);
    }
    set_has_filter_distance();
    effect_.filter_distance_ = filter_distance;
  }
  // @@protoc_insertion_point(field_set_allocated:Effects.Effect.Filter_Distance)
}
void Effect::set_allocated_select(::Effects::Select* select) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_effect();
  if (select) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(select);
    if (message_arena != submessage_arena) {
      select = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, select, submessage_arena);
    }
    set_has_select();
    effect_.select_ = select;
  }
  // @@protoc_insertion_point(field_set_allocated:Effects.Effect.Select)
}
void Effect::set_allocated_move(::Effects::Move* move) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_effect();
  if (move) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(move);
    if (message_arena != submessage_arena) {
      move = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, move, submessage_arena);
    }
    set_has_move();
    effect_.move_ = move;
  }
  // @@protoc_insertion_point(field_set_allocated:Effects.Effect.Move)
}
Effect::Effect(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Effects.Effect)
}
Effect::Effect(const Effect& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_effect();
  switch (from.effect_case()) {
    case kGet: {
      _internal_mutable_get()->::Effects::Get::MergeFrom(from._internal_get());
      break;
    }
    case kFilterDistance: {
      _internal_mutable_filter_distance()->::Effects::Filter_Distance::MergeFrom(from._internal_filter_distance());
      break;
    }
    case kSelect: {
      _internal_mutable_select()->::Effects::Select::MergeFrom(from._internal_select());
      break;
    }
    case kMove: {
      _internal_mutable_move()->::Effects::Move::MergeFrom(from._internal_move());
      break;
    }
    case EFFECT_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:Effects.Effect)
}

void Effect::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Effect_Effects_2eproto.base);
  clear_has_effect();
}

Effect::~Effect() {
  // @@protoc_insertion_point(destructor:Effects.Effect)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Effect::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_effect()) {
    clear_effect();
  }
}

void Effect::ArenaDtor(void* object) {
  Effect* _this = reinterpret_cast< Effect* >(object);
  (void)_this;
}
void Effect::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Effect::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Effect& Effect::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Effect_Effects_2eproto.base);
  return *internal_default_instance();
}


void Effect::clear_effect() {
// @@protoc_insertion_point(one_of_clear_start:Effects.Effect)
  switch (effect_case()) {
    case kGet: {
      if (GetArena() == nullptr) {
        delete effect_.get_;
      }
      break;
    }
    case kFilterDistance: {
      if (GetArena() == nullptr) {
        delete effect_.filter_distance_;
      }
      break;
    }
    case kSelect: {
      if (GetArena() == nullptr) {
        delete effect_.select_;
      }
      break;
    }
    case kMove: {
      if (GetArena() == nullptr) {
        delete effect_.move_;
      }
      break;
    }
    case EFFECT_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = EFFECT_NOT_SET;
}


void Effect::Clear() {
// @@protoc_insertion_point(message_clear_start:Effects.Effect)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_effect();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Effect::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .Effects.Get Get = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_get(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Effects.Filter_Distance Filter_Distance = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_filter_distance(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Effects.Select Select = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_select(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Effects.Move Move = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_move(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Effect::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Effects.Effect)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Effects.Get Get = 1;
  if (_internal_has_get()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::get(this), target, stream);
  }

  // .Effects.Filter_Distance Filter_Distance = 2;
  if (_internal_has_filter_distance()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::filter_distance(this), target, stream);
  }

  // .Effects.Select Select = 3;
  if (_internal_has_select()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::select(this), target, stream);
  }

  // .Effects.Move Move = 4;
  if (_internal_has_move()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::move(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Effects.Effect)
  return target;
}

size_t Effect::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Effects.Effect)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (effect_case()) {
    // .Effects.Get Get = 1;
    case kGet: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *effect_.get_);
      break;
    }
    // .Effects.Filter_Distance Filter_Distance = 2;
    case kFilterDistance: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *effect_.filter_distance_);
      break;
    }
    // .Effects.Select Select = 3;
    case kSelect: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *effect_.select_);
      break;
    }
    // .Effects.Move Move = 4;
    case kMove: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *effect_.move_);
      break;
    }
    case EFFECT_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Effect::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Effects.Effect)
  GOOGLE_DCHECK_NE(&from, this);
  const Effect* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Effect>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Effects.Effect)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Effects.Effect)
    MergeFrom(*source);
  }
}

void Effect::MergeFrom(const Effect& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Effects.Effect)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.effect_case()) {
    case kGet: {
      _internal_mutable_get()->::Effects::Get::MergeFrom(from._internal_get());
      break;
    }
    case kFilterDistance: {
      _internal_mutable_filter_distance()->::Effects::Filter_Distance::MergeFrom(from._internal_filter_distance());
      break;
    }
    case kSelect: {
      _internal_mutable_select()->::Effects::Select::MergeFrom(from._internal_select());
      break;
    }
    case kMove: {
      _internal_mutable_move()->::Effects::Move::MergeFrom(from._internal_move());
      break;
    }
    case EFFECT_NOT_SET: {
      break;
    }
  }
}

void Effect::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Effects.Effect)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Effect::CopyFrom(const Effect& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Effects.Effect)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Effect::IsInitialized() const {
  return true;
}

void Effect::InternalSwap(Effect* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(effect_, other->effect_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Effect::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CardEffect::_Internal {
 public:
};

CardEffect::CardEffect(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  effects_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Effects.CardEffect)
}
CardEffect::CardEffect(const CardEffect& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      effects_(from.effects_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Effects.CardEffect)
}

void CardEffect::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CardEffect_Effects_2eproto.base);
}

CardEffect::~CardEffect() {
  // @@protoc_insertion_point(destructor:Effects.CardEffect)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CardEffect::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CardEffect::ArenaDtor(void* object) {
  CardEffect* _this = reinterpret_cast< CardEffect* >(object);
  (void)_this;
}
void CardEffect::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CardEffect::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CardEffect& CardEffect::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CardEffect_Effects_2eproto.base);
  return *internal_default_instance();
}


void CardEffect::Clear() {
// @@protoc_insertion_point(message_clear_start:Effects.CardEffect)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  effects_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CardEffect::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .Effects.Effect Effects = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_effects(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CardEffect::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Effects.CardEffect)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Effects.Effect Effects = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_effects_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_effects(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Effects.CardEffect)
  return target;
}

size_t CardEffect::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Effects.CardEffect)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Effects.Effect Effects = 1;
  total_size += 1UL * this->_internal_effects_size();
  for (const auto& msg : this->effects_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CardEffect::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Effects.CardEffect)
  GOOGLE_DCHECK_NE(&from, this);
  const CardEffect* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CardEffect>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Effects.CardEffect)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Effects.CardEffect)
    MergeFrom(*source);
  }
}

void CardEffect::MergeFrom(const CardEffect& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Effects.CardEffect)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  effects_.MergeFrom(from.effects_);
}

void CardEffect::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Effects.CardEffect)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CardEffect::CopyFrom(const CardEffect& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Effects.CardEffect)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CardEffect::IsInitialized() const {
  return true;
}

void CardEffect::InternalSwap(CardEffect* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  effects_.InternalSwap(&other->effects_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CardEffect::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace Effects
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::Effects::PlayerList* Arena::CreateMaybeMessage< ::Effects::PlayerList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Effects::PlayerList >(arena);
}
template<> PROTOBUF_NOINLINE ::Effects::CardList* Arena::CreateMaybeMessage< ::Effects::CardList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Effects::CardList >(arena);
}
template<> PROTOBUF_NOINLINE ::Effects::TileList* Arena::CreateMaybeMessage< ::Effects::TileList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Effects::TileList >(arena);
}
template<> PROTOBUF_NOINLINE ::Effects::StackVar* Arena::CreateMaybeMessage< ::Effects::StackVar >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Effects::StackVar >(arena);
}
template<> PROTOBUF_NOINLINE ::Effects::StackVarRef* Arena::CreateMaybeMessage< ::Effects::StackVarRef >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Effects::StackVarRef >(arena);
}
template<> PROTOBUF_NOINLINE ::Effects::Constant* Arena::CreateMaybeMessage< ::Effects::Constant >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Effects::Constant >(arena);
}
template<> PROTOBUF_NOINLINE ::Effects::Get* Arena::CreateMaybeMessage< ::Effects::Get >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Effects::Get >(arena);
}
template<> PROTOBUF_NOINLINE ::Effects::Filter_Distance* Arena::CreateMaybeMessage< ::Effects::Filter_Distance >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Effects::Filter_Distance >(arena);
}
template<> PROTOBUF_NOINLINE ::Effects::Select* Arena::CreateMaybeMessage< ::Effects::Select >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Effects::Select >(arena);
}
template<> PROTOBUF_NOINLINE ::Effects::Move* Arena::CreateMaybeMessage< ::Effects::Move >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Effects::Move >(arena);
}
template<> PROTOBUF_NOINLINE ::Effects::Effect* Arena::CreateMaybeMessage< ::Effects::Effect >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Effects::Effect >(arena);
}
template<> PROTOBUF_NOINLINE ::Effects::CardEffect* Arena::CreateMaybeMessage< ::Effects::CardEffect >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Effects::CardEffect >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
