// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: GameInfo.proto

#include <GRPC/GameInfo.pb.h>

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_GameState_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CardMetaData_GameState_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_GameInfo_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AIAgent_GameInfo_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_GameInfo_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CardInfo_GameInfo_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_GameInfo_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PlayerAgent_GameInfo_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_GameInfo_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_PlayerInfo_GameInfo_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_GameInfo_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RandomAgent_GameInfo_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Types_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Vec2i_Types_2eproto;
namespace NetworkIO {
class CardInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CardInfo> _instance;
} _CardInfo_default_instance_;
class RandomAgentDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RandomAgent> _instance;
} _RandomAgent_default_instance_;
class AIAgentDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AIAgent> _instance;
} _AIAgent_default_instance_;
class PlayerAgentDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PlayerAgent> _instance;
} _PlayerAgent_default_instance_;
class PlayerInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PlayerInfo> _instance;
} _PlayerInfo_default_instance_;
class GameInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GameInfo> _instance;
} _GameInfo_default_instance_;
}  // namespace NetworkIO
static void InitDefaultsscc_info_AIAgent_GameInfo_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NetworkIO::_AIAgent_default_instance_;
    new (ptr) ::NetworkIO::AIAgent();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AIAgent_GameInfo_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AIAgent_GameInfo_2eproto}, {}};

static void InitDefaultsscc_info_CardInfo_GameInfo_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NetworkIO::_CardInfo_default_instance_;
    new (ptr) ::NetworkIO::CardInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CardInfo_GameInfo_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_CardInfo_GameInfo_2eproto}, {
      &scc_info_CardMetaData_GameState_2eproto.base,}};

static void InitDefaultsscc_info_GameInfo_GameInfo_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NetworkIO::_GameInfo_default_instance_;
    new (ptr) ::NetworkIO::GameInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_GameInfo_GameInfo_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_GameInfo_GameInfo_2eproto}, {
      &scc_info_PlayerInfo_GameInfo_2eproto.base,
      &scc_info_Vec2i_Types_2eproto.base,}};

static void InitDefaultsscc_info_PlayerAgent_GameInfo_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NetworkIO::_PlayerAgent_default_instance_;
    new (ptr) ::NetworkIO::PlayerAgent();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PlayerAgent_GameInfo_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PlayerAgent_GameInfo_2eproto}, {}};

static void InitDefaultsscc_info_PlayerInfo_GameInfo_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NetworkIO::_PlayerInfo_default_instance_;
    new (ptr) ::NetworkIO::PlayerInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_PlayerInfo_GameInfo_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 5, 0, InitDefaultsscc_info_PlayerInfo_GameInfo_2eproto}, {
      &scc_info_CardInfo_GameInfo_2eproto.base,
      &scc_info_Vec2i_Types_2eproto.base,
      &scc_info_AIAgent_GameInfo_2eproto.base,
      &scc_info_RandomAgent_GameInfo_2eproto.base,
      &scc_info_PlayerAgent_GameInfo_2eproto.base,}};

static void InitDefaultsscc_info_RandomAgent_GameInfo_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NetworkIO::_RandomAgent_default_instance_;
    new (ptr) ::NetworkIO::RandomAgent();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RandomAgent_GameInfo_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RandomAgent_GameInfo_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_GameInfo_2eproto[6];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_GameInfo_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_GameInfo_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_GameInfo_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::NetworkIO::CardInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::NetworkIO::CardInfo, metadata_),
  PROTOBUF_FIELD_OFFSET(::NetworkIO::CardInfo, count_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::NetworkIO::RandomAgent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::NetworkIO::AIAgent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::NetworkIO::PlayerAgent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::NetworkIO::PlayerInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::NetworkIO::PlayerInfo, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::NetworkIO::PlayerInfo, username_),
  PROTOBUF_FIELD_OFFSET(::NetworkIO::PlayerInfo, uid_),
  PROTOBUF_FIELD_OFFSET(::NetworkIO::PlayerInfo, deck_),
  PROTOBUF_FIELD_OFFSET(::NetworkIO::PlayerInfo, startingposition_),
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::NetworkIO::PlayerInfo, AgentInfo_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::NetworkIO::GameInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::NetworkIO::GameInfo, players_),
  PROTOBUF_FIELD_OFFSET(::NetworkIO::GameInfo, mapsize_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::NetworkIO::CardInfo)},
  { 7, -1, sizeof(::NetworkIO::RandomAgent)},
  { 12, -1, sizeof(::NetworkIO::AIAgent)},
  { 17, -1, sizeof(::NetworkIO::PlayerAgent)},
  { 22, -1, sizeof(::NetworkIO::PlayerInfo)},
  { 35, -1, sizeof(::NetworkIO::GameInfo)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::NetworkIO::_CardInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::NetworkIO::_RandomAgent_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::NetworkIO::_AIAgent_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::NetworkIO::_PlayerAgent_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::NetworkIO::_PlayerInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::NetworkIO::_GameInfo_default_instance_),
};

const char descriptor_table_protodef_GameInfo_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\016GameInfo.proto\022\tNetworkIO\032\013Types.proto"
  "\032\rEffects.proto\032\017GameState.proto\"D\n\010Card"
  "Info\022)\n\010metadata\030\001 \001(\0132\027.GameState.CardM"
  "etaData\022\r\n\005Count\030\002 \001(\005\"\r\n\013RandomAgent\"\t\n"
  "\007AIAgent\"\r\n\013PlayerAgent\"\210\002\n\nPlayerInfo\022\020"
  "\n\010Username\030\001 \001(\t\022\013\n\003UID\030\002 \001(\t\022!\n\004Deck\030\003 "
  "\003(\0132\023.NetworkIO.CardInfo\022&\n\020StartingPosi"
  "tion\030\004 \001(\0132\014.Types.Vec2i\022%\n\007AIAgent\030\005 \001("
  "\0132\022.NetworkIO.AIAgentH\000\022-\n\013RandomAgent\030\006"
  " \001(\0132\026.NetworkIO.RandomAgentH\000\022-\n\013Player"
  "Agent\030\007 \001(\0132\026.NetworkIO.PlayerAgentH\000B\013\n"
  "\tAgentInfo\"Q\n\010GameInfo\022&\n\007Players\030\001 \003(\0132"
  "\025.NetworkIO.PlayerInfo\022\035\n\007MapSize\030\002 \001(\0132"
  "\014.Types.Vec2ib\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_GameInfo_2eproto_deps[3] = {
  &::descriptor_table_Effects_2eproto,
  &::descriptor_table_GameState_2eproto,
  &::descriptor_table_Types_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_GameInfo_2eproto_sccs[6] = {
  &scc_info_AIAgent_GameInfo_2eproto.base,
  &scc_info_CardInfo_GameInfo_2eproto.base,
  &scc_info_GameInfo_GameInfo_2eproto.base,
  &scc_info_PlayerAgent_GameInfo_2eproto.base,
  &scc_info_PlayerInfo_GameInfo_2eproto.base,
  &scc_info_RandomAgent_GameInfo_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_GameInfo_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_GameInfo_2eproto = {
  false, false, descriptor_table_protodef_GameInfo_2eproto, "GameInfo.proto", 541,
  &descriptor_table_GameInfo_2eproto_once, descriptor_table_GameInfo_2eproto_sccs, descriptor_table_GameInfo_2eproto_deps, 6, 3,
  schemas, file_default_instances, TableStruct_GameInfo_2eproto::offsets,
  file_level_metadata_GameInfo_2eproto, 6, file_level_enum_descriptors_GameInfo_2eproto, file_level_service_descriptors_GameInfo_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_GameInfo_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_GameInfo_2eproto)), true);
namespace NetworkIO {

// ===================================================================

class CardInfo::_Internal {
 public:
  static const ::GameState::CardMetaData& metadata(const CardInfo* msg);
};

const ::GameState::CardMetaData&
CardInfo::_Internal::metadata(const CardInfo* msg) {
  return *msg->metadata_;
}
void CardInfo::clear_metadata() {
  if (GetArena() == nullptr && metadata_ != nullptr) {
    delete metadata_;
  }
  metadata_ = nullptr;
}
CardInfo::CardInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:NetworkIO.CardInfo)
}
CardInfo::CardInfo(const CardInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_metadata()) {
    metadata_ = new ::GameState::CardMetaData(*from.metadata_);
  } else {
    metadata_ = nullptr;
  }
  count_ = from.count_;
  // @@protoc_insertion_point(copy_constructor:NetworkIO.CardInfo)
}

void CardInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CardInfo_GameInfo_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&metadata_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&count_) -
      reinterpret_cast<char*>(&metadata_)) + sizeof(count_));
}

CardInfo::~CardInfo() {
  // @@protoc_insertion_point(destructor:NetworkIO.CardInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CardInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete metadata_;
}

void CardInfo::ArenaDtor(void* object) {
  CardInfo* _this = reinterpret_cast< CardInfo* >(object);
  (void)_this;
}
void CardInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CardInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CardInfo& CardInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CardInfo_GameInfo_2eproto.base);
  return *internal_default_instance();
}


void CardInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:NetworkIO.CardInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && metadata_ != nullptr) {
    delete metadata_;
  }
  metadata_ = nullptr;
  count_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CardInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .GameState.CardMetaData metadata = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_metadata(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 Count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CardInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:NetworkIO.CardInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .GameState.CardMetaData metadata = 1;
  if (this->has_metadata()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::metadata(this), target, stream);
  }

  // int32 Count = 2;
  if (this->count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NetworkIO.CardInfo)
  return target;
}

size_t CardInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetworkIO.CardInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .GameState.CardMetaData metadata = 1;
  if (this->has_metadata()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *metadata_);
  }

  // int32 Count = 2;
  if (this->count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_count());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CardInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NetworkIO.CardInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const CardInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CardInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NetworkIO.CardInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NetworkIO.CardInfo)
    MergeFrom(*source);
  }
}

void CardInfo::MergeFrom(const CardInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetworkIO.CardInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_metadata()) {
    _internal_mutable_metadata()->::GameState::CardMetaData::MergeFrom(from._internal_metadata());
  }
  if (from.count() != 0) {
    _internal_set_count(from._internal_count());
  }
}

void CardInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NetworkIO.CardInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CardInfo::CopyFrom(const CardInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetworkIO.CardInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CardInfo::IsInitialized() const {
  return true;
}

void CardInfo::InternalSwap(CardInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CardInfo, count_)
      + sizeof(CardInfo::count_)
      - PROTOBUF_FIELD_OFFSET(CardInfo, metadata_)>(
          reinterpret_cast<char*>(&metadata_),
          reinterpret_cast<char*>(&other->metadata_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CardInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class RandomAgent::_Internal {
 public:
};

RandomAgent::RandomAgent(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:NetworkIO.RandomAgent)
}
RandomAgent::RandomAgent(const RandomAgent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:NetworkIO.RandomAgent)
}

void RandomAgent::SharedCtor() {
}

RandomAgent::~RandomAgent() {
  // @@protoc_insertion_point(destructor:NetworkIO.RandomAgent)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RandomAgent::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void RandomAgent::ArenaDtor(void* object) {
  RandomAgent* _this = reinterpret_cast< RandomAgent* >(object);
  (void)_this;
}
void RandomAgent::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RandomAgent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RandomAgent& RandomAgent::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RandomAgent_GameInfo_2eproto.base);
  return *internal_default_instance();
}


void RandomAgent::Clear() {
// @@protoc_insertion_point(message_clear_start:NetworkIO.RandomAgent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RandomAgent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RandomAgent::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:NetworkIO.RandomAgent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NetworkIO.RandomAgent)
  return target;
}

size_t RandomAgent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetworkIO.RandomAgent)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RandomAgent::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NetworkIO.RandomAgent)
  GOOGLE_DCHECK_NE(&from, this);
  const RandomAgent* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RandomAgent>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NetworkIO.RandomAgent)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NetworkIO.RandomAgent)
    MergeFrom(*source);
  }
}

void RandomAgent::MergeFrom(const RandomAgent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetworkIO.RandomAgent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void RandomAgent::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NetworkIO.RandomAgent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RandomAgent::CopyFrom(const RandomAgent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetworkIO.RandomAgent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RandomAgent::IsInitialized() const {
  return true;
}

void RandomAgent::InternalSwap(RandomAgent* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RandomAgent::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class AIAgent::_Internal {
 public:
};

AIAgent::AIAgent(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:NetworkIO.AIAgent)
}
AIAgent::AIAgent(const AIAgent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:NetworkIO.AIAgent)
}

void AIAgent::SharedCtor() {
}

AIAgent::~AIAgent() {
  // @@protoc_insertion_point(destructor:NetworkIO.AIAgent)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AIAgent::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void AIAgent::ArenaDtor(void* object) {
  AIAgent* _this = reinterpret_cast< AIAgent* >(object);
  (void)_this;
}
void AIAgent::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AIAgent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AIAgent& AIAgent::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AIAgent_GameInfo_2eproto.base);
  return *internal_default_instance();
}


void AIAgent::Clear() {
// @@protoc_insertion_point(message_clear_start:NetworkIO.AIAgent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AIAgent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AIAgent::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:NetworkIO.AIAgent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NetworkIO.AIAgent)
  return target;
}

size_t AIAgent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetworkIO.AIAgent)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AIAgent::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NetworkIO.AIAgent)
  GOOGLE_DCHECK_NE(&from, this);
  const AIAgent* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AIAgent>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NetworkIO.AIAgent)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NetworkIO.AIAgent)
    MergeFrom(*source);
  }
}

void AIAgent::MergeFrom(const AIAgent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetworkIO.AIAgent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void AIAgent::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NetworkIO.AIAgent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AIAgent::CopyFrom(const AIAgent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetworkIO.AIAgent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AIAgent::IsInitialized() const {
  return true;
}

void AIAgent::InternalSwap(AIAgent* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AIAgent::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class PlayerAgent::_Internal {
 public:
};

PlayerAgent::PlayerAgent(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:NetworkIO.PlayerAgent)
}
PlayerAgent::PlayerAgent(const PlayerAgent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:NetworkIO.PlayerAgent)
}

void PlayerAgent::SharedCtor() {
}

PlayerAgent::~PlayerAgent() {
  // @@protoc_insertion_point(destructor:NetworkIO.PlayerAgent)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PlayerAgent::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PlayerAgent::ArenaDtor(void* object) {
  PlayerAgent* _this = reinterpret_cast< PlayerAgent* >(object);
  (void)_this;
}
void PlayerAgent::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PlayerAgent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PlayerAgent& PlayerAgent::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PlayerAgent_GameInfo_2eproto.base);
  return *internal_default_instance();
}


void PlayerAgent::Clear() {
// @@protoc_insertion_point(message_clear_start:NetworkIO.PlayerAgent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PlayerAgent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PlayerAgent::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:NetworkIO.PlayerAgent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NetworkIO.PlayerAgent)
  return target;
}

size_t PlayerAgent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetworkIO.PlayerAgent)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PlayerAgent::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NetworkIO.PlayerAgent)
  GOOGLE_DCHECK_NE(&from, this);
  const PlayerAgent* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PlayerAgent>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NetworkIO.PlayerAgent)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NetworkIO.PlayerAgent)
    MergeFrom(*source);
  }
}

void PlayerAgent::MergeFrom(const PlayerAgent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetworkIO.PlayerAgent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void PlayerAgent::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NetworkIO.PlayerAgent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerAgent::CopyFrom(const PlayerAgent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetworkIO.PlayerAgent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerAgent::IsInitialized() const {
  return true;
}

void PlayerAgent::InternalSwap(PlayerAgent* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PlayerAgent::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class PlayerInfo::_Internal {
 public:
  static const ::Types::Vec2i& startingposition(const PlayerInfo* msg);
  static const ::NetworkIO::AIAgent& aiagent(const PlayerInfo* msg);
  static const ::NetworkIO::RandomAgent& randomagent(const PlayerInfo* msg);
  static const ::NetworkIO::PlayerAgent& playeragent(const PlayerInfo* msg);
};

const ::Types::Vec2i&
PlayerInfo::_Internal::startingposition(const PlayerInfo* msg) {
  return *msg->startingposition_;
}
const ::NetworkIO::AIAgent&
PlayerInfo::_Internal::aiagent(const PlayerInfo* msg) {
  return *msg->AgentInfo_.aiagent_;
}
const ::NetworkIO::RandomAgent&
PlayerInfo::_Internal::randomagent(const PlayerInfo* msg) {
  return *msg->AgentInfo_.randomagent_;
}
const ::NetworkIO::PlayerAgent&
PlayerInfo::_Internal::playeragent(const PlayerInfo* msg) {
  return *msg->AgentInfo_.playeragent_;
}
void PlayerInfo::clear_startingposition() {
  if (GetArena() == nullptr && startingposition_ != nullptr) {
    delete startingposition_;
  }
  startingposition_ = nullptr;
}
void PlayerInfo::set_allocated_aiagent(::NetworkIO::AIAgent* aiagent) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_AgentInfo();
  if (aiagent) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(aiagent);
    if (message_arena != submessage_arena) {
      aiagent = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, aiagent, submessage_arena);
    }
    set_has_aiagent();
    AgentInfo_.aiagent_ = aiagent;
  }
  // @@protoc_insertion_point(field_set_allocated:NetworkIO.PlayerInfo.AIAgent)
}
void PlayerInfo::set_allocated_randomagent(::NetworkIO::RandomAgent* randomagent) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_AgentInfo();
  if (randomagent) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(randomagent);
    if (message_arena != submessage_arena) {
      randomagent = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, randomagent, submessage_arena);
    }
    set_has_randomagent();
    AgentInfo_.randomagent_ = randomagent;
  }
  // @@protoc_insertion_point(field_set_allocated:NetworkIO.PlayerInfo.RandomAgent)
}
void PlayerInfo::set_allocated_playeragent(::NetworkIO::PlayerAgent* playeragent) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_AgentInfo();
  if (playeragent) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(playeragent);
    if (message_arena != submessage_arena) {
      playeragent = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, playeragent, submessage_arena);
    }
    set_has_playeragent();
    AgentInfo_.playeragent_ = playeragent;
  }
  // @@protoc_insertion_point(field_set_allocated:NetworkIO.PlayerInfo.PlayerAgent)
}
PlayerInfo::PlayerInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  deck_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:NetworkIO.PlayerInfo)
}
PlayerInfo::PlayerInfo(const PlayerInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      deck_(from.deck_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  username_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_username().empty()) {
    username_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_username(), 
      GetArena());
  }
  uid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_uid().empty()) {
    uid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_uid(), 
      GetArena());
  }
  if (from._internal_has_startingposition()) {
    startingposition_ = new ::Types::Vec2i(*from.startingposition_);
  } else {
    startingposition_ = nullptr;
  }
  clear_has_AgentInfo();
  switch (from.AgentInfo_case()) {
    case kAIAgent: {
      _internal_mutable_aiagent()->::NetworkIO::AIAgent::MergeFrom(from._internal_aiagent());
      break;
    }
    case kRandomAgent: {
      _internal_mutable_randomagent()->::NetworkIO::RandomAgent::MergeFrom(from._internal_randomagent());
      break;
    }
    case kPlayerAgent: {
      _internal_mutable_playeragent()->::NetworkIO::PlayerAgent::MergeFrom(from._internal_playeragent());
      break;
    }
    case AGENTINFO_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:NetworkIO.PlayerInfo)
}

void PlayerInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PlayerInfo_GameInfo_2eproto.base);
  username_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  uid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  startingposition_ = nullptr;
  clear_has_AgentInfo();
}

PlayerInfo::~PlayerInfo() {
  // @@protoc_insertion_point(destructor:NetworkIO.PlayerInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PlayerInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  username_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  uid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete startingposition_;
  if (has_AgentInfo()) {
    clear_AgentInfo();
  }
}

void PlayerInfo::ArenaDtor(void* object) {
  PlayerInfo* _this = reinterpret_cast< PlayerInfo* >(object);
  (void)_this;
}
void PlayerInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PlayerInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PlayerInfo& PlayerInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PlayerInfo_GameInfo_2eproto.base);
  return *internal_default_instance();
}


void PlayerInfo::clear_AgentInfo() {
// @@protoc_insertion_point(one_of_clear_start:NetworkIO.PlayerInfo)
  switch (AgentInfo_case()) {
    case kAIAgent: {
      if (GetArena() == nullptr) {
        delete AgentInfo_.aiagent_;
      }
      break;
    }
    case kRandomAgent: {
      if (GetArena() == nullptr) {
        delete AgentInfo_.randomagent_;
      }
      break;
    }
    case kPlayerAgent: {
      if (GetArena() == nullptr) {
        delete AgentInfo_.playeragent_;
      }
      break;
    }
    case AGENTINFO_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = AGENTINFO_NOT_SET;
}


void PlayerInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:NetworkIO.PlayerInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  deck_.Clear();
  username_.ClearToEmpty();
  uid_.ClearToEmpty();
  if (GetArena() == nullptr && startingposition_ != nullptr) {
    delete startingposition_;
  }
  startingposition_ = nullptr;
  clear_AgentInfo();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PlayerInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string Username = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_username();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "NetworkIO.PlayerInfo.Username"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string UID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_uid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "NetworkIO.PlayerInfo.UID"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .NetworkIO.CardInfo Deck = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_deck(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // .Types.Vec2i StartingPosition = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_startingposition(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .NetworkIO.AIAgent AIAgent = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_aiagent(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .NetworkIO.RandomAgent RandomAgent = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_randomagent(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .NetworkIO.PlayerAgent PlayerAgent = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_playeragent(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PlayerInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:NetworkIO.PlayerInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string Username = 1;
  if (this->username().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_username().data(), static_cast<int>(this->_internal_username().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "NetworkIO.PlayerInfo.Username");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_username(), target);
  }

  // string UID = 2;
  if (this->uid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_uid().data(), static_cast<int>(this->_internal_uid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "NetworkIO.PlayerInfo.UID");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_uid(), target);
  }

  // repeated .NetworkIO.CardInfo Deck = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_deck_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_deck(i), target, stream);
  }

  // .Types.Vec2i StartingPosition = 4;
  if (this->has_startingposition()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::startingposition(this), target, stream);
  }

  // .NetworkIO.AIAgent AIAgent = 5;
  if (_internal_has_aiagent()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::aiagent(this), target, stream);
  }

  // .NetworkIO.RandomAgent RandomAgent = 6;
  if (_internal_has_randomagent()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::randomagent(this), target, stream);
  }

  // .NetworkIO.PlayerAgent PlayerAgent = 7;
  if (_internal_has_playeragent()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::playeragent(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NetworkIO.PlayerInfo)
  return target;
}

size_t PlayerInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetworkIO.PlayerInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .NetworkIO.CardInfo Deck = 3;
  total_size += 1UL * this->_internal_deck_size();
  for (const auto& msg : this->deck_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string Username = 1;
  if (this->username().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_username());
  }

  // string UID = 2;
  if (this->uid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_uid());
  }

  // .Types.Vec2i StartingPosition = 4;
  if (this->has_startingposition()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *startingposition_);
  }

  switch (AgentInfo_case()) {
    // .NetworkIO.AIAgent AIAgent = 5;
    case kAIAgent: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *AgentInfo_.aiagent_);
      break;
    }
    // .NetworkIO.RandomAgent RandomAgent = 6;
    case kRandomAgent: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *AgentInfo_.randomagent_);
      break;
    }
    // .NetworkIO.PlayerAgent PlayerAgent = 7;
    case kPlayerAgent: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *AgentInfo_.playeragent_);
      break;
    }
    case AGENTINFO_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PlayerInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NetworkIO.PlayerInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const PlayerInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PlayerInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NetworkIO.PlayerInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NetworkIO.PlayerInfo)
    MergeFrom(*source);
  }
}

void PlayerInfo::MergeFrom(const PlayerInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetworkIO.PlayerInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  deck_.MergeFrom(from.deck_);
  if (from.username().size() > 0) {
    _internal_set_username(from._internal_username());
  }
  if (from.uid().size() > 0) {
    _internal_set_uid(from._internal_uid());
  }
  if (from.has_startingposition()) {
    _internal_mutable_startingposition()->::Types::Vec2i::MergeFrom(from._internal_startingposition());
  }
  switch (from.AgentInfo_case()) {
    case kAIAgent: {
      _internal_mutable_aiagent()->::NetworkIO::AIAgent::MergeFrom(from._internal_aiagent());
      break;
    }
    case kRandomAgent: {
      _internal_mutable_randomagent()->::NetworkIO::RandomAgent::MergeFrom(from._internal_randomagent());
      break;
    }
    case kPlayerAgent: {
      _internal_mutable_playeragent()->::NetworkIO::PlayerAgent::MergeFrom(from._internal_playeragent());
      break;
    }
    case AGENTINFO_NOT_SET: {
      break;
    }
  }
}

void PlayerInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NetworkIO.PlayerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerInfo::CopyFrom(const PlayerInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetworkIO.PlayerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerInfo::IsInitialized() const {
  return true;
}

void PlayerInfo::InternalSwap(PlayerInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  deck_.InternalSwap(&other->deck_);
  username_.Swap(&other->username_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  uid_.Swap(&other->uid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(startingposition_, other->startingposition_);
  swap(AgentInfo_, other->AgentInfo_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata PlayerInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class GameInfo::_Internal {
 public:
  static const ::Types::Vec2i& mapsize(const GameInfo* msg);
};

const ::Types::Vec2i&
GameInfo::_Internal::mapsize(const GameInfo* msg) {
  return *msg->mapsize_;
}
void GameInfo::clear_mapsize() {
  if (GetArena() == nullptr && mapsize_ != nullptr) {
    delete mapsize_;
  }
  mapsize_ = nullptr;
}
GameInfo::GameInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  players_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:NetworkIO.GameInfo)
}
GameInfo::GameInfo(const GameInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      players_(from.players_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_mapsize()) {
    mapsize_ = new ::Types::Vec2i(*from.mapsize_);
  } else {
    mapsize_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:NetworkIO.GameInfo)
}

void GameInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GameInfo_GameInfo_2eproto.base);
  mapsize_ = nullptr;
}

GameInfo::~GameInfo() {
  // @@protoc_insertion_point(destructor:NetworkIO.GameInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GameInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete mapsize_;
}

void GameInfo::ArenaDtor(void* object) {
  GameInfo* _this = reinterpret_cast< GameInfo* >(object);
  (void)_this;
}
void GameInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GameInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GameInfo& GameInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GameInfo_GameInfo_2eproto.base);
  return *internal_default_instance();
}


void GameInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:NetworkIO.GameInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  players_.Clear();
  if (GetArena() == nullptr && mapsize_ != nullptr) {
    delete mapsize_;
  }
  mapsize_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GameInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .NetworkIO.PlayerInfo Players = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_players(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // .Types.Vec2i MapSize = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_mapsize(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GameInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:NetworkIO.GameInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .NetworkIO.PlayerInfo Players = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_players_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_players(i), target, stream);
  }

  // .Types.Vec2i MapSize = 2;
  if (this->has_mapsize()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::mapsize(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NetworkIO.GameInfo)
  return target;
}

size_t GameInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetworkIO.GameInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .NetworkIO.PlayerInfo Players = 1;
  total_size += 1UL * this->_internal_players_size();
  for (const auto& msg : this->players_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .Types.Vec2i MapSize = 2;
  if (this->has_mapsize()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *mapsize_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NetworkIO.GameInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const GameInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GameInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NetworkIO.GameInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NetworkIO.GameInfo)
    MergeFrom(*source);
  }
}

void GameInfo::MergeFrom(const GameInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetworkIO.GameInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  players_.MergeFrom(from.players_);
  if (from.has_mapsize()) {
    _internal_mutable_mapsize()->::Types::Vec2i::MergeFrom(from._internal_mapsize());
  }
}

void GameInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NetworkIO.GameInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameInfo::CopyFrom(const GameInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetworkIO.GameInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameInfo::IsInitialized() const {
  return true;
}

void GameInfo::InternalSwap(GameInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  players_.InternalSwap(&other->players_);
  swap(mapsize_, other->mapsize_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GameInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace NetworkIO
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::NetworkIO::CardInfo* Arena::CreateMaybeMessage< ::NetworkIO::CardInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::NetworkIO::CardInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::NetworkIO::RandomAgent* Arena::CreateMaybeMessage< ::NetworkIO::RandomAgent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::NetworkIO::RandomAgent >(arena);
}
template<> PROTOBUF_NOINLINE ::NetworkIO::AIAgent* Arena::CreateMaybeMessage< ::NetworkIO::AIAgent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::NetworkIO::AIAgent >(arena);
}
template<> PROTOBUF_NOINLINE ::NetworkIO::PlayerAgent* Arena::CreateMaybeMessage< ::NetworkIO::PlayerAgent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::NetworkIO::PlayerAgent >(arena);
}
template<> PROTOBUF_NOINLINE ::NetworkIO::PlayerInfo* Arena::CreateMaybeMessage< ::NetworkIO::PlayerInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::NetworkIO::PlayerInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::NetworkIO::GameInfo* Arena::CreateMaybeMessage< ::NetworkIO::GameInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::NetworkIO::GameInfo >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
