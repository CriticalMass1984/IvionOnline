void Apply_{NAME}_Set_Mutation(GameInstance* instance,  {PACKAGE_NAME}::{NAME}_Set_Mutation* mutation){{
    {PACKAGE_NAME}::{NAME}* object = instance->ResolvePath<{PACKAGE_NAME}::{NAME}>(mutation->mutable_path());
    assert(object);
	{APPLY_VALUE}
}}
void Apply_List_{NAME}_Insert_Mutation(GameInstance* instance, {PACKAGE_NAME}::List_{NAME}_Insert_Mutation* mutation){{
    {PACKAGE_NAME}::List_{NAME} *list = instance->ResolvePath<{PACKAGE_NAME}::List_{NAME}>(mutation->mutable_path());
	const int size = list->element_size();
	assert(0 < mutation->index());
	assert(mutation->index() <= size);
	if (size == mutation->index()) {{
		list->add_element()->CopyFrom(mutation->newvalue());
	}} else {{
		list->add_element()->CopyFrom(mutation->newvalue());
		list->mutable_element()->SwapElements(mutation->index(), size);
	}}
}}
void Apply_List_{NAME}_Remove_Mutation(GameInstance* instance, {PACKAGE_NAME}::List_{NAME}_Remove_Mutation* mutation){{
    {PACKAGE_NAME}::List_{NAME} *list = instance->ResolvePath<{PACKAGE_NAME}::List_{NAME}>(mutation->mutable_path());
	const int size = list->element_size() - 1;
	assert(0 < mutation->index());
	assert(mutation->index() <= size);
	if (size == mutation->index()) {{
		list->mutable_element()->RemoveLast();
	}} else {{
		list->mutable_element()->SwapElements(mutation->index(), size);
		list->mutable_element()->RemoveLast();
    }}
}}
void Revert_{NAME}_Set_Mutation(GameInstance* instance, {PACKAGE_NAME}::{NAME}_Set_Mutation* mutation){{
    {PACKAGE_NAME}::{NAME}* object = instance->ResolvePath<{PACKAGE_NAME}::{NAME}>(mutation->mutable_path());
    assert(object);
	{REVERT_VALUE}
}}
void Revert_List_{NAME}_Insert_Mutation(GameInstance* instance, {PACKAGE_NAME}::List_{NAME}_Insert_Mutation* mutation){{
    {PACKAGE_NAME}::List_{NAME} *list = instance->ResolvePath<{PACKAGE_NAME}::List_{NAME}>(mutation->mutable_path());
	const int size = list->element_size() - 1;
	assert(0 < mutation->index());
	assert(mutation->index() <= size);
	if (size == mutation->index()) {{
		list->mutable_element()->RemoveLast();
	}} else {{
		list->mutable_element()->SwapElements(mutation->index(), size);
		list->mutable_element()->RemoveLast();
	}}
}}
void Revert_List_{NAME}_Remove_Mutation(GameInstance* instance, {PACKAGE_NAME}::List_{NAME}_Remove_Mutation* mutation){{
    {PACKAGE_NAME}::List_{NAME} *list = instance->ResolvePath<{PACKAGE_NAME}::List_{NAME}>(mutation->mutable_path());
	const int size = list->element_size();
	assert(0 < mutation->index());
	assert(mutation->index() <= size);
	if (size == mutation->index()) {{
		list->add_element()->CopyFrom(mutation->oldvalue());
	}} else {{
		list->add_element()->CopyFrom(mutation->oldvalue());
		list->mutable_element()->SwapElements(mutation->index(), size);
	}}
}}