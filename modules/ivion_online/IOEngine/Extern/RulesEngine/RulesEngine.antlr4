grammar RulesEngine;

primaryExpression
    : Identifier
    | Integer
    | StringLiteral+
    |   '(' expression ')'
    ;

additiveExpression
    :   multiplicativeExpression
    |   additiveExpression '+' multiplicativeExpression
    |   additiveExpression '-' multiplicativeExpression
    ;

assignmentExpression
    :   conditionalExpression
    |   unaryExpression AssignmentOperator assignmentExpression
    |   DigitSequence // for
    ;

AssignmentOperator
    :   '=' | '*=' | '/=' | '%=' | '+=' | '-=' | '<<=' | '>>=' | '&=' | '^=' | '|='
    ;

expression : assignmentExpression;

typedefName
    :   Identifier
    ;

designator
    :   '[' expression ']'
    |   '.' Identifier
    ;


// data types
integer: Integer;

Integer
    :    Digit+
    ;

Identifier
    :   Nondigit
        (   Nondigit
        |   Digit
        )*
    ;


fragment
Nondigit
    :   [a-zA-Z_]
    ;

fragment
Digit
    :   [0-9]
    ;

StringLiteral
    : '"' SCharSequence? '"'
    ;

fragment
SCharSequence
    :   SChar+
    ;

fragment
SChar
    :   ~["\\\r\n]
    |   EscapeSequence
    |   '\\\n'   // Added line
    |   '\\\r\n' // Added line
    ;

fragment
EscapeSequence
    :   SimpleEscapeSequence
    ;

fragment
SimpleEscapeSequence
    :   '\\' ['"?abfnrtv\\]
    ;

// Skips
Whitespace
    :   [ \t]+
        -> skip
    ;

BlockComment
    :   '/*' .*? '*/'
        -> skip
    ;

LineComment
    :   '//' ~[\r\n]*
        -> skip
    ;

