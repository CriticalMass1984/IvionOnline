#!/usr/bin/env python

import shlex
import subprocess
import fnmatch
import os
import pathlib
env=object()
Import('env')

FILE_PATH = os.getcwd()
assert(FILE_PATH.endswith("build"))
FILE_PATH = FILE_PATH[:-len("build")]
print("FILE_PATH: {}".format(FILE_PATH))

env.Append(CCFLAGS = '-g')

def GetSources(directory):
    matches = list()
    for root, dirnames, filenames in os.walk(os.path.join(FILE_PATH, directory)):
        for filename in fnmatch.filter(filenames, '*.cpp'):
            matches.append(os.path.join(root, filename))
        for filename in fnmatch.filter(filenames, '*.cc'):
            matches.append(os.path.join(root, filename))
    print("GetSources: {}".format("\n".join(matches)))
    return matches


def GetSharedLibs(directory):
    matches = list()
    directory = os.path.join(FILE_PATH, directory)
    for root, dirnames, filenames in os.walk(directory):
        for filename in fnmatch.filter(filenames, '*.so'):
            matches.append(filename)  # [:len(filename)-len(".so")])
    print("GetSharedLibs: {}".format("\n".join(matches)))
    return matches

def GetStaticLibs(directory):
    matches = list()
    directory = os.path.join(FILE_PATH, directory)
    for root, dirnames, filenames in os.walk(directory):
        for filename in fnmatch.filter(filenames, '*.a'):
            matches.append(filename)  # [:len(filename)-len(".so")])
    print("GetSharedLibs: {}".format("\n".join(matches)))
    return matches

# Thirdparty source files
# Not unbundled for now as they are not commonly available as shared library

#env.StaticLibrary("Antlr4Runtime", GetSources("Extern/Antlr4Runtime/Source"), CPPPATH=["Extern/Antlr4Runtime/Include"], CXXFLAGS="-std=c++17")

IncludeDirs = ["{}/{}".format(FILE_PATH, x)
               for x in ["Include", "Extern/Install/GRPC/include"]] #
Libraries = GetStaticLibs("Extern/Install/GRPC/lib") + GetSharedLibs("Extern/Install/GRPC/lib")
LibraryDir = ["{}/{}".format(FILE_PATH, x)
              for x in ["build", "Extern/Install/GRPC/lib"]]
LinkerFlags = list()
# build main library
env.StaticLibrary(
    "IOEngine",
    GetSources("Source"),
    CPPPATH=IncludeDirs,
    CXXFLAGS="-std=c++17",
    LDFLAGS=LinkerFlags,
    LIBS=Libraries,
    LIBPATH=LibraryDir)


# build tests too
for testFile in GetSources("Test"):
    print("Test File: {}".format(testFile))
    env.Program(testFile,
                CPPPATH=IncludeDirs,
                CXXFLAGS="-std=c++17",
                LIBS=["IOEngine"] + Libraries,
                LDFLAGS=LinkerFlags,
                LIBPATH=LibraryDir)
