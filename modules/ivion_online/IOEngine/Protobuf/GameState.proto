syntax = "proto3";

package GameState;

import "Types.proto";
import "Effects.proto";
/////// Entities

message Player {
    string Name = 1;
    string UID = 2;
    
    repeated Types.CardRef Field = 3;
    repeated Types.CardRef Hand = 4;
    repeated Types.CardRef Deck = 5;
    repeated Types.CardRef Discard = 6;
    repeated Types.CardRef Feats = 7;

    Types.Vec2iRef Position = 8;

    Types.Integer Health     = 9;
    Types.Integer Actions    = 10;
    Types.Integer Power      = 11;
    Types.Integer Slow       = 12;
    Types.Integer Silence    = 13;
    Types.Integer Disarm     = 14;
    Types.Integer Initiative = 15;

    Types.Integer MaxHealth     = 16;
    Types.Integer MaxActions    = 17;
    Types.Integer MaxPower      = 18;
    Types.Integer MaxSlow       = 19;
    Types.Integer MaxSilence    = 20;
    Types.Integer MaxDisarm     = 21;
    Types.Integer MaxInitiative = 22;
}

message Tile {
    Types.Vec2i Position = 1;
    Types.TerrainType Terrain = 2;
    repeated Types.PlayerRef Players = 3;
    repeated Types.CardRef Cards = 4;
}

message CardMetaData{
    enum Color {
        GRAY = 0;
        BLACK = 1;
        RED = 2;
        GREEN = 3;
        BLUE = 4;
        WHITE = 5;
    }
    string BaseName = 1;
    string Archetype = 2;
    bool Ultimate = 3;
    bool Feat = 4;
    bool BasicAction = 5;
    repeated Color Colors = 6;
}

message CardStats {
    Types.Integer ActionCost = 1;
    Types.Integer PowerCost = 2;
    Types.Integer Range = 3;

    Types.Integer AffectedBySlow = 4;
    Types.Integer AffectedBySilence = 5;
    Types.Integer AffectedByDisarm = 6;

    Effects.CardEffect OmniPresentEffect = 7;
    Effects.CardEffect PassiveEffect = 8;
    Effects.CardEffect FeatEffect = 9;
    Effects.CardEffect PlayEffect = 10;
    Effects.CardEffect ResolveEffect = 11;
}

message Card {
    string Name = 1;
    CardMetaData MetaData = 2;

    Types.PlayerRef Owner = 3;
    Types.PlayerRef Controller = 4;
    Types.EntityRef Attached = 5;

    CardStats Stats = 6;
}

message Team {
    repeated Types.PlayerRef Players = 1;
}

message SetMutation {
    Types.Path Object = 1;

    Types.EntityValue NewValue = 2;
    Types.EntityValue OldValue = 3;
}

message RemoveMutation {
    Types.Path Object = 1;

    Types.EntityValue OldValue = 2;
    int32 Index = 3;
}

message InsertMutation {
    Types.Path Object = 1;

    Types.EntityValue NewValue = 2;
    int32 Index = 3;
}

message Mutation {
    oneof mutation {
        SetMutation Set = 1;
        RemoveMutation Remove = 2;
        InsertMutation Insert = 3;
    }
}

message GameState {
    repeated Player Players = 1;
    repeated Card Cards = 2;
    repeated Tile Tiles = 3;
    repeated Team Teams = 4;

    Types.Integer TurnNumber = 6;
    repeated Card Stack = 7;

}

message GameInstance {
    GameState GameState = 1;
    repeated Mutation History = 2;
}
