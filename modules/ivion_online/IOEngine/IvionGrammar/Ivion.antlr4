grammar Ivion;


////////////////////////////////////////////////////////////////////// Players

Heal : 'heal' | 'healed';
Disarm : 'disarm' | 'disarmed';
Silence : 'silence' | 'silenced';
Slow : 'slow' | 'slowed';
Control: 'control';
Discard: 'discard' | 'discards';
Draw: 'draw' | 'draws';
Deal: 'deal';
Move: 'move' | 'moves';
Travel: 'travel' | 'travels' ;
Target : 'target' | 'targeting' ;
Gain: 'gain' | 'gains';
Action: 'action' | 'actions';
Power: 'power';
Initiative: 'initiative';
SecondWind: 'second wind';
May: 'may';
Play: 'play';
Reveal: 'reveal' | 'reveals' | 'revealed';
Damage: 'damage' ;
Remove: 'remove';
Stun: 'stun';
Pay: 'pay' | 'plays' | 'paid' | 'spend' | 'spends';
With: 'with';

Player : 'player' '\'s'? Have?;
Enemy : 'enemy' '\'s'? Have?;
Another: 'another';
CardController: 'you' | 'yourself' | 'your' | 'you\'ve' | 'you' Have;
PreviousPlayer: 'them' | 'they' | 'their' | 'they\'ve' | 'they' Have;

Range: 'range';
Away: 'away';
Controller: 'controller';
Its: 'its';
Use: 'use' | 'uses';
UpTo: 'up to';
Have: 'have' | 'has';
Health: 'health' | 'hp';
For: 'for';
Less: 'less';
Free: 'free';
All: 'all';
Instances: 'instances';
More: 'more';
Removed: 'removed';
Way: 'way';
First: 'first';
During: 'during';

////////////////////////////////////////////////////////////////////// Tiles

Tile: 'tile' | 'tiles';
Empty: 'empty';
Enchanted: 'enchanted';
Difficult: 'difficult';
Terrain: 'terrain';
Make: 'make';
Token: 'token';

////////////////////////////////////////////////////////////////////// Cards

Card : 'card' | 'cards';

Heroic: 'heroic';
Attach: 'attach';
Hardcast: 'hardcast';

That: 'that';
Put: 'put';
Meta: 'meta';
Counter: 'counter' | 'counters' | 'countered';
Destroy: 'destroy';
Resource: 'resource' | 'resources';
resource: Resource | Action | Power;
Unless: 'unless';
Top: 'top';
Bottom: 'bottom';
Deck: 'deck';
On: 'On' | 'on';
Hand: 'hand';
From: 'from';
Until: 'until';
Number: 'number';
In: 'in';
It: 'it';
Or: 'or';

////////////////////////////////////////////////////////////////////// Triggers

Turn: 'turn';
Start: 'start';
End: 'end';
At: 'at';
After: 'after' | At;
before: 'before';
This: 'this';
Then: 'then' | 'Then';
Enters: 'enter' | 'enters';
Time: 'time';

////////////////////////////////////////////////////////////////////// Replacement


If: 'if';
Do: 'do' | 'does' | 'did';
Resolve: 'resolve' | 'resolved' | 'resolves';
Used: 'used';
Non: 'non-';
Ability: 'ability';
Attack: 'attack';
Already: 'already';
Instead: 'instead';
Cost: 'cost';


////////////////////////////////////////////////////////////////////// Passive Modifiers

Also: 'also';
Except: 'except';

////////////////////////////////////////////////////////////////////// Misc

Choose: 'choose';
And: 'and';
Each: 'each';

// articles
A: 'a' | 'an';
Is: 'is' | 'are';
To: 'to';
Take: 'take' | 'takes';
Of: 'of';
The: 'the';

One: 'one';
Two: 'two';
Three: 'three';
Four: 'four';
Five: 'five';
Six: 'six';

Integer
    :    [0-9]+
    ;

Newline
    :  '\n'
    ;

// Skips
Whitespace
    :   [ \t]+
        -> skip
    ;

//////////////////////////////////////////////////////////////////////

filterPlayer
    : (Player | Enemy)+;

targetPlayer
    : Target filterPlayer
    | Another Target filterPlayer
    | Target Another filterPlayer
    | UpTo integer Target filterPlayer
    ;

selectPlayer
    : A filterPlayer
    | Another filterPlayer
    | filterPlayer
    | Its Controller
    ;

cardController : CardController;

previousPlayer : PreviousPlayer;

player
    : cardController
    | selectPlayer
    | previousPlayer
    | targetPlayer
    ;

///////////////

damagePlayer
    : Deal integer Damage To player
    | player Take integer Damage
    | Deal Damage To player 'equal' To integer
    ;

controlPlayer
    : (Control | Slow | Silence | Disarm) integer player
    | player Is (Control | Slow | Silence | Disarm) integer
    ;

movePlayer
    : Move To tile
    ;

travelPlayer
    : Travel To tile
    | Travel integer Tile
    | Travel player To tile
    | Travel player UpTo? integer Tile
    | Travel player UpTo? integer Tile Away From player
    ;

gainResource
    : player? Gain integer? More? (resource | Initiative);

payResource
    : player? Pay integer resource;

drawCards
    : player Draw integer Card
    | Draw integer Card
    ;

discardCards
    : player Discard integer Card
    | Discard integer Card
    ;

useSecondWind
    : Use (cardController | previousPlayer) SecondWind;

playACard
    : player May? Play card
    | player May? Play card For integer Less resource
    | player May? Play card For Free
    ;

heal
    : Heal player integer Health;

revealFromHand
    : player Reveal integer Card From PreviousPlayer Hand
    ;

removeControl
    : Remove UpTo integer Instances Of Control From player
    ;

stunPlayer
    : Stun player
    ;

playerEffect
    : damagePlayer
    | controlPlayer
    | movePlayer
    | travelPlayer
    | gainResource
    | drawCards
    | useSecondWind
    | playACard
    | heal
    | revealFromHand
    | discardCards
    | removeControl
    | stunPlayer
    | payResource
    ;

//////////////////////////////////////////////////////////////////////

targetTile
    : Target Tile
    | Target Another Tile
    | Another Target Tile
    | UpTo integer Target Tile
    | Target Empty Tile
    ;

selectTile
    : A Tile
    ;

previousTile
    : That Tile
    | It
    | This Tile
    ;

tile
    : selectTile
    | targetTile
    | previousTile
    ;


//////////////////////////////////////////////////////////////////////


targetTerrain
    : Target Terrain Token
    ;

terrain
    : targetTerrain
    ;

///////////////

makeTerrain
    : Make tile (Difficult | Enchanted) Terrain
    | Make (Difficult | Enchanted | ) Terrain In tile
    ;
destroyTerrain: Remove terrain;

terrainEffect
    : makeTerrain
    | destroyTerrain
    ;


//////////////////////////////////////////////////////////////////////

cardFilterPrefix
    : Another
    | Non? (Attack | Ability)
    | player First
    ;

cardFilterPostfix
    : Target player
    | During player Turn
    | For The First Time During Each Turn
    | From player Discard
    | player Play
    | With A resource Cost Of integer Or Less
    ;

targetCard
    : (UpTo integer)? cardFilterPrefix* Target cardFilterPrefix* Card cardFilterPostfix*
    ;

selectCard
    :  integer cardFilterPrefix* Card cardFilterPostfix*
    |  A? cardFilterPrefix* Card cardFilterPostfix*
    ;

previousCard
    : That Card
    | The Card
    ;

topOfStack
    : Top Of The 'stack'
    ;

bottomOfDeck
    : The Card On The Bottom Of player Deck
    | The Bottom Card Of player Deck
    ;

topOfDeck
    : The Card On The Top Of player Deck
    | The Top Card Of player Deck
    ;

hand
    : player Hand;

card
    : previousCard
    | targetCard
    | selectCard
    | topOfStack
    | bottomOfDeck
    | topOfDeck
    | From hand
    ;


///////////////

attachCard
    : Attach To player
    | Attach To player Until End Of Turn
    | Attach To tile
    | Attach To tile Until End Of Turn
    ;

metaCounterCard
    : Meta Counter card
    ;

counterCard
    : Counter card Unless playerEffect
    | Counter card
    ;

destroyCard
    : Destroy card
    ;

cardGainsTrait
    : card Gain (Heroic)
    ;

putCard
    : Put card (On bottomOfDeck | topOfDeck | 'into' hand);

hardcast
    : Hardcast;

resolveCard
    : Resolve card
    | card Resolve
    ;

cardEffect
    : metaCounterCard
    | counterCard
    | destroyCard
    | attachCard
    | putCard
    | cardGainsTrait
    | hardcast
    | resolveCard
    ;


//////////////////////////////////////////////////////////////////////

turnTrigger
    : At The (Start | End) Of player Turn
    ;

effectTrigger
    : After player effect cardFilterPostfix*
    | After cardEffect cardFilterPostfix*
    ;

tileTrap
    : After player Enters tile
    ;

triggerEffect
    : effectTrigger ','? effect 
    | turnTrigger ',' effect
    | tileTrap ',' effect
    ;

//////////////////////////////////////////////////////////////////////

breach: 'breach' '-';
advantage: 'advantage' '-';
frenzy: 'frenzy' '-';

resolved: If player Resolve (A | Another) Non? (Ability | Attack) Card This Turn;
usedSecondWind: If player Already Used (CardController | PreviousPlayer) SecondWind;
stunSuccess: If A resource Is Removed This Way;
counterSuccess: If card Is Counter;
ifPlayerMakesChoice : If (CardController | PreviousPlayer) Do;

condition
    : resolved
    | usedSecondWind
    | ifPlayerMakesChoice
    | stunSuccess
    | counterSuccess
    ;

conditionalEffect
    : condition ',' Instead? effect
    | breach effect
    | advantage effect
    | frenzy effect
    ;

////////////////////////////////////////////////////////////////////// Passive Modifiers

cardModifier
    : card Cost integer Less resource
    ;

rangeSource
    : All Of CardController Card ',' Except Travel Card That Target A Tile ',' Also Draw Range From Terrain
    | All Of CardController Card ',' Except Travel Card That Target A Tile ',' Also Draw Range From .*?
    ;

passiveModifier
    : cardModifier
    | rangeSource
    ;

//////////////////////////////////////////////////////////////////////

simpleEffect
    : (Then ',' | Then |)
    (
        playerEffect
        | cardEffect
        | terrainEffect
        | passiveModifier
    ) (',' | '.' | And)
    ;

effect
    : simpleEffect
    | Choose integer ':' ('-' simpleEffect)+
    | Choose integer For Each player In tile ':' ('-' simpleEffect)+
    ;

//////////////////////////////////////////////////////////////////////


text
    : (
        conditionalEffect
        | triggerEffect 
        | effect)+ 
        EOF;

//////////////////////////////////////////////////////////////////////

/* built in data types */

theNumberOfCardsInHand
    : The Number Of Card In player Hand
    | The Number Of Reveal Card In player Hand
    ;
integerLiteral: Integer;
integerWord: A | One | Two | Three | Four | Five | Six;

integer
    : integerLiteral
    | integerWord
    | theNumberOfCardsInHand
    ;

