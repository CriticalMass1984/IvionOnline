grammar Ivion;

//////////////////////////////////////////////////////////////////////

targetPlayer
    : 'target' 'player'
    ;

selectPlayer
    : 'a' 'player'
    ;

cardController
    : 'you'
    | 'yourself'
    ;

previousPlayer
    : 'them'
    | 'they'
    ;

player
    : cardController
    | selectPlayer
    | previousPlayer
    | targetPlayer
    ;

damagePlayer
    : 'deal' integer 'damage' To player
    | player Take integer 'damage'
    ;

control
    : Slow | Silence | Disarm
    ;

controlPlayer
    : control integer player
    | player Is control integer
    ;

movePlayer
    : Move player? 'to'? tile
    | Move player? integer Tile
    ;

travelPlayer
    : Travel player? 'to'? tile
    | Travel player? integer Tile
    ;

effectPlayer
    : damagePlayer
    | controlPlayer
    | movePlayer
    | travelPlayer
    ;

Disarm : 'disarm' | 'disarmed';
Silence : 'silence' | 'silenced';
Slow : 'slow' | 'slowed';
Discard: 'discard' | 'discards';

Move: 'move' | 'moves';
Travel: 'travel' | 'travels';

//////////////////////////////////////////////////////////////////////

targetTile
    : 'target' Tile;

selectTile
    : 'a' Tile
    ;

tile
    : selectTile
    | targetTile
    ;

Tile: 'tile' | 'tiles';

//////////////////////////////////////////////////////////////////////

targetCard
    : 'target' 'card';

selectCard
    : 'a' 'card';

card
    : targetCard
    | selectCard
    ;


//////////////////////////////////////////////////////////////////////

line
    : (
        effectPlayer
    ) '.' ('\n' | EOF)?
    ;

paragraph
    : line+ '\n'*
    ;

text
    : paragraph+ | EOF;

/* built in data types */

integer
    : integerLiteral
    | integerWord
    ;
    
integerLiteral: Integer;
integerWord: One | Two | Three | Four | Five | Six;


// lexer
One: 'a' | 'A' | 'one' | 'One';
Two: 'two' | 'Two';
Three: 'three' | 'Three';
Four: 'four' | 'Four';
Five: 'five' | 'Five';
Six: 'six' | 'Six';

// articles
Is: 'is' | 'are';
To: 'to' | 'To';
Take: 'take' | 'takes';

/* built in data types */

Integer
    :    [0-9]+
    ;

Newline
    :  '\n'
    ;

// Skips
Whitespace
    :   [ \t]+
        -> skip
    ;

BlockComment
    :   '/*' .*? '*/'
        -> skip
    ;

LineComment
    :   '//' ~[\r\n]*
        -> skip
    ;