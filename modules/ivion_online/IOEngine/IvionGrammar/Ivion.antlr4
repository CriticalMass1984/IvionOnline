grammar Ivion;


////////////////////////////////////////////////////////////////////// Players

Heal : 'heal' | 'healed';
Disarm : 'disarm' | 'disarmed';
Silence : 'silence' | 'silenced';
Slow : 'slow' | 'slowed';
Control: 'control';
Discard: 'discard' | 'discards';
Draw: 'draw' | 'draws';
Deal: 'deal';
Move: 'move' | 'moves';
Travel: 'travel' | 'travels' ;
Target : 'target' | 'targeting' ;
Gain: 'gain' | 'gains';
Action: 'action' | 'actions';
Power: 'power';
Initiative: 'initiative';
SecondWind: 'second wind';
May: 'may';
Play: 'play';
Reveal: 'reveal' | 'reveals' | 'revealed';
Damage: 'damage' ;
Remove: 'remove';

Player : 'player' '\'s'? Have?;
Enemy : 'enemy' '\'s'? Have?;
Another: 'another';
CardController: 'you' | 'yourself' | 'your' | 'you\'ve' | 'you' Have;
PreviousPlayer: 'them' | 'they' | 'their' | 'they\'ve' | 'they' Have;

Range: 'range';
Away: 'away from you';
Controller: 'controller';
Its: 'its';
Use: 'use' | 'uses';
UpTo: 'up to';
Have: 'have' | 'has';
Health: 'health' | 'hp';
For: 'for';
Less: 'less';
Free: 'free';
All: 'all';
Instances: 'instances';

////////////////////////////////////////////////////////////////////// Tiles

Tile: 'tile' | 'tiles';
Empty: 'empty';

////////////////////////////////////////////////////////////////////// Cards
Card : 'card' | 'cards';

Heroic: 'heroic';
Attach: 'attach';

That: 'that';
Put: 'put';
Meta: 'meta';
Counter: 'counter' | 'counters' | 'countered';
Destroy: 'destroy';
Resource: 'resource' | 'resources';
Unless: 'unless';
Pays: 'pays' | 'spends';
Top: 'top';
Bottom: 'bottom';
Deck: 'deck';
On: 'On' | 'on';
Hand: 'hand';
From: 'from';
Until: 'until';
Number: 'number';
In: 'in';

////////////////////////////////////////////////////////////////////// Triggers

Turn: 'turn';
Start: 'start';
End: 'end';
At: 'at';
After: 'after' | At;
before: 'before';
This: 'this';
Then: 'then' | 'Then';

////////////////////////////////////////////////////////////////////// Replacement


If: 'if';
Do: 'do';
Resolve: 'resolve' | 'resolved';
Used: 'used';
Non: 'non-';
Ability: 'ability';
Attack: 'attack';
Already: 'already';
Instead: 'instead';


////////////////////////////////////////////////////////////////////// Misc

And: 'and';

// articles
A: 'a' | 'an';
Is: 'is' | 'are';
To: 'to';
Take: 'take' | 'takes';
Of: 'of';
The: 'the';

One: 'one';
Two: 'two';
Three: 'three';
Four: 'four';
Five: 'five';
Six: 'six';

Integer
    :    [0-9]+
    ;

Newline
    :  '\n'
    ;

// Skips
Whitespace
    :   [ \t]+
        -> skip
    ;

//////////////////////////////////////////////////////////////////////

filterPlayer
    : (Player | Enemy)+;

targetPlayer
    : Target filterPlayer
    | Another Target filterPlayer
    | Target Another filterPlayer
    | UpTo integer Target filterPlayer
    ;

selectPlayer
    : A filterPlayer
    | Another filterPlayer
    | Its Controller
    ;

cardController : CardController;

previousPlayer : PreviousPlayer;

player
    : cardController
    | selectPlayer
    | previousPlayer
    | targetPlayer
    ;

///////////////

damagePlayer
    : Deal integer Damage To player
    | player Take integer Damage
    | Deal Damage To player 'equal' To integer
    ;

controlPlayer
    : (Control | Slow | Silence | Disarm) integer player
    | player Is (Control | Slow | Silence | Disarm) integer
    ;

movePlayer
    : Move To tile
    ;

travelPlayer
    : Travel To tile
    | Travel integer Tile
    | Travel player To tile
    | Travel player UpTo? integer Tile
    | Travel player Away integer Tile
    ;

gainResource
    : player? Gain integer 'more'? (Power | Action | Initiative);

drawCards
    : player Draw integer Card
    | Draw integer Card
    ;

discardCards
    : player Discard integer Card
    | Discard integer Card
    ;

useSecondWind
    : Use (CardController | PreviousPlayer) SecondWind;

playACard
    : player May? Play integer Card
    | player May? Play integer Card For integer Less Resource
    | player May? Play integer Card For Free
    ;

heal
    : Heal player integer Health;

rangeSource
    : All Of CardController Card ',' 'except' Travel Card That Target A Tile ',' 'also' Draw Range From .*?;

revealFromHand
    : player Reveal integer Card From PreviousPlayer Hand
    ;

removeControl
    : Remove UpTo integer Instances Of Control From player
    ;

effectPlayer
    : damagePlayer
    | controlPlayer
    | movePlayer
    | travelPlayer
    | gainResource
    | drawCards
    | useSecondWind
    | playACard
    | heal
    | rangeSource
    | revealFromHand
    | discardCards
    | removeControl
    ;

//////////////////////////////////////////////////////////////////////

targetTile
    : Target Tile
    | Target Another Tile
    | Another Target Tile
    | UpTo integer Target Tile
    | Target Empty Tile
    ;

selectTile
    : A Tile
    ;

tile
    : selectTile
    | targetTile
    ;

//////////////////////////////////////////////////////////////////////

targetCard
    : Target Card
    | Another Target Card
    | Target Another Card
    | UpTo integer Target Card;

selectCard
    : A Card
    ;

previousCard
    : That Card
    ;

topOfStack
    : Top Of The 'stack';

bottomOfDeck
    : The Card On The Bottom Of player Deck
    | The Bottom Card Of player Deck
    ;

topOfDeck
    : The Card On The Top Of player Deck
    | The Top Card Of player Deck
    ;

hand
    : player Hand;

card
    : previousCard
    | targetCard
    | selectCard
    | topOfStack
    | bottomOfDeck
    | topOfDeck
    | From hand
    ;


///////////////

attachCard
    : Attach To player
    | Attach To tile
    | Attach To tile Until End Of Turn
    ;

metaCounterCard
    : Meta Counter card;

counterCard
    : Counter card Unless player Pays integer Resource;

destroyCard
    : Destroy card;

cardGainsTrait
    : card Gain (Heroic)
    ;

putCard
    : Put card (On bottomOfDeck | topOfDeck | 'into' hand);

cardEffect
    : metaCounterCard
    | counterCard
    | destroyCard
    | attachCard
    | putCard
    | cardGainsTrait
    ;


//////////////////////////////////////////////////////////////////////

turnTrigger
    : At The (Start | End) Of player Turn
    ;

resolvedTrigger: After player Resolve A Non? (Ability | Attack) Card Target player;
cardDrawTrigger: After player drawCards;

triggerConditions
    : turnTrigger
    | resolvedTrigger
    | cardDrawTrigger
    ;

triggerEffect
    : triggerConditions ',' effect 
    ;

//////////////////////////////////////////////////////////////////////

breach: 'breach' '-';
advantage: 'advantage' '-';
frenzy: 'frenzy' '-';

resolved: If player Resolve (A | Another) Non? (Ability | Attack) Card This Turn;
usedSecondWind: If player Already Used (CardController | PreviousPlayer) SecondWind;

ifConditional
    : If (CardController | PreviousPlayer) Do
    | If card Is Counter
    ;

replacementCondition
    : resolved
    | usedSecondWind
    | ifConditional
    ;

replacementEffect
    : replacementCondition ',' Instead? effect
    | breach effect
    | advantage effect
    | frenzy effect
    ;


//////////////////////////////////////////////////////////////////////

effect
    : (Then ',' | Then |)
    (
        effectPlayer
        | cardEffect
    ) (',' | '.' | And)
    ;

choose
    : 'choose' integer ':' ('-' effect)+;

//////////////////////////////////////////////////////////////////////


text
    : (
        choose
        | replacementEffect
        | triggerEffect 
        | effect)+ 
        EOF;

//////////////////////////////////////////////////////////////////////

/* built in data types */

theNumberOfCardsInHand
    : The Number Of Card In player Hand
    | The Number Of Reveal Card In player Hand
    ;
integerLiteral: Integer;
integerWord: A | One | Two | Three | Four | Five | Six;

integer
    : integerLiteral
    | integerWord
    | theNumberOfCardsInHand
    ;

