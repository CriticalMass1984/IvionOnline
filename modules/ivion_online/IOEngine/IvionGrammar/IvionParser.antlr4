parser grammar IvionParser;
options { tokenVocab = IvionLexer; }

generalPostInTerrainFilter: (In | With | That Already Had) Terrain;
generalPostNearTerrainFilter: Near Terrain;
generalPostNearEntityFilter: Near entity;
generalPostInEntityFilter: In entity;
generalPostPlayerChoiceFilter: Of player Choice; // TODO
generalPostAtLeastAwayFilter: At Least literalValue Tile Away;
generalPostAtLeastAwayFromFilter: At Least literalValue Tile Away From entity;
anotherFlag: Another;
upToFlag: Up To;
targetFlag: Target;

//////////////////////////////////////////////////////////////////////////// PLAYER

playerType
    : Player | Enemy | Ally
    ;

uncontrolledFlag: Uncontrolled;
controlledFlag: Controlled; 

playerPrefix
    : anotherFlag
    | uncontrolledFlag
    | controlledFlag
    ;

playerPostfix
    : generalPostInTerrainFilter
    | generalPostNearTerrainFilter
    | generalPostNearEntityFilter
    | generalPostInEntityFilter
    | generalPostPlayerChoiceFilter
    | generalPostAtLeastAwayFilter
    | generalPostAtLeastAwayFromFilter
    ;

playerFilter
    : playerPrefix* playerType playerPostfix*
    ;

currentPlayer
    : Yourself
    | You
    | Your
    ;
previousPlayer
    : Them
    | They
    | That playerType
    | Their
    ;
previousCardsOwner
    : Its Owner
    ;
previousCardsController
    : previousCard Controller
    | Its Controller
    ;
playerRef
    : previousPlayer
    | currentPlayer
    | previousCardsOwner
    | previousCardsController
    ;
selectPlayer
    : upToFlag? literalValue? anotherFlag? targetFlag? playerFilter
    ;
allPlayers
    : (Each | All | Any) Other? playerFilter
    | Yourself Or Another Player
    ;

////
player
    : selectPlayer
    | playerRef
    | allPlayers
    ;

//////////////////////////////////////////////////////////////////////////// CARD

cardType: Card;

cardPreEnemyFilter: Enemy;
cardPreAttachedFilter: Attached;
cardPreAbilityFilter: Non? Ability;
cardPreAttackFilter: Non? Attack;
cardPreRevealedFilter: Reveal;
cardPreInstanceFilter: (| The | playerRef) literalValue;

cardPrefix
    : cardPreEnemyFilter
    | cardPreAttachedFilter
    | cardPreAbilityFilter
    | cardPreAttackFilter
    | cardPreRevealedFilter
    | anotherFlag
    | cardPreInstanceFilter
    ;

cardPostTargettingFilter: Targeting entity;
cardPostCostFilter: With A Resource Cost Of literalValue Or (Less | More);
cardPostAttachedToFilter: Attached To entity;
cardPostControlledByPlayerFilter: Controlled By player;
cardPostHardcastFilter: With Hardcast;
cardPostFrenzyFilter: With Frenzy;
cardPostBreachFilter: With Breach;
cardPostAdvantageFilter: With Advantage;
cardPostInDiscardFilter: From Your Discard;
cardPostTurnRefFilter: This Turn | During player Turn;

cardPostfix
    : cardPostTargettingFilter
    | cardPostCostFilter
    | cardPostAttachedToFilter
    | cardPostControlledByPlayerFilter
    | cardPostHardcastFilter
    | cardPostFrenzyFilter
    | cardPostInDiscardFilter
    | cardPostTurnRefFilter
    | generalPostInTerrainFilter
    | generalPostNearTerrainFilter
    | generalPostNearEntityFilter
    | generalPostInEntityFilter
    | generalPostPlayerChoiceFilter
    | generalPostAtLeastAwayFilter
    | generalPostAtLeastAwayFromFilter
    ;

cardFilter
    : cardPrefix* cardType cardPostfix*
    ;
cardName
    : CARD_NAME
    ;
bottomCard
    : The Bottom Card Of player Deck
    ;
previousCard
    : That Card
    | The Card
    | Its
    | It
    | It From Your Discard
    ;
selectCard
    : upToFlag? literalValue? targetFlag? cardFilter
    ;
singleCard
    : cardName
    | bottomCard
    | previousCard
    | selectCard
    ;
allCards
    : All cardFilter
    ;
////
card
    : singleCard
    | allCards
    ;

//////////////////////////////////////////////////////////////////////////// TILE

tilePreEmptyFilter
    : Non? Empty
    ;

tilePreFix
    : tilePreEmptyFilter
    ;
tilePostFix
    : generalPostInTerrainFilter
    | generalPostNearTerrainFilter
    | generalPostNearEntityFilter
    | generalPostInEntityFilter
    | generalPostPlayerChoiceFilter
    | generalPostAtLeastAwayFilter
    | generalPostAtLeastAwayFromFilter
    ;

tileFilter
    : tilePreFix* Tile tilePostFix*
    ;

targetTile: Another? literalValue? targetFlag? tileFilter;

previousTile
    : That Tile
    | The Tile
    ;
theNearestTile
    : The Nearest tileFilter Next To entity
    ;
playersTile
    : The Tile player Is In
    ;
cardsTile
    : This Tile
    ;
singleTile
    : targetTile
    | previousTile
    | theNearestTile
    | playersTile
    | cardsTile
    ;

multiTile
    : upToFlag? literalValue targetTile
    ;

allTiles
    : (Each | All) tileFilter
    ;

////

tile
    : singleTile
    | allTiles
    | multiTile
    ;

entity
    : card
    | player
    | tile
    ;

hypotheticalEntity
    : card
    | player
    | tile
    ;


//////////////////////////////////////////////////////////////////////////// EFFECTS


disarmPlayer
	: Disarm literalValue player
	| Disarm literalValue
	;

silencePlayer
	: Silence literalValue player
	| Silence literalValue
	;

slowPlayer
	: Slow literalValue player
	| Slow literalValue
	;

controlPlayer
	: Apply literalValue More Instances Of A Control Type Of Your Choice To player
	| Apply A Instance Of A Control Type Of Your Choice To player
	| Increase The Value Of A Control Type Already Affecting player By literalValue
	;

awayFlag
    : Away From entity
    ;

travelDistance
    : Travel player? upToFlag? anotherFlag? literalValue Tile awayFlag?
    ;

travelPlayer
	: Travel player? To entity
	;

destroyCard
	: Destroy card
	;

dealDamage
	: Deal value Damage To player
	| Deal Damage To player Equal To value
	| Deal value Damage To player Plus Damage Equal To value
	| Deal value Damage To
	| Deal Damage To player
	| Deal value More Damage To player
	| Deal value Damage To player Plus value
	| Deal Damage To player Equal To value
	;

counterCard
	: Counter card
	;

attachCard
	: Attach To entity
	| Attach To entity Until turnTrigger
	| Attach CARD_NAME To entity
	;

gainPower
	: player? (
        Gain literalValue POWER
        | Gain literalValue More POWER
        | Gain literalValue Additional POWER
        | Gain literalValue POWER
    )
	;

gainAction
	: player? (
        Gain literalValue ACTION
        | Gain literalValue More ACTION
        | Gain literalValue Additional ACTION
        | Gain literalValue ACTION
    )
	;

gainInitiative
	: Gain INITIATIVE+
	| player Gain INITIATIVE+
	| Gain Another INITIATIVE+
	;

gainMitigate
	: player Gains Mitigate literalValue
	| Gain Mitigate literalValue
	;

loseMitigate
	: Lose Your Mitigate
	;

useSecondWind
	: Use Your Second Wind
	;

returnCard
	: Return card To playerRef Hand
	;

putBottomCardOfDeckIntoHand
	: Put card Into Your Hand
	;

triggerDurationEffects
	: Trigger Your Duration Effects As Though Your Turn Had Just Ended
	;

forLessResources
    : For literalValue Less Resource
    ;
freeFlag
    : For Free
    ;
playCard
	: Play card
	| Play card freeFlag
	| Play card forLessResources
    ;
playUltimate
	: Play Ultimate cardPostfix* P This Doesnt Count Towards Your Ultimate Limit Per Turn
	| Play Ultimate cardPostfix* freeFlag P This Doesnt Count Towards Your Ultimate Limit Per Turn
	| Play Ultimate cardPostfix* forLessResources P This Doesnt Count Towards Your Ultimate Limit Per Turn
	;

discardCards
	: Discard literalValue card
	| Discard card
	| player Discard literalValue card
	| player Discard card
	;

gainsHeroic
	: That Card Gains Heroic
	;

healPlayer
	: Heal player literalValue HP
	| Heal player HP Equal To value
	;

stunPlayer
	: Stun player
	;

revealCards
	: player Reveal literalValue Card From Their Hand
	| player Reveal literalValue Card From Their Hand
	| player Reveal A Card From Their Hand
	| player Reveal A Card From Their Hand
	| player Reveal literalValue Card From Their Hand
	| player Reveal A Card From Their Hand
	| Reveal CARD_NAME
	| Reveal A Card From Your Hand
    | Reveal A Card From Their Hand
	;

drawCards
	: Draw A Card
	| Draw literalValue Card
	| Draw A Additional Card
	| player Draw literalValue Card
	| player Draw literalValue Card
	| player Draw A Card
	;

removeControl
	: Remove Up To literalValue Instances Of Control From player
	| Remove All Control Affecting player
    | Remove A Instance Of Control From player
	;

hardcastEffect
	: Hardcast
	;

seekEffect
	: Seek
	;

makeTerrain
	: Make tile Difficult Terrain
	;

removeTerrain
	: Remove targetFlag Terrain Token
	;

spendResources
	: Spend literalValue Resource
	;

scryEffect
	: Look At The Top literalValue Card Of Your Deck P Put Any Number On The Bottom And The Rest On Top In Any Order
	;

overrideFrenzy
	: That Card Have Frenzy Even If No Player Have Used Their Second Wind
	;

increaseCardDuration
	: Increase The Duration Of A Card You Control By literalValue
	;

resetUseOfCard
	: Reset The Use Of CARD_NAME
	;

heroic
    : Heroic
    ;

//////////////////////////////////////////////////////////////////////////// PASSIVE EFFECTS


onlyPlayCertainCards
	: player May Only Play Card Named CARD_NAME
	| Only Play CARD_NAME If condition
	;

costReduction
	: card player Play Cost literalValue Less Resource
    | The Second Attack Card player Play During Your Turn Cost literalValue Less Resource
	;

rangeSet
	: The Range Of Your Attack Card Is literalValue
	;

cantPlayCards
	: player Cant Play Card
	;

playerCantBeTargeted
	: player Cant Be Targeted By Enemies
	| player Cant Be Targeted By Card
	;

increasedHandSize
    : Your Maximum Hand Size Is Increased By literalValue
    ;

increasedMaxHP
    : Your Maximum HP Is Increased By literalValue
    ;

replacesSecondWind
    : CARD_NAME Replaces Your Second Wind
    ;

noInitiative
    : player Dont Gain INITIATIVE At The Start Of Your Turn
    ;
    
drawRange
	: All Of player Card C Except Travel Card That Target A Tile C Also Draw Range From card
	| All Of player Card C Except Travel Card That Target A Tile C Also Draw Range From tile
	;

gainRange
	: All Of player Card C Except Travel Card That Target A Tile C Gain literalValue Range
    ;

limitTargets
    : Only Target Other player If condition
    ;

passiveEffect
    : playerCantBeTargeted
    | cantPlayCards
    | rangeSet
    | costReduction
    | onlyPlayCertainCards
    | increasedHandSize
    | increasedMaxHP
    | replacesSecondWind
    | noInitiative
    | drawRange
    | gainRange
    | limitTargets
    ;

//////////////////////////////////////////////////////////////////////////// PASSIVE TRIGGERS


durationEffect
	: Duration 
	;

startOfPlayerTurn
	: The Start Of player Turn
	| The Start Of player Turn
    ;

endOfPlayerTurnTrigger
    : The End Of player Turn
	;
    
startOfPlayerNextTurn
    : The Start Of player Next Turn
    ;

endOfTurnTrigger
    : The End Of The Turn
	| The End Of Turn
    | End Of Turn
	;

turnTrigger
    : startOfPlayerTurn
    | endOfPlayerTurnTrigger
    | startOfPlayerNextTurn
    | endOfTurnTrigger
    ;

gameStartTrigger
	: At The Start Of The Game
	;

effectPostfix
    : For The First Time During playerRef Turn
    | For The First Time During Each Turn 
    | During Each Turn
    | During playerRef Turn
    ;

ifPlayerMakesChoice
	: playerRef Do
	| playerRef Dont
	;

ifPreviousActionInvalid
	: playerRef Cant
	;

ifResolvedCard
	: player Have? Resolve card
	;

ifPlayedCard
	: player Have? Play card
	;

ifUsedSecondWind
	: player Have? Already? Used playerRef Second Wind
	| player Second Wind
	;


ifNear
	: hypotheticalEntity Is Near Terrain
	| hypotheticalEntity Is Near tile
	| hypotheticalEntity Is Near card
	| hypotheticalEntity Is Near player
	;

ifControlled
	: player Is Controlled
	;

ifTileHadTerrain
	: previousTile Already Had Terrain
	;

ifCardRevealed
	: player Have At Least literalValue Reveal Card In playerRef Hand
	;

ifPlayerHasMitigate
	: player (Have | Gains) Mitigate
	;

ifPlayerDidntLeaveTile
	: player Didnt Leave A Tile This Turn
	;

ifCardCostReduced
    : card Cost Is Reduced
    ;

ifPlayerHasMoreHP
    : player Have More HP Than player
    ;

ifPlayerHasNoActions
    : player Have No Resource
    ;

ifInTerrain
    : hypotheticalEntity Is In Terrain
    ;

counterCardCondition
	: card Is Countered
	;

stunPlayerCondition
	: A Resource Is Removed In? This Way
	;
    
revealCardsCondition
    : card Is Reveal In? This Way
    ;

playerControlledCondition: player Is Controlled;
playerUncontrolledCondition: player Is Uncontrolled;
playerHasCardsInDiscardCondition: player Have At Least literalValue Card In playerRef Discard;
playerHasTakenDamageCondition: player Have Taken literalValue Or More Damage This Turn;
cardResolvedCondition: card Resolve;
playerDrewCardCondition: player Draw A Card;
playerMadeTerrainCondition: player Make Terrain In tile;
playerEntersSpaceCondition: player (Or player)* Enters (card | tile);
playerAttachesCardCondition: player Attach card To player;
cardIsRevealedCondition: card Is Reveal;
playerStunsPlayerCondition: player Stun player;
cardSentToDiscardCondition: card Is Sent To Your Discard;
cardFailsToResolveCondition: card player Play Fails To Resolve;
playerSlowsPlayerCondition: player Slow player;
playerRecivesControlCondition: player Receive Control;

condition
	: playerControlledCondition
    | playerUncontrolledCondition
    | playerHasCardsInDiscardCondition
    | playerHasTakenDamageCondition
    | cardResolvedCondition
    | playerDrewCardCondition
    | playerMadeTerrainCondition
    | playerEntersSpaceCondition
    | playerAttachesCardCondition
    | cardIsRevealedCondition
    | playerStunsPlayerCondition
    | cardSentToDiscardCondition
    | cardFailsToResolveCondition
    | playerSlowsPlayerCondition
    | playerRecivesControlCondition
    | stunPlayerCondition
    | ifPlayerMakesChoice
    | ifPreviousActionInvalid
    | ifResolvedCard
    | ifUsedSecondWind
    | ifNear
    | ifControlled
    | ifPlayedCard
    | ifTileHadTerrain
    | ifCardRevealed
    | ifPlayerHasMitigate
    | ifPlayerDidntLeaveTile
    | ifCardCostReduced
    | ifPlayerHasMoreHP
    | ifPlayerHasNoActions
    | ifInTerrain
    | counterCardCondition
    | stunPlayerCondition
    | revealCardsCondition
	;

triggerEffect
    : At turnTrigger C effect
	| After condition effectPostfix? C effect
    | durationEffect D effect
    | gameStartTrigger C effect
	;


////////////////////////////////////////////////////////////////////////////




//////////////////////////////////////////////////////////////////////////// replacement Trigger

ifWouldRecieveControl
    : If player Would Receive Control C Instead player Receive The Control
    ;

ifWouldTakeDamage
    : If player Would Take Damage For The First Time During Each Turn C playerRef? Instead Take literalValue Less Damage P This May Not Reduce Damage Taken Below literalValue
    ;

ifWouldHeal
    : If player Would Heal player HP C Instead Deal That Much Damage To player
    ;

replacementTriggerEffect
	: ifWouldRecieveControl
    | ifWouldTakeDamage
    | ifWouldHeal
	;

//////////////////////////////////////////////////////////////////////////// OMNI PRESENT EFFECTS


cardCantBeTargeted
	: CARD_NAME Cant Be Targeted By Card
	;

whileEffect
	: While CARD_NAME Is Reveal In Your Hand C passiveEffect
	;

primaryCostReduction
	: CARD_NAME Cost literalValue Less POWER For Each Other Reveal Card In Your Hand
	;

onlyPlayIf
	: Only Play CARD_NAME If condition
	;

oncePerGameLimit
	: CARD_NAME May Be Play Once Per Game
	;

triggerLimit
    : CARD_NAME May Only Trigger If condition
    ;

triggerTurnLimit
    : CARD_NAME May Trigger literalValue Per Turn
    ;


omniPresentEffect
    : cardCantBeTargeted
    | whileEffect
    | primaryCostReduction
    | onlyPlayIf
    | oncePerGameLimit
    | triggerLimit
    | triggerTurnLimit
    ;

//////////////////////////////////////////////////////////////////////////// misc

one: A | Once | One | First;
two: Two | Twice | Second;
three: Three | Third;
number: Integer;
playerPowerValue: player POWER;
playerControlAmountValue: The Total Value Of Control Affecting player;
playerHandSize: The Number Of card In Their Hand;
playerMitigate: player Mitigate;
playerCardsInHand: literalValue More? (| Damage | Slow | Silence | Disarm) For Each card In playerRef Hand;

literalValue
    : one 
    | two 
    | three 
    | number 
    ;
gameStateValue
    : playerPowerValue
    | playerControlAmountValue
    | playerHandSize
    | playerMitigate
    | playerCardsInHand
    ;
value: gameStateValue | literalValue;


//////////////////////////////////////////////////////////////////////////// effects

chooseSameMultipleTimes: You May Choose The Same Mode literalValue;

effectList
    : D effect 
    | effectList P D effect
    ;

chooseEffect
    : Choose literalValue For Each playerFilter In It O effectList P chooseSameMultipleTimes
    | Choose literalValue O effectList P chooseSameMultipleTimes
    | Choose literalValue O effectList
    | Choose literalValue For Each playerFilter In It O effectList
    ;
  
singleEffect
    : chooseEffect
    | disarmPlayer
    | silencePlayer
    | slowPlayer
    | controlPlayer
    | travelPlayer
    | travelDistance
    | destroyCard
    | dealDamage
    | counterCard
    | attachCard
    | gainPower
    | gainAction
    | gainInitiative
    | gainMitigate
    | loseMitigate
    | useSecondWind
    | returnCard
    | putBottomCardOfDeckIntoHand
    | triggerDurationEffects
    | playCard
    | playUltimate
    | discardCards
    | gainsHeroic
    | healPlayer
    | stunPlayer
    | revealCards
    | drawCards
    | removeControl
    | hardcastEffect
    | seekEffect
    | makeTerrain
    | removeTerrain
    | spendResources
    | scryEffect
    | overrideFrenzy
    | increaseCardDuration
    | resetUseOfCard
    | heroic
    | spendResources
    ;

repeatedEffect
    : singleEffect For Each Instance Of Control playerRef Receive
    | singleEffect
    ;

conditionalEffect
    : If condition C effect
    | repeatedEffect
    ;

alternativeEffect
    : If condition C Instead effect
    | conditionalEffect
    ;

playerOptionalEffectForPlayer: player May Have player alternativeEffect;
playerOptionalEffectWithExtra: player May alternativeEffect To alternativeEffect;
playerOptionalEffect: player May alternativeEffect;
playerExtortEffect: alternativeEffect Unless player alternativeEffect;

effect
    : playerOptionalEffectForPlayer
    | playerOptionalEffectWithExtra
    | playerOptionalEffect
    | playerExtortEffect
    | alternativeEffect
    ;

effectEnd
    : P Then C
    | P
    | And
    | C And
    | C Then
    | C
    | Then
    ;

anyEffect
    : effect
    | passiveEffect
    | replacementTriggerEffect
    | triggerEffect
    ;

breachEffect: Breach D (anyEffect effectEnd)+;
advantageEffect: Advantage D (anyEffect effectEnd)+;
frenzyEffect: Frenzy D (anyEffect effectEnd)+;

line
    : omniPresentEffect P
    | breachEffect 
    | advantageEffect 
    | frenzyEffect
    | anyEffect effectEnd
    ;

text: line+ EOF;
